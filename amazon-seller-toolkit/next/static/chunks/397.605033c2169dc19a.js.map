{"version":3,"file":"static/chunks/397.605033c2169dc19a.js","mappings":"4bAAAA,EAoCO,eAAAC,EAAAC,CAAA,EAKP,OAAAC,KAAAC,OAAAC,YAAA,QAAAC,WAJA,MAAAN,EAAAO,MAAA,CAAAC,MAAA,eAAAC,cAAAC,MAAA,CAAAR,OAKAS,OAAA,YACAA,OAAA,YACAA,OAAA,SACA,CAKe,eAAAC,EAAAC,CAAA,EAGf,GAFAA,GACAA,CAAAA,EAAA,IACAA,EAAA,IAAAA,EAAA,IACA,uDAAgEA,EAAO,GAEvE,IAAAC,EA1BAC,SAhBAC,CAAA,EACA,IAAAC,EAAA,qEACAC,EAAA,GACAC,EATAnB,EAAAoB,eAAA,KAAAd,WASAU,IACA,QAAAK,EAAA,EAAoBA,EAAAL,EAAUK,IAAA,CAE9B,IAAAC,EAAAH,CAAA,CAAAE,EAAA,CAAAJ,EAAAJ,MAAA,CACAK,GAAAD,CAAA,CAAAK,EAAA,CAEA,OAAAJ,CACA,EAgCAL,GACAU,EAAA,MAAAtB,EAAAa,GACA,OACAZ,cAAAY,EACAU,eAAAD,CACA,CACA,CAMO,eAAAE,EAAAvB,CAAA,CAAAwB,CAAA,EAEP,OAAAC,MADA1B,EAAAC,KACAwB,CACA,0HAtEA1B,EAAA4B,WAAA5B,MAAA","sources":["webpack://_N_E/../../node_modules/.pnpm/pkce-challenge@4.1.0/node_modules/pkce-challenge/dist/index.browser.js"],"sourcesContent":["let crypto;\ncrypto = globalThis.crypto; // web browsers\n/**\n * Creates an array of length `size` of random bytes\n * @param size\n * @returns Array of random ints (0 to 255)\n */\nfunction getRandomValues(size) {\n    return crypto.getRandomValues(new Uint8Array(size));\n}\n/** Generate cryptographically strong random string\n * @param size The desired length of the string\n * @returns The random string\n */\nfunction random(size) {\n    const mask = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~\";\n    let result = \"\";\n    const randomUints = getRandomValues(size);\n    for (let i = 0; i < size; i++) {\n        // cap the value of the randomIndex to mask.length - 1\n        const randomIndex = randomUints[i] % mask.length;\n        result += mask[randomIndex];\n    }\n    return result;\n}\n/** Generate a PKCE challenge verifier\n * @param length Length of the verifier\n * @returns A random verifier `length` characters long\n */\nfunction generateVerifier(length) {\n    return random(length);\n}\n/** Generate a PKCE code challenge from a code verifier\n * @param code_verifier\n * @returns The base64 url encoded code challenge\n */\nexport async function generateChallenge(code_verifier) {\n    const buffer = await crypto.subtle.digest(\"SHA-256\", new TextEncoder().encode(code_verifier));\n    // Generate base64url string\n    // btoa is deprecated in Node.js but is used here for web browser compatibility\n    // (which has no good replacement yet, see also https://github.com/whatwg/html/issues/6811)\n    return btoa(String.fromCharCode(...new Uint8Array(buffer)))\n        .replace(/\\//g, '_')\n        .replace(/\\+/g, '-')\n        .replace(/=/g, '');\n}\n/** Generate a PKCE challenge pair\n * @param length Length of the verifer (between 43-128). Defaults to 43.\n * @returns PKCE challenge pair\n */\nexport default async function pkceChallenge(length) {\n    if (!length)\n        length = 43;\n    if (length < 43 || length > 128) {\n        throw `Expected a length between 43 and 128. Received ${length}.`;\n    }\n    const verifier = generateVerifier(length);\n    const challenge = await generateChallenge(verifier);\n    return {\n        code_verifier: verifier,\n        code_challenge: challenge,\n    };\n}\n/** Verify that a code_verifier produces the expected code challenge\n * @param code_verifier\n * @param expectedChallenge The code challenge to verify\n * @returns True if challenges are equal. False otherwise.\n */\nexport async function verifyChallenge(code_verifier, expectedChallenge) {\n    const actualChallenge = await generateChallenge(code_verifier);\n    return actualChallenge === expectedChallenge;\n}\n"],"names":["crypto","generateChallenge","code_verifier","btoa","String","fromCharCode","Uint8Array","subtle","digest","TextEncoder","encode","replace","pkceChallenge","length","verifier","random","size","mask","result","randomUints","getRandomValues","i","randomIndex","challenge","code_challenge","verifyChallenge","expectedChallenge","actualChallenge","globalThis"],"sourceRoot":""}