{"version":3,"file":"static/chunks/67.5728c8fe6d9d14c2.js","mappings":"udAAA,OAAAA,EACAC,YAAAC,CAAA,EACA,KAAAC,SAAA,IACA,KAAAD,IAAA,CAAAA,CACA,CACAE,QAAA,EACA,2BCNA,IAAAC,EAAA,GACA,UAAAC,EAAAC,WAAA,CACA,iBAAAD,EAAAE,MAAA,EAAAF,EAAAE,MAAA,IAWAF,CAAA,IAAAA,EAAAG,SAAA,CCXA,SAAAC,EAAAJ,CAAA,CAAAK,EAAA,QACA,OACAC,MAAA,CACAC,EAAAP,CAAA,IAAwBK,EAAU,IAClCG,EAAAR,CAAA,IAAwBK,EAAU,IAElC,CACA,CACA,IAAAI,EAAA,GACA,GAAsBV,EAAgBC,IAAAU,EAAAV,EAAAI,EAAAJ,ICLhCW,EAAqB,GAAAC,IAAAA,EAC3BC,EAAA,GAAAC,EAAA,ICPA,SAAAC,EAAAC,CAAA,CAAAC,CAAA,CAAAP,CAAA,CAAAQ,EAAA,CAA6DC,QAAA,GAAe,EAE5E,OADAH,EAAAI,gBAAA,CAAAH,EAAAP,EAAAQ,GACA,IAAAF,EAAAK,mBAAA,CAAAJ,EAAAP,EACA,CCAA,SAAAY,EAAAN,CAAA,CAAAC,CAAA,CAAAP,CAAA,CAAAQ,CAAA,EACA,OAAWH,EAAWC,EAAAC,EAAoBR,EAAcC,GAAAQ,EACxD,gBCLA,IAAAK,EAAA,CAAAC,EAAAC,IAAAC,KAAAC,GAAA,CAAAH,EAAAC,iBCWA,OAAAG,EACAjC,YAAAK,CAAA,CAAA6B,CAAA,EAAmCC,mBAAAA,CAAA,CAAAC,cAAAA,CAAA,CAAAC,iBAAAA,EAAA,IAA8D,EAAI,EAgErG,GA5DA,KAAAC,UAAA,MAIA,KAAAC,aAAA,MAIA,KAAAC,iBAAA,MAIA,KAAAN,QAAA,IAIA,KAAAE,aAAA,CAAAK,OACA,KAAAC,WAAA,UDhCAb,EAAAC,ECiCA,UAAAS,aAAA,OAAAC,iBAAA,EACA,OACA,IAAAG,EAAAC,EAAA,KAAAJ,iBAAA,MAAAK,OAAA,EACAC,EAAA,YAAAR,UAAA,CAIAS,EAA4CC,CAAAA,EAAUL,EAAAM,MAAA,CDxCtDnB,ECwCsD,CAAgBlB,EAAA,EAAAC,EAAA,GDpCtEkB,KAAAmB,IAAA,CAAAC,EAFAtB,EAAAjB,CAAA,CAAAkB,EAAAlB,CAAA,GAEA,EAAAwC,EADAvB,EAAAhB,CAAA,CAAAiB,EAAAjB,CAAA,GACA,ICoCkF,GAClF,IAAAiC,GAAA,CAAAC,EACA,OACA,IAAoBpC,MAAAA,CAAA,EAAQgC,EAC5B,CAAoBU,UAAAA,CAAA,EAAcC,EAAAC,SAAS,CAC3C,KAAAV,OAAA,CAAAW,IAAA,EAAgC,GAAA7C,CAAA,CAAA0C,UAAAA,CAAA,GAChC,IAAoBI,QAAAA,CAAA,CAAAC,OAAAA,CAAA,EAAkB,KAAAxB,QAAA,CACtCY,IACAW,GAAAA,EAAA,KAAAlB,aAAA,CAAAI,GACA,KAAAL,UAAA,MAAAC,aAAA,EAEAmB,GAAAA,EAAA,KAAAnB,aAAA,CAAAI,EACA,EACA,KAAAgB,iBAAA,EAAAtD,EAAAsC,KACA,KAAAJ,aAAA,CAAAlC,EACA,KAAAmC,iBAAA,CAAAoB,EAAAjB,EAAA,KAAAR,kBAAA,EAEYmB,EAAAO,EAAK,CAAA1D,MAAA,MAAAuC,WAAA,IACjB,EACA,KAAAoB,eAAA,EAAAzD,EAAAsC,KACA,KAAAoB,GAAA,GACA,IAAoBC,MAAAA,CAAA,CAAAC,aAAAA,CAAA,CAAAC,gBAAAA,CAAA,EAAuC,KAAAhC,QAAA,CAG3D,GAFA,KAAAG,gBAAA,EACA6B,GAAAA,IACA,OAAA3B,aAAA,OAAAC,iBAAA,EACA,OACA,IAAA2B,EAAAvB,EAAAvC,kBAAAA,EAAA+D,IAAA,CACA,KAAA5B,iBAAA,CACAoB,EAAAjB,EAAA,KAAAR,kBAAA,OAAAU,OAAA,CACA,MAAAP,UAAA,EAAA0B,GACAA,EAAA3D,EAAA8D,GAEAF,GAAAA,EAAA5D,EAAA8D,EACA,EAEA,CAAa/D,EAAgBC,GAC7B,MACA,MAAAgC,gBAAA,CAAAA,EACA,KAAAH,QAAA,CAAAA,EACA,KAAAC,kBAAA,CAAAA,EACA,KAAAC,aAAA,CAAAA,GAAAK,OAEA,IAAA4B,EAAAT,EADqBnD,EAAgBJ,GACrC,KAAA8B,kBAAA,EACA,CAAgBxB,MAAAA,CAAA,EAAQ0D,EACxB,CAAgBhB,UAAAA,CAAA,EAAcC,EAAAC,SAAS,CACvC,KAAAV,OAAA,GAA0B,GAAAlC,CAAA,CAAA0C,UAAAA,CAAA,EAAqB,CAC/C,IAAgBiB,eAAAA,CAAA,EAAiBpC,CACjCoC,CAAAA,GACAA,EAAAjE,EAAAuC,EAAAyB,EAAA,KAAAxB,OAAA,GACA,KAAA0B,eAAA,CAA+B,GAAAC,EAAAC,CAAA,EAAK9C,EAAe,KAAAS,aAAA,oBAAAuB,iBAAA,EAA6DhC,EAAe,KAAAS,aAAA,kBAAA0B,eAAA,EAAyDnC,EAAe,KAAAS,aAAA,sBAAA0B,eAAA,EACvM,CACAY,eAAAxC,CAAA,EACA,KAAAA,QAAA,CAAAA,CACA,CACA6B,KAAA,CACA,KAAAQ,eAAA,OAAAA,eAAA,GACQ,GAAAjB,EAAAqB,EAAA,EAAW,KAAAjC,WAAA,CACnB,CACA,CACA,SAAAkB,EAAAjB,CAAA,CAAAR,CAAA,EACA,OAAAA,EAAA,CAAkCxB,MAAAwB,EAAAQ,EAAAhC,KAAA,GAAwCgC,CAC1E,CACA,SAAAiC,EAAA/C,CAAA,CAAAC,CAAA,EACA,OAAalB,EAAAiB,EAAAjB,CAAA,CAAAkB,EAAAlB,CAAA,CAAAC,EAAAgB,EAAAhB,CAAA,CAAAiB,EAAAjB,CAAA,CACb,CACA,SAAA+B,EAAA,CAAsBjC,MAAAA,CAAA,CAAO,CAAAkC,CAAA,EAC7B,OACAlC,MAAAA,EACAkE,MAAAD,EAAAjE,EAAAmE,EAAAjC,IACAI,OAAA2B,EAAAjE,EAKAkC,CAAA,KAJAkC,SAAAC,SASAnC,CAAA,CAAAoC,CAAA,EACA,GAAApC,EAAAqC,MAAA,GACA,OAAiBtE,EAAA,EAAAC,EAAA,GAEjB,IAAAsE,EAAAtC,EAAAqC,MAAA,GACAE,EAAA,KACAC,EAAAP,EAAAjC,GACA,KAEA,GAFA,IACAuC,EAAAvC,CAAA,CAAAsC,EAAA,EACAE,CAAAA,EAAAhC,SAAA,CAAA+B,EAAA/B,SAAA,CACYrC,EAnBZ,GAmBiC,IAGjCmE,IAEA,IAAAC,EACA,OAAiBxE,EAAA,EAAAC,EAAA,GAEjB,IAAAyE,EAAiBpE,EAAqBmE,EAAAhC,SAAA,CAAA+B,EAAA/B,SAAA,EACtC,GAAAiC,IAAAA,EACA,OAAiB1E,EAAA,EAAAC,EAAA,GAEjB,IAAA0E,EAAA,CACA3E,EAAA,CAAAyE,EAAAzE,CAAA,CAAAwE,EAAAxE,CAAA,EAAA0E,EACAzE,EAAA,CAAAwE,EAAAxE,CAAA,CAAAuE,EAAAvE,CAAA,EAAAyE,CACA,EAOA,OANAC,EAAA3E,CAAA,GAAA4E,KACAD,CAAAA,EAAA3E,CAAA,IAEA2E,EAAA1E,CAAA,GAAA2E,KACAD,CAAAA,EAAA1E,CAAA,IAEA0E,CACA,EA1CA1C,EAAA,EACA,CACA,CAIA,SAAAiC,EAAAjC,CAAA,EACA,OAAAA,CAAA,CAAAA,EAAAqC,MAAA,ICtHA,SAAAO,EAAAC,CAAA,EACA,IAAAC,EAAA,KACA,UAIA,OAAAA,IACAA,EAAAD,EAJA,KACAC,EAAA,IACA,EAOA,CACA,IAAAC,EAAAH,EAAA,kBACAI,EAAAJ,EAAA,gBACA,SAAAK,EAAAC,CAAA,EACA,IAAAJ,EAAA,GACA,GAAAI,MAAAA,EACAJ,EAAAE,SAEA,GAAAE,MAAAA,EACAJ,EAAAC,QAEA,CACA,IAAAI,EAAAJ,IACAK,EAAAJ,GACAG,CAAAA,GAAAC,EACAN,EAAA,KACAK,IACAC,GACA,GAIAD,GACAA,IACAC,GACAA,IAEA,CACA,OAAAN,CACA,CACA,SAAAO,IAGA,IAAAC,EAAAL,EAAA,UACA,CAAAK,IAEAA,IACA,GACA,sCC1CA,SAAAC,EAAAC,CAAA,EACA,OAAAA,EAAAC,GAAA,CAAAD,EAAAE,GAAA,CAKA,SAAAC,EAAA3B,CAAA,CAAA4B,CAAA,CAAApF,CAAA,CAAAqF,EAAA,IACA7B,EAAA6B,MAAA,CAAAA,EACA7B,EAAA8B,WAAA,CAAwB,GAAAC,EAAAC,CAAA,EAASJ,EAAAF,GAAA,CAAAE,EAAAH,GAAA,CAAAzB,EAAA6B,MAAA,EACjC7B,EAAAiC,KAAA,CAAAV,EAAA/E,GAAA+E,EAAAK,GACA5B,EAAAkC,SAAA,CACQ,GAAAH,EAAAC,CAAA,EAASxF,EAAAkF,GAAA,CAAAlF,EAAAiF,GAAA,CAAAzB,EAAA6B,MAAA,EAAA7B,EAAA8B,WAAA,CACjB,GAAAG,KAAA,EAjBA,OAiBAjC,EAAAiC,KAAA,EAhBA,QAiBAE,MAAAnC,EAAAiC,KAAA,IACAjC,CAAAA,EAAAiC,KAAA,IAEA,GAAAC,SAAA,EAlBA,MAmBAlC,EAAAkC,SAAA,EAlBA,KAmBAC,MAAAnC,EAAAkC,SAAA,IACAlC,CAAAA,EAAAkC,SAAA,GAEA,CACA,SAAAE,EAAApC,CAAA,CAAA4B,CAAA,CAAApF,CAAA,CAAAqF,CAAA,EACAF,EAAA3B,EAAAjE,CAAA,CAAA6F,EAAA7F,CAAA,CAAAS,EAAAT,CAAA,CAAA8F,EAAAA,EAAAQ,OAAA,CAAAC,KAAAA,GACAX,EAAA3B,EAAAhE,CAAA,CAAA4F,EAAA5F,CAAA,CAAAQ,EAAAR,CAAA,CAAA6F,EAAAA,EAAAU,OAAA,CAAAD,KAAAA,EACA,CACA,SAAAE,EAAAhG,CAAA,CAAAiG,CAAA,CAAAC,CAAA,EACAlG,EAAAkF,GAAA,CAAAgB,EAAAhB,GAAA,CAAAe,EAAAf,GAAA,CACAlF,EAAAiF,GAAA,CAAAjF,EAAAkF,GAAA,CAAAH,EAAAkB,EACA,CAKA,SAAAE,EAAAnG,CAAA,CAAAoG,CAAA,CAAAF,CAAA,EACAlG,EAAAkF,GAAA,CAAAkB,EAAAlB,GAAA,CAAAgB,EAAAhB,GAAA,CACAlF,EAAAiF,GAAA,CAAAjF,EAAAkF,GAAA,CAAAH,EAAAqB,EACA,CACA,SAAAC,EAAArG,CAAA,CAAAoG,CAAA,CAAAF,CAAA,EACAC,EAAAnG,EAAAT,CAAA,CAAA6G,EAAA7G,CAAA,CAAA2G,EAAA3G,CAAA,EACA4G,EAAAnG,EAAAR,CAAA,CAAA4G,EAAA5G,CAAA,CAAA0G,EAAA1G,CAAA,CACA,gBCnBA,SAAA8G,EAAAtB,CAAA,CAAAE,CAAA,CAAAD,CAAA,EACA,OACAC,IAAAA,KAAAY,IAAAZ,EAAAF,EAAAE,GAAA,CAAAA,EAAAY,KAAAA,EACAb,IAAAA,KAAAa,IAAAb,EACAD,EAAAC,GAAA,CAAAA,EAAAD,CAAAA,EAAAC,GAAA,CAAAD,EAAAE,GAAA,EACAY,KAAAA,CACA,CACA,CAcA,SAAAS,EAAAC,CAAA,CAAAC,CAAA,EACA,IAAAvB,EAAAuB,EAAAvB,GAAA,CAAAsB,EAAAtB,GAAA,CACAD,EAAAwB,EAAAxB,GAAA,CAAAuB,EAAAvB,GAAA,CAOA,OAJAwB,EAAAxB,GAAA,CAAAwB,EAAAvB,GAAA,CACAsB,EAAAvB,GAAA,CAAAuB,EAAAtB,GAAA,EACA,EAAAA,EAAAD,EAAA,EAAAA,EAAAC,EAAA,EAEA,CAAaA,IAAAA,EAAAD,IAAAA,CAAA,CACb,CAuDA,SAAAyB,EAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,OACA3B,IAAA4B,EAAAH,EAAAC,GACA3B,IAAA6B,EAAAH,EAAAE,EACA,CACA,CACA,SAAAC,EAAAH,CAAA,CAAAI,CAAA,EACA,uBAAAJ,EACAA,EACAA,CAAA,CAAAI,EAAA,GACA,CC9HA,IAAAC,EAAA,MACAtB,UAAA,EACAD,MAAA,EACAJ,OAAA,EACAC,YAAA,CACA,GACA2B,EAAA,MACA1H,EAAAyH,IACAxH,EAAAwH,GACA,GACAE,EAAA,MAA4BhC,IAAA,EAAAD,IAAA,IAC5BkC,EAAA,MACA5H,EAAA2H,IACA1H,EAAA0H,GACA,GCdA,SAAAE,EAAAC,CAAA,EACA,OAAAA,EAAA,KAAAA,EAAA,MCIA,SAAAC,EAAA,CAAmCC,IAAAA,CAAA,CAAAC,KAAAA,CAAA,CAAAC,MAAAA,CAAA,CAAAC,OAAAA,CAAA,CAA2B,EAC9D,OACAnI,EAAA,CAAa2F,IAAAsC,EAAAvC,IAAAwC,CAAA,EACbjI,EAAA,CAAa0F,IAAAqC,EAAAtC,IAAAyC,CAAA,CACb,CACA,CCVA,SAAAC,EAAAlC,CAAA,EACA,OAAAA,KAAAK,IAAAL,GAAAA,IAAAA,CACA,CACA,SAAAmC,EAAA,CAAoBnC,MAAAA,CAAA,CAAAoC,OAAAA,CAAA,CAAAC,OAAAA,CAAA,CAAuB,EAC3C,OAAAH,EAAAlC,IACA,CAAAkC,EAAAE,IACA,CAAAF,EAAAG,EACA,CACA,SAAAC,EAAAC,CAAA,EACA,OAAAJ,EAAAI,IACAC,EAAAD,IACAA,EAAA5E,CAAA,EACA4E,EAAAE,MAAA,EACAF,EAAAG,OAAA,EACAH,EAAAI,OAAA,EACAJ,EAAAK,KAAA,EACAL,EAAAM,KAAA,CAEA,SAAAL,EAAAD,CAAA,MAGAO,EAAAA,EAFA,MAAAC,CAEAD,EAFAP,EAAAzI,CAAA,GAGAgJ,OAAAA,GAAAA,CADAA,EAFAP,EAAAxI,CAAA,GAGA+I,OAAAA,CAFA,CCNA,SAAAE,EAAAnJ,CAAA,CAAAoG,CAAA,CAAAD,CAAA,CAAAH,CAAA,CAAAoD,CAAA,EAIA,OAHA5C,KAAAA,IAAA4C,GACApJ,CAAAA,EAPAgG,EADAG,EADAnG,CAAAA,EASAgG,CATA,CASA,EAEAA,EAVAG,EADAnG,CAAAA,EAWAgG,CAXA,EAWAI,CACA,CAIA,SAAAiD,EAAA3D,CAAA,CAAAU,EAAA,EAAAD,EAAA,EAAAH,CAAA,CAAAoD,CAAA,EACA1D,EAAAE,GAAA,CAAAuD,EAAAzD,EAAAE,GAAA,CAAAQ,EAAAD,EAAAH,EAAAoD,GACA1D,EAAAC,GAAA,CAAAwD,EAAAzD,EAAAC,GAAA,CAAAS,EAAAD,EAAAH,EAAAoD,EACA,CAIA,SAAAE,EAAAC,CAAA,EAA8BtJ,EAAAA,CAAA,CAAAC,EAAAA,CAAA,CAAM,EACpCmJ,EAAAE,EAAAtJ,CAAA,CAAAA,EAAAmG,SAAA,CAAAnG,EAAAkG,KAAA,CAAAlG,EAAA+F,WAAA,EACAqD,EAAAE,EAAArJ,CAAA,CAAAA,EAAAkG,SAAA,CAAAlG,EAAAiG,KAAA,CAAAjG,EAAA8F,WAAA,CACA,CA+DA,SAAAwD,EAAA9D,CAAA,CAAAzE,CAAA,EACAyE,EAAAE,GAAA,CAAAF,EAAAE,GAAA,CAAA3E,EACAyE,EAAAC,GAAA,CAAAD,EAAAC,GAAA,CAAA1E,CACA,CAMA,SAAAwI,GAAA/D,CAAA,CAAAgE,CAAA,CAAAC,CAAA,CAAAP,CAAA,CAAAQ,EAAA,IACA,IAAA5D,EAAwB,GAAAC,EAAAC,CAAA,EAASR,EAAAE,GAAA,CAAAF,EAAAC,GAAA,CAAAiE,GAEjCP,EAAA3D,EAAAgE,EAAAC,EAAA3D,EAAAoD,EACA,CAIA,SAAAS,GAAAN,CAAA,CAAAO,CAAA,EACAL,GAAAF,EAAAtJ,CAAA,CAAA6J,EAAA7J,CAAA,CAAA6J,EAAAvB,MAAA,CAAAuB,EAAA3D,KAAA,CAAA2D,EAAAvD,OAAA,EACAkD,GAAAF,EAAArJ,CAAA,CAAA4J,EAAA5J,CAAA,CAAA4J,EAAAtB,MAAA,CAAAsB,EAAA3D,KAAA,CAAA2D,EAAArD,OAAA,CACA,CCjHA,SAAAsD,GAAAC,CAAA,CAAA/G,CAAA,EACA,OAAW+E,EAAwBiC,SHenCjK,CAAA,CAAAiD,CAAA,EACA,IAAAA,EACA,OAAAjD,EACA,IAAAkK,EAAAjH,EAAA,CAAqChD,EAAAD,EAAAkI,IAAA,CAAAhI,EAAAF,EAAAiI,GAAA,GACrCkC,EAAAlH,EAAA,CAAyChD,EAAAD,EAAAmI,KAAA,CAAAjI,EAAAF,EAAAoI,MAAA,GACzC,OACAH,IAAAiC,EAAAhK,CAAA,CACAgI,KAAAgC,EAAAjK,CAAA,CACAmI,OAAA+B,EAAAjK,CAAA,CACAiI,MAAAgC,EAAAlK,CAAA,CAEA,EG1BqD+J,EAAAI,qBAAA,GAAAnH,GACrD,6BCHA,IAAAoH,GAAA,CACA5G,KAAA,SACA6G,UAAA,IACAC,QAAA,GACAC,UAAA,EACA,EACAC,GAAA,KACAhH,KAAA,SACA6G,UAAA,IACAC,QAAA7J,IAAAA,EAAA,EAAAU,KAAAmB,IAAA,SACAiI,UAAA,EACA,GACAE,GAAA,CACAjH,KAAA,YACAkH,SAAA,EACA,EAKAC,GAAA,CACAnH,KAAA,YACAmH,KAAA,eACAD,SAAA,EACA,EACAE,GAAA,CAAAC,EAAA,CAA0CC,UAAAA,CAAA,CAAW,GACrD,EAAAxG,MAAA,GACAmG,GAEaZ,GAAAkB,CAAc,CAAAC,GAAA,CAAAH,GAC3BA,EAAAI,UAAA,UACAT,GAAAM,CAAA,KACAV,GAEAO,GCpCA,SAAAO,GAAAC,CAAA,CAAAC,CAAA,EACA,OAAAD,CAAA,CAAAC,EAAA,EACAD,EAAA,SACAA,CACA,iBCJA,IAAAE,GAAA,CACAC,QAAA,EACA,ECFAC,GAAA,GAAAvC,OAAAA,EACA,SAAAwC,GAAAV,CAAA,EAAuCW,OAAAA,CAAA,CAAAC,WAAAA,EAAA,OAA6B,CAAAC,CAAA,EACpE,IAAAC,EAAAd,EAAAe,MAAA,CAAAN,IACAO,EAAAL,GAAAC,SAAAA,GAAAD,EAAA,KACA,EACAG,EAAAtH,MAAA,GACA,UAAAqH,KAAApF,IAAAoF,EAEAA,EADAC,CAAA,CAAAE,EAAA,CCaA,IAAAC,GAAA,CAAA9F,EAAA+F,EAAAC,IAAA,OAAAA,EAAA,EAAAD,CAAA,EAAA/F,EAAA,GAAAgG,EAAA,EAAAD,CAAA,GAAA/F,EAAA,EAAA+F,CAAA,EACA/F,EAoBA,SAAAiG,GAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EAEA,GAAAH,IAAAC,GAAAC,IAAAC,EACA,OAAeC,EAAAC,CAAI,CACnB,IAAAC,EAAA,GAAAC,CArBA,SAAA1M,CAAA,CAAA2M,CAAA,CAAAC,CAAA,CAAAT,CAAA,CAAAE,CAAA,MACAQ,EACAC,EACA,IAAAvI,EAAA,EACA,EAGAsI,CADAA,EAAAd,GADAe,EAAAH,EAAA,CAAAC,EAAAD,CAAA,IACAR,EAAAE,GAAArM,CAAAA,EACA,EACA4M,EAAAE,EAGAH,EAAAG,QAEM3L,KAAAC,GAAA,CAAAyL,GAfN,MAgBA,EAAAtI,EAfA,GAeA,CACA,OAAAuI,CACA,GAKAC,EAAA,IAAAZ,EAAAE,GAEA,UAAApG,IAAAA,GAAAA,IAAAA,EAAAA,EAAA8F,GAAAU,EAAAxG,GAAAmG,EAAAE,EACA,CC9CA,IAAAU,GAAA,MAAAC,GAAA,GAAAC,EAAA,EAAAD,GAAA,KAAAC,EAAA,KAAAD,CAAAA,EAAA,ICAAE,GAAA,QAAAD,EAAA,EAAAD,GCEAG,GAA8BlB,GAAW,kBACzCmB,GAA6BF,GAAaC,IAC1CE,GAAgCN,GAAYK,ICJ5CE,GAAA,IAAAN,GAAA,QAA+CI,GAAMJ,GAAA,MAAA9L,KAAAqM,GAAA,OAAAP,CAAAA,EAAA,KCCrDQ,GAAA,KAAAtM,KAAAuM,GAAA,CAAAvM,KAAAwM,IAAA,CAAAV,IACAW,GAAgBT,GAAaM,IAC7BI,GAAkBb,GAAYS,ICF9BK,GAAA,iBAAAC,IAAA,CAAAC,GEAAC,GAAA,kCAAAF,IAAA,CAAAC,mBCUA,IAAAE,GAEA,2ECXA,IAAAC,GAAA,IAAAC,IAAA,CACA,QACA,SACA,MACA,OACA,QACA,SACA,IACA,IACA,aACA,aACA,EACAC,GAAA,GAAAL,IAAmCM,GAAAC,EAAM,EAAAP,IAAUQ,GAAAC,EAAE,CACrDC,GAAA,CAAAC,EAAAC,IAAAC,WAAAF,EAAAG,KAAA,OAAAF,EAAA,EACAG,GAAA,CAAAC,EAAAC,IAAA,CAAAC,EAAA,CAAyDrF,UAAAA,CAAA,CAAW,IACpE,GAAAA,SAAAA,GAAA,CAAAA,EACA,SACA,IAAAsF,EAAAtF,EAAAuF,KAAA,wBACA,GAAAD,EACA,OAAAT,GAAAS,CAAA,IAAAF,EAEA,EACA,IAAAN,EAAA9E,EAAAuF,KAAA,6BACA,EACAV,GAAAC,CAAA,IAAAK,GAGA,CAEA,CACA,EACAK,GAAA,IAAAjB,IAAA,eACAkB,GAAsCzF,GAAA0F,CAAkB,CAAA1D,MAAA,KAAAwD,GAAArE,GAAA,CAAAI,IAYxDoE,GAAA,CAEAC,MAAA,EAAczP,EAAAA,CAAA,CAAG,EAAI0P,YAAAA,EAAA,IAAAC,aAAAA,EAAA,IAAuC,GAAA3P,EAAA0F,GAAA,CAAA1F,EAAA2F,GAAA,CAAAkJ,WAAAa,GAAAb,WAAAc,GAC5DC,OAAA,EAAe3P,EAAAA,CAAA,CAAG,EAAI4P,WAAAA,EAAA,IAAAC,cAAAA,EAAA,IAAuC,GAAA7P,EAAAyF,GAAA,CAAAzF,EAAA0F,GAAA,CAAAkJ,WAAAgB,GAAAhB,WAAAiB,GAC7D9H,IAAA,CAAAkH,EAAA,CAAmBlH,IAAAA,CAAA,CAAK,GAAA6G,WAAA7G,GACxBC,KAAA,CAAAiH,EAAA,CAAoBjH,KAAAA,CAAA,CAAM,GAAA4G,WAAA5G,GAC1BE,OAAA,EAAelI,EAAAA,CAAA,CAAG,EAAI+H,IAAAA,CAAA,CAAK,GAAA6G,WAAA7G,GAAA/H,CAAAA,EAAAyF,GAAA,CAAAzF,EAAA0F,GAAA,EAC3BuC,MAAA,EAAclI,EAAAA,CAAA,CAAG,EAAIiI,KAAAA,CAAA,CAAM,GAAA4G,WAAA5G,GAAAjI,CAAAA,EAAA0F,GAAA,CAAA1F,EAAA2F,GAAA,EAE3B3F,EAAA+O,GAAA,MACA9O,EAAA8O,GAAA,KACA,CAEAS,CAAAA,GAAAO,UAAA,CAAAP,GAAAxP,CAAA,CACAwP,GAAAQ,UAAA,CAAAR,GAAAvP,CAAA,CC3DA,IAAAgQ,GAAA,MAAAzM,EAAAuK,IAAA,CAAAC,GEKAkC,GAAA,CAA6B5B,GAAAC,EAAM,CAAEC,GAAAC,EAAE,CAAED,GAAA2B,EAAO,CAAE3B,GAAA4B,EAAO,CAAE5B,GAAA6B,EAAE,CAAE7B,GAAA8B,EAAE,CDLjE,CACAvC,KAAA,GAAAC,SAAAA,EACAuC,MAAA,GAAAvC,CACA,ECEuE,CAIvEwC,GAAA,GAAAN,GAAAO,IAAA,CAA+DR,GAAajC,ICT5E0C,GAAA,IAAAtC,IACAuC,GAAA,GACAC,GAAA,GACA,SAAAC,KACA,GAAAD,GAAA,CACA,IAAAE,EAAAC,MAAAC,IAAA,CAAAN,IAAA7E,MAAA,IAAAoF,EAAAC,gBAAA,EACAC,EAAA,IAAA/C,IAAA0C,EAAAM,GAAA,IAAAH,EAAAI,OAAA,GACAC,EAAA,IAAAC,IAKAJ,EAAAK,OAAA,KACA,IAAAC,EAAsCC,SJqBtCC,CAAA,EACA,IAAAF,EAAA,GAQA,OAPAnC,GAAAkC,OAAA,KACA,IAAAxI,EAAA2I,EAAAC,QAAA,CAAAxG,EACA7E,MAAAA,IAAAyC,IACAyI,EAAA7O,IAAA,EAAAwI,EAAApC,EAAA6I,GAAA,KACA7I,EAAA8I,GAAA,CAAA1G,EAAAH,UAAA,eAEA,GACAwG,CACA,EI/BqEJ,EACrEI,CAAAA,EAAAnN,MAAA,GAEAgN,EAAAQ,GAAA,CAAAT,EAAAI,GACAJ,EAAAU,MAAA,GACA,GAEAjB,EAAAU,OAAA,IAAAP,EAAAe,mBAAA,IAEAb,EAAAK,OAAA,KACAH,EAAAU,MAAA,GACA,IAAAE,EAAAX,EAAAO,GAAA,CAAAR,GACAY,GACAA,EAAAT,OAAA,GAAApG,EAAApC,EAAA,IACA,IAAAkJ,CACA,QAAAA,CAAAA,EAAAb,EAAAO,QAAA,CAAAxG,EAAA,GAAA8G,KAAA,IAAAA,GAAAA,EAAAJ,GAAA,CAAA9I,EACA,EAEA,GAEA8H,EAAAU,OAAA,IAAAP,EAAAkB,eAAA,IAEArB,EAAAU,OAAA,KACAjL,KAAAA,IAAA0K,EAAAmB,gBAAA,EACAvQ,OAAAwQ,QAAA,GAAApB,EAAAmB,gBAAA,CAEA,EACA,CACAxB,GAAA,GACAD,GAAA,GACAD,GAAAc,OAAA,IAAAP,EAAAqB,QAAA,IACA5B,GAAA6B,KAAA,EACA,CACA,SAAAC,KACA9B,GAAAc,OAAA,KACAP,EAAAwB,aAAA,GACAxB,EAAAC,gBAAA,EACAN,CAAAA,GAAA,GAEA,EACA,CAKA,MAAA8B,GACAtT,YAAAuT,CAAA,CAAAC,CAAA,CAAA9N,CAAA,CAAA+N,CAAA,CAAAxB,CAAA,CAAAyB,EAAA,IAKA,KAAAC,UAAA,IAMA,KAAAD,OAAA,IAKA,KAAA5B,gBAAA,IAKA,KAAAP,WAAA,IACA,KAAAgC,mBAAA,KAAAA,EAAA,CACA,KAAAC,UAAA,CAAAA,EACA,KAAA9N,IAAA,CAAAA,EACA,KAAA+N,WAAA,CAAAA,EACA,KAAAxB,OAAA,CAAAA,EACA,KAAAyB,OAAA,CAAAA,CACA,CACAE,iBAAA,CACA,KAAArC,WAAA,IACA,KAAAmC,OAAA,EACApC,GAAAuC,GAAA,OACAtC,KACAA,GAAA,GACgBjO,EAAAO,EAAK,CAAAiQ,IAAA,CAAAV,IACL9P,EAAAO,EAAK,CAAAkQ,gBAAA,CAAAtC,OAIrB,KAAA4B,aAAA,GACA,KAAAH,QAAA,GAEA,CACAG,eAAA,CACA,IAAgBE,oBAAAA,CAAA,CAAA7N,KAAAA,CAAA,CAAAuM,QAAAA,CAAA,CAAAwB,YAAAA,CAAA,EAAkD,KAKlE,QAAAtO,EAAA,EAAwBA,EAAAoO,EAAArO,MAAA,CAAgCC,IACxD,GAAAoO,OAAAA,CAAA,CAAApO,EAAA,EAIA,GAAAA,IAAAA,EAAA,CACA,IAAA6O,EAAAP,MAAAA,EAAA,OAAAA,EAAAhB,GAAA,GACAlG,EAAAgH,CAAA,CAAAA,EAAArO,MAAA,IACA,GAAA8O,KAAA7M,IAAA6M,EACAT,CAAA,IAAAS,OAEA,GAAA/B,GAAAvM,EAAA,CACA,IAAAuO,EAAAhC,EAAAiC,SAAA,CAAAxO,EAAA6G,SACA0H,GACAV,CAAAA,CAAA,IAAAU,CAAA,CAEA,CACA9M,KAAAA,IAAAoM,CAAA,KACAA,CAAAA,CAAA,IAAAhH,CAAA,EAEAkH,GAAAO,KAAA7M,IAAA6M,GACAP,EAAAf,GAAA,CAAAa,CAAA,IAEA,MAEAA,CAAA,CAAApO,EAAA,CAAAoO,CAAA,CAAApO,EAAA,GAIA,CACAgP,kBAAA,EACAvB,qBAAA,EACAwB,iBAAA,EACArB,iBAAA,EACAG,UAAA,CACA,KAAAS,UAAA,IACA,KAAAH,UAAA,MAAAD,mBAAA,MAAAhH,aAAA,EACA+E,GAAA+C,MAAA,MACA,CACAC,QAAA,CACA,KAAAX,UAAA,GACA,KAAApC,WAAA,IACAD,GAAA+C,MAAA,OAEA,CACAE,QAAA,CACA,KAAAZ,UAAA,EACA,KAAAC,eAAA,EACA,CACA,6BC3JA,IAAAY,GAAA,IAAAxF,IAAA,gDACA,SAAAyF,GAAA7F,CAAA,EACA,IAAAlJ,EAAAkE,EAAA,CAAAgF,EAAA8F,KAAA,OAAAhF,KAAA,MACA,GAAAhK,gBAAAA,EACA,OAAAkJ,EACA,IAAAhI,EAAA,CAAAgD,EAAAoG,KAAA,CAAiC2E,GAAAC,CAAU,MAC3C,IAAAhO,EACA,OAAAgI,EACA,IAAAiG,EAAAjL,EAAAkL,OAAA,CAAAlO,EAAA,IACAmO,EAAAP,GAAA5I,GAAA,CAAAlG,GAAA,IAGA,OAFAkB,IAAAgD,GACAmL,CAAAA,GAAA,KACArP,EAAA,IAAAqP,EAAAF,EAAA,GACA,CACA,IAAAG,GAAA,uBACAvI,GAAA,CACA,GAAOwI,GAAAC,CAAO,CACdC,kBAAA,IACA,IAAAC,EAAAxG,EAAAoB,KAAA,CAAAgF,IACA,OAAAI,EAAAA,EAAApD,GAAA,CAAAyC,IAAAY,IAAA,MAAAzG,CACA,CACA,kBCpBA,IAAA0G,GAAA,CACA,GAAOC,SAAAC,CAAgB,CAEvBC,MAASA,GAAAC,CAAA,CACTC,gBAAqBF,GAAAC,CAAK,CAC1BE,aAAkBH,GAAAC,CAAK,CACvBG,KAAUJ,GAAAC,CAAK,CACfI,OAAYL,GAAAC,CAAK,CAEjBK,YAAiBN,GAAAC,CAAK,CACtBM,eAAoBP,GAAAC,CAAK,CACzBO,iBAAsBR,GAAAC,CAAK,CAC3BQ,kBAAuBT,GAAAC,CAAK,CAC5BS,gBAAqBV,GAAAC,CAAK,CAC1BjJ,OAAUA,GACV2J,aAAkB3J,EAClB,EAIA4J,GAAA,GAAAf,EAAA,CAAAtJ,EAAA,CCvBA,SAAAmJ,GAAAnJ,CAAA,CAAApC,CAAA,EACA,IAAA0M,EAA2BD,GAAmBrK,GAI9C,OAHAsK,IAA6B7J,IAC7B6J,CAAAA,EAA2BrB,GAAAC,CAAO,EAElCoB,EAAAnB,iBAAA,CACAmB,EAAAnB,iBAAA,CAAAvL,GACAzC,KAAAA,CACA,CCHA,IAAAoP,GAAA,IAAAvH,IAAA,oBCDA,OAAAwH,WAAmClD,GACnCtT,YAAAuT,CAAA,CAAAC,CAAA,CAAA9N,CAAA,CAAA+N,CAAA,CAAAxB,CAAA,EACA,MAAAsB,EAAAC,EAAA9N,EAAA+N,EAAAxB,EAAA,GACA,CACAoB,eAAA,CACA,IAAgBE,oBAAAA,CAAA,CAAAtB,QAAAA,CAAA,CAAAvM,KAAAA,CAAA,EAAqC,KACrD,IAAAuM,GAAA,CAAAA,EAAA/F,OAAA,CACA,OACA,MAAAmH,gBAIA,QAAAlO,EAAA,EAAwBA,EAAAoO,EAAArO,MAAA,CAAgCC,IAAA,CACxD,IAAAsR,EAAAlD,CAAA,CAAApO,EAAA,CACA,oBAAAsR,IACAA,EAAAA,EAAAC,IAAA,GACoB,GAAAC,GAAA9P,CAAA,EAAkB4P,IAAA,CACtC,IAAAG,EAAqCC,SVDrCA,EAAA3K,CAAA,CAAA+F,CAAA,CAAA6E,EAAA,GACI,GAAAC,EAAAC,CAAA,EAASF,GAFb,EAEa,yDAA6E5K,EAAQ,uDAClG,IAAA+K,EAAAC,EAAA,CAAAC,SAVAjL,CAAA,EACA,IAAA8D,EAAAlB,GAAAsI,IAAA,CAAAlL,GACA,IAAA8D,EACA,UACA,KAAAqH,EAAAC,EAAAJ,EAAA,CAAAlH,EACA,YAAiBqH,MAAAA,EAAAA,EAAAC,EAAuD,EAAAJ,EAAA,EAKxEhL,GAEA,IAAA+K,EACA,OAEA,IAAAL,EAAAnU,OAAA8U,gBAAA,CAAAtF,GAAAuF,gBAAA,CAAAP,GACA,GAAAL,EAAA,CACA,IAAAa,EAAAb,EAAAF,IAAA,GACA,OAAe7H,GAAiB4I,GAAAhI,WAAAgI,GAAAA,CAChC,CACA,MAAW,GAAAd,GAAA9P,CAAA,EAAkBqQ,GAC7BL,EAAAK,EAAAjF,EAAA6E,EAAA,GACAI,CACA,EUdqDT,EAAAxE,EAAA/F,OAAA,CACrD/E,MAAAA,IAAAyP,GACArD,CAAAA,CAAA,CAAApO,EAAA,CAAAyR,CAAA,EAEAzR,IAAAoO,EAAArO,MAAA,IACA,MAAAqH,aAAA,CAAAkK,CAAA,CAEA,CAEA,CAaA,GAPA,KAAAiB,oBAAA,GAOA,CAAa3I,GAAcnD,GAAA,CAAAlG,IAAA6N,IAAAA,EAAArO,MAAA,CAC3B,OAEA,IAAAwB,EAAArF,EAAA,CAAAkS,EACAoE,EAA2BvG,GAAsB1K,GACjDkR,EAA2BxG,GAAsB/P,GAIjD,GAAAsW,IAAAC,GAMA,GAAY3I,GAAa0I,IAAgB1I,GAAa2I,GACtD,QAAAzS,EAAA,EAA4BA,EAAAoO,EAAArO,MAAA,CAAgCC,IAAA,CAC5D,IAAAyE,EAAA2J,CAAA,CAAApO,EAAA,CACA,iBAAAyE,GACA2J,CAAAA,CAAA,CAAApO,EAAA,CAAAsK,WAAA7F,EAAA,CAEA,MAMA,KAAAkI,gBAAA,IAEA,CACA4F,sBAAA,CACA,IAAgBnE,oBAAAA,CAAA,CAAA7N,KAAAA,CAAA,EAA4B,KAC5CmS,EAAA,GACA,QAAA1S,EAAA,EAAwBA,EAAAoO,EAAArO,MAAA,CAAgCC,IAAA,KZ9ExDyE,EACA,kBADAA,EY+EsB2J,CAAA,CAAApO,EAAA,EZ7EtByE,IAAAA,EAEA,OAAAA,GACAA,SAAAA,GAAAA,MAAAA,GAAoD8E,GAAiB9E,EAIrE,GYuEAiO,EAAArU,IAAA,CAAA2B,EAEA,CACA0S,EAAA3S,MAAA,EACY4S,SD5EZvE,CAAA,CAAAsE,CAAA,CAAAnS,CAAA,EACA,IACAqS,EADA5S,EAAA,EAEA,KAAAA,EAAAoO,EAAArO,MAAA,GAAA6S,GAAA,CACA,IAAAtB,EAAAlD,CAAA,CAAApO,EAAA,CACA,iBAAAsR,GACA,CAAAF,GAAA3K,GAAA,CAAA6K,IACY,GAAAxB,GAAA+C,CAAA,EAAmBvB,GAAApN,MAAA,CAAAnE,MAAA,EAC/B6S,CAAAA,EAAAxE,CAAA,CAAApO,EAAA,EAEAA,GACA,CACA,GAAA4S,GAAArS,EACA,QAAAuS,KAAAJ,EACAtE,CAAA,CAAA0E,EAAA,CAA6C9C,GAAiBzP,EAAAqS,EAG9D,EC2DuCxE,EAAAsE,EAAAnS,EAEvC,CACAkN,qBAAA,CACA,IAAgBX,QAAAA,CAAA,CAAAsB,oBAAAA,CAAA,CAAA7N,KAAAA,CAAA,EAAqC,KACrD,IAAAuM,GAAA,CAAAA,EAAA/F,OAAA,CACA,MACA,YAAAxG,GACA,MAAAsN,gBAAA,CAAAvQ,OAAAyV,WAAA,EAEA,KAAAC,cAAA,CAA8B/H,EAAgB,CAAA1K,EAAA,CAAAuM,EAAAvH,kBAAA,GAAAjI,OAAA8U,gBAAA,CAAAtF,EAAA/F,OAAA,GAC9CqH,CAAA,SAAA4E,cAAA,CAEA,IAAAC,EAAA7E,CAAA,CAAAA,EAAArO,MAAA,SACAiC,IAAAiR,GACAnG,EAAAO,QAAA,CAAA9M,EAAA0S,GAAAC,IAAA,CAAAD,EAAA,GAEA,CACArF,iBAAA,CACA,IAAAD,EACA,IAAgBb,QAAAA,CAAA,CAAAvM,KAAAA,CAAA,CAAA6N,oBAAAA,CAAA,EAAqC,KACrD,IAAAtB,GAAA,CAAAA,EAAA/F,OAAA,CACA,OACA,IAAAtC,EAAAqI,EAAAO,QAAA,CAAA9M,EACAkE,CAAAA,GAAAA,EAAAyO,IAAA,MAAAF,cAAA,KACA,IAAAG,EAAA/E,EAAArO,MAAA,GACAqH,EAAAgH,CAAA,CAAA+E,EAAA,CACA/E,CAAA,CAAA+E,EAAA,CAAkDlI,EAAgB,CAAA1K,EAAA,CAAAuM,EAAAvH,kBAAA,GAAAjI,OAAA8U,gBAAA,CAAAtF,EAAA/F,OAAA,GAClE,OAAAK,GAAA,KAAApF,IAAA,KAAAoF,aAAA,EACA,MAAAA,aAAA,CAAAA,CAAA,EAGA,QAAAuG,CAAAA,EAAA,KAAAT,iBAAA,GAAAS,KAAA,IAAAA,EAAA,OAAAA,EAAA5N,MAAA,GACA,KAAAmN,iBAAA,CAAAD,OAAA,GAAAmG,EAAAC,EAAA,IACAvG,EACAO,QAAA,CAAA+F,GACA7F,GAAA,CAAA8F,EACA,GAEA,KAAAd,oBAAA,EACA,CACA,CC/HA,SAAAe,GAAArU,CAAA,EACA,yBAAAA,CACA,iBCSA,IAAAsU,GAAA,CAAA9O,EAAAlE,IAEA,WAAAA,MAKA,iBAAAkE,GAAA+H,MAAAgH,OAAA,CAAA/O,IAEA,iBAAAA,GACSqL,CAAAA,GAAAC,CAAO,CAAAvG,IAAA,CAAA/E,IAAAA,MAAAA,CAAA,GAChB,CAAAA,EAAAiC,UAAA,SEPA,OAAA+M,GACA5Y,YAAA,CAAkB6Y,SAAAA,EAAA,GAAAC,MAAAA,EAAA,EAAA1U,KAAAA,EAAA,YAAAiI,OAAAA,EAAA,EAAA0M,YAAAA,EAAA,EAAAzM,WAAAA,EAAA,UAAA/K,EAA8G,EAEhI,KAAAyX,SAAA,IACA,KAAAC,mBAAA,IACA,KAAAC,SAAA,CAAyBC,GAAAC,CAAI,CAAAC,GAAA,GAC7B,KAAA9X,OAAA,EACAsX,SAAAA,EACAC,MAAAA,EACA1U,KAAAA,EACAiI,OAAAA,EACA0M,YAAAA,EACAzM,WAAAA,EACA,GAAA/K,CAAA,EAEA,KAAA+X,qBAAA,EACA,CAWAC,eAAA,QACA,KAAAC,UAAA,EAEA,KAAAA,UAAA,MAAAN,SAAA,CA/BA,GAgCA,KAAAM,UAAA,CACA,KAAAN,SAAA,CAOA,IAAAtC,UAAA,CAIA,OAHA,KAAA6C,SAAA,OAAAR,mBAAA,GTGA7F,KACA3B,MSDA,KAAAgI,SAAA,CAOAC,oBAAAhO,CAAA,CAAAa,CAAA,EACA,KAAAiN,UAAA,CAA0BL,GAAAC,CAAI,CAAAC,GAAA,GAC9B,KAAAJ,mBAAA,IACA,IAAgBvT,KAAAA,CAAA,CAAAtB,KAAAA,CAAA,CAAAW,SAAAA,CAAA,CAAA+T,MAAAA,CAAA,CAAAtF,WAAAA,CAAA,CAAAmG,SAAAA,CAAA,CAAAlB,YAAAA,CAAA,EAAkE,KAAAlX,OAAA,CAKlF,IAAAkX,GAAA,CAA6BmB,SD5D7BlO,CAAA,CAAAhG,CAAA,CAAAtB,CAAA,CAAAW,CAAA,EAMA,IAAA8U,EAAAnO,CAAA,IACA,GAAAmO,OAAAA,EACA,SAMA,GAAAnU,YAAAA,GAAAA,eAAAA,EACA,SACA,IAAAoU,EAAApO,CAAA,CAAAA,EAAAxG,MAAA,IACA6U,EAA+BrB,GAAYmB,EAAAnU,GAC3CsU,EAA+BtB,GAAYoB,EAAApU,SAG3C,CAFI,EAAAqR,EAAAnC,CAAA,EAAOmF,IAAAC,EAAA,6BAAyEtU,EAAA,OAAM,EAAQmU,EAAe,QAAQC,EAAe,KAAKD,EAAA,2DAAgB,EAA4DA,EAAA,0BAAgB,EAA2BC,EAAA,4BAAgB,KAEpRC,KAAAC,GAGAC,CAAAA,SAjCAvO,CAAA,EACA,IAAAQ,EAAAR,CAAA,IACA,GAAAA,IAAAA,EAAAxG,MAAA,CACA,SACA,QAAAC,EAAA,EAAoBA,EAAAuG,EAAAxG,MAAA,CAAsBC,IAC1C,GAAAuG,CAAA,CAAAvG,EAAA,GAAA+G,EACA,QAEA,EAyBAR,IACA,CAAAtH,WAAAA,GAA+BqU,GAAWrU,EAAA,GAAAW,CAAA,CAC1C,ECkCuC2G,EAAAhG,EAAAtB,EAAAW,GAAA,CAEvC,GAAgBkH,GAAqBC,OAAA,GAAA4M,EAAA,CACrCa,MAAAA,GAAAA,EAA6EvN,GAAgBV,EAAA,KAAAnK,OAAA,CAAAgL,IAC7FiH,MAAAA,GAAAA,IACA,KAAA0G,sBAAA,GACA,MACA,CAGA,KAAA3Y,OAAA,CAAA+J,QAAA,EAEA,CACA,IAAA6O,EAAA,KAAAC,YAAA,CAAA1O,EAAAa,EACA,MAAA4N,IAEA,KAAAV,SAAA,EACA/N,UAAAA,EACAa,cAAAA,EACA,GAAA4N,CAAA,EAEA,KAAAE,cAAA,GACA,CACAA,gBAAA,EAMAC,KAAAC,CAAA,CAAAC,CAAA,EACA,YAAAC,sBAAA,CAAAH,IAAA,CAAAC,EAAAC,EACA,CACAlB,uBAAA,CACA,KAAAmB,sBAAA,KAAAC,QAAA,IACA,KAAAR,sBAAA,CAAAK,CACA,EACA,CACA,iBC3GA,SAAAI,GAAAC,CAAA,CAAA/T,CAAA,CAAAqF,CAAA,EACA,IAAA2O,EAAA9Y,KAAAuE,GAAA,CAAAO,EAFA,EAEA,GACA,MAAW,GAAAiU,GAAAC,CAAA,EAAiB7O,EAAA0O,EAAAC,GAAAhU,EAAAgU,EAC5B,CC8EA,SAAAG,GAAAC,CAAA,CAAAC,CAAA,EACA,OAAAD,EAAAlZ,KAAAmB,IAAA,GAAAgY,EAAAA,EACA,CClFA,IAAAC,GAAA,sBACAC,GAAA,+BACA,SAAAC,GAAA9Z,CAAA,CAAA+Z,CAAA,EACA,OAAAA,EAAAC,IAAA,IAAAha,KAAA4F,IAAA5F,CAAA,CAAAyK,EAAA,CACA,CAuBA,SAAAwP,GAAA,CAAkB9P,UAAAA,CAAA,CAAA+P,UAAAA,CAAA,CAAAtQ,UAAAA,CAAA,IAAA5J,EAA6C,MA0B/Dma,EAzBA,IAAAhV,EAAAgF,CAAA,IACArK,EAAAqK,CAAA,CAAAA,EAAAxG,MAAA,IAKAyW,EAAA,CAAoBC,KAAA,GAAAhS,MAAAlD,CAAA,EACpB,CAAYuE,UAAAA,CAAA,CAAAC,QAAAA,CAAA,CAAA2Q,KAAAA,CAAA,CAAAvQ,SAAAA,CAAA,CAAAvG,SAAAA,CAAA,CAAA+W,uBAAAA,CAAA,EAAwEC,SA9BpFxa,CAAA,EACA,IAAAya,EAAA,CACAjX,SAAA,EACAkG,UAAA,IACAC,QAAA,GACA2Q,KAAA,EACAC,uBAAA,GACA,GAAAva,CAAA,EAGA,IAAA8Z,GAAA9Z,EAAA6Z,KACAC,GAAA9Z,EAAA4Z,IAAA,CACA,IAAAc,EAAwBC,SDZxB,CAAsB5Q,SAAAA,EAAA,IAAA6Q,OAAAA,EAAA,IAAApX,SAAAA,EAAA,EAAA8W,KAAAA,EAAA,EAAwD,MAC9EO,EACAC,EACI,GAAAtF,EAAAnC,CAAA,EAAOtJ,GAAatK,EANxB,IAM6C,8CAC7C,IAAAka,EAAA,EAAAiB,EAIAjB,EAAmB,GAAAoB,EAAAC,CAAA,EAVnB,IACA,EASwBrB,GACxB5P,EAAe,GAAAgR,EAAAC,CAAA,EAbf,IACA,GAY+Crb,EAAqBoK,IACpE4P,EAAA,GAIAkB,EAAA,IACA,IAAAI,EAAAvB,EAAAC,EACArW,EAAA2X,EAAAlR,EAIA,OAAAmR,KAAA,CAHAD,EAAAzX,CAAA,EACAiW,GAAAC,EAAAC,GACAnZ,KAAA2a,GAAA,EAAA7X,EAEA,EACAwX,EAAA,IAEA,IAAAxX,EAAA2X,EADAtB,EACA5P,EAEAqR,EAAA5a,KAAAqM,GAAA,CAAA8M,EAAA,GAAAnZ,KAAAqM,GAAA,CAAA6M,EAAA,GAAA3P,EAEAsR,EAAA5B,GAAAjZ,KAAAqM,GAAA,CAAA6M,EAAA,GAAAC,GAEA,OAAA2B,EALA9X,EAAAA,EAKA4X,CAAAA,EAHA5a,KAAA2a,GAAA,EAAA7X,GAEA,EAAAuX,EAAAnB,GAlCA,KAkCA,QACA2B,CACA,IAMAR,EAAA,GAGA,MAAAva,KAFA6a,GAAA,EAAAzB,EAAA3P,GACA,EAAA2P,EAAAlW,CAAA,EAAAuG,EAAA,GAGA+Q,EAAA,GAGAxa,EADAyJ,EAAAvG,CAAAA,EAAAkW,CAAA,EADAlZ,KAAA2a,GAAA,EAAAzB,EAAA3P,IAMA,IAAA2P,EAAA6B,SAmBAV,CAAA,CAAAC,CAAA,CAAAU,CAAA,EACA,IAAAC,EAAAD,EACA,QAAA5X,EAAA,EAAoBA,EAHpB,GAGwCA,IACxC6X,GAAAZ,EAAAY,GAAAX,EAAAW,GAEA,OAAAA,CACA,EAzBAZ,EAAAC,EADA,EAAA/Q,GAGA,GADAA,EAAetK,EAAqBsK,GACpCtE,MAAAiU,GACA,OACAhQ,UAAA,IACAC,QAAA,GACAI,SAAAA,CACA,CAEA,EACA,IAAAL,EAAAlJ,KAAAqM,GAAA,CAAA6M,EAAA,GAAAY,EACA,OACA5Q,UAAAA,EACAC,QAAAgQ,EAAAA,EAAAnZ,KAAAmB,IAAA,CAAA2Y,EAAA5Q,GACAK,SAAAA,CACA,CACA,CACA,ECtDkC/J,EAMlCya,CALAA,CAAAA,EAAA,CACA,GAAAA,CAAA,CACA,GAAAC,CAAA,CACAJ,KAAA,CACA,GACAC,sBAAA,GACA,CACA,OAAAE,CACA,EASoF,CACpF,GAAAza,CAAA,CACAwD,SAAA,CAAmB7D,EAAqBK,EAAAwD,QAAA,IACxC,GACAkY,EAAAlY,GAAA,EACAmW,EAAAhQ,EAAA,GAAAnJ,KAAAmB,IAAA,CAAA+H,EAAA4Q,EAAA,EACAqB,EAAA7b,EAAAqF,EACAyW,EAAgCjc,EAAqBa,KAAAmB,IAAA,CAAA+H,EAAA4Q,IAQrDuB,EAAArb,EAAAA,KAAAC,GAAA,CAAAkb,GAIA,GAHA/R,GAAAA,CAAAA,EAAAiS,EAAA,OACA3B,GAAAA,CAAAA,EAAA2B,EAAA,SAEAlC,EAAA,GACA,IAAAmC,EAA4BrC,GAAemC,EAAAjC,GAE3CQ,EAAA,GAEAra,EACA+a,KAFAM,GAAA,EAAAxB,EAAAiC,EAAAtW,GAGA,EAAAoW,EACA/B,EAAAiC,EAAAD,CAAA,EACAG,EACAtb,KAAAuM,GAAA,CAAA+O,EAAAxW,GACAqW,EAAAnb,KAAAub,GAAA,CAAAD,EAAAxW,EAAA,CAEA,MACA,GAAAqU,IAAAA,EAEAQ,EAAA,GAAAra,EACAU,KAAA2a,GAAA,EAAAS,EAAAtW,GACAqW,CAAAA,EACA,CAAAD,EAAAE,EAAAD,CAAA,EAAArW,CAAAA,MAEA,CAEA,IAAA0W,EAAAJ,EAAApb,KAAAmB,IAAA,CAAAgY,EAAAA,EAAA,GACAQ,EAAA,IACA,IAAAU,EAAAra,KAAA2a,GAAA,EAAAxB,EAAAiC,EAAAtW,GAEA2W,EAAAzb,KAAAwE,GAAA,CAAAgX,EAAA1W,EAAA,KACA,OAAAxF,EACA,EACA,EAAA4b,EACA/B,EAAAiC,EAAAD,CAAA,EACAnb,KAAA0b,IAAA,CAAAD,GACAD,EACAL,EACAnb,KAAA2b,IAAA,CAAAF,EAAA,EACAD,CACA,CACA,CACA,OACAI,mBAAA7B,GAAAxQ,GAAA,KACAsS,KAAA,IACA,IAAA1R,EAAAwP,EAAA7U,GACA,GAAAiV,EAmBAH,EAAAC,IAAA,CAAA/U,GAAAyE,MAnBA,CACA,IAAA/F,EAAA,EAMA2V,EAAA,GACA3V,CAAAA,EACAsB,IAAAA,EAC8B7F,EAAqBic,GACrBtC,GAAqBe,EAAA7U,EAAAqF,EAAA,EAEnD,IAAA2R,EAAA9b,KAAAC,GAAA,CAAAuD,IAAA4F,EACA2S,EAAA/b,KAAAC,GAAA,CAAAX,EAAA6K,IAAAuP,CACAE,CAAAA,EAAAC,IAAA,CACAiC,GAAAC,CACA,CAKA,OADAnC,EAAA/R,KAAA,CAAA+R,EAAAC,IAAA,CAAAva,EAAA6K,EACAyP,CACA,CACA,CACA,CC3HA,SAAAoC,GAAA,CAAmBrS,UAAAA,CAAA,CAAA3G,SAAAA,EAAA,EAAAiZ,MAAAA,EAAA,GAAAC,aAAAA,EAAA,IAAAC,cAAAA,EAAA,GAAAC,gBAAAA,EAAA,IAAAC,aAAAA,CAAA,CAAA7X,IAAAA,CAAA,CAAAD,IAAAA,CAAA,CAAAmV,UAAAA,EAAA,GAAAtQ,UAAAA,CAAA,CAA4J,MAqC/KkT,EACAC,EArCA,IAAA5X,EAAAgF,CAAA,IACAiQ,EAAA,CACAC,KAAA,GACAhS,MAAAlD,CACA,EACA6X,EAAA,QAAApX,IAAAZ,GAAAqI,EAAArI,GAAAD,KAAAa,IAAAb,GAAAsI,EAAAtI,EACAkY,EAAA,GACA,KAAArX,IAAAZ,EACAD,EACAA,KAAAa,IAAAb,EACAC,EACAxE,KAAAC,GAAA,CAAAuE,EAAAqI,GAAA7M,KAAAC,GAAA,CAAAsE,EAAAsI,GAAArI,EAAAD,EAEAmY,EAAAT,EAAAjZ,EACA2Z,EAAAhY,EAAA+X,EACApd,EAAA+c,KAAAjX,IAAAiX,EAAAM,EAAAN,EAAAM,GAKArd,IAAAqd,GACAD,CAAAA,EAAApd,EAAAqF,CAAA,EACA,IAAAiY,EAAA,IAAAF,EAAA1c,KAAA2a,GAAA,EAAA7V,EAAAoX,GACAW,EAAA,GAAAvd,EAAAsd,EAAA9X,GACAgY,EAAA,IACA,IAAAha,EAAA8Z,EAAA9X,GACAiY,EAAAF,EAAA/X,EACA8U,CAAAA,EAAAC,IAAA,CAAA7Z,KAAAC,GAAA,CAAA6C,IAAA4W,EACAE,EAAA/R,KAAA,CAAA+R,EAAAC,IAAA,CAAAva,EAAAyd,CACA,EASAC,EAAA,IACAR,EAAA5C,EAAA/R,KAAA,IAEAyU,EAAAxX,EACAyX,EAAmB9C,GAAM,CACzB9P,UAAA,CAAAiQ,EAAA/R,KAAA,CAAA4U,EAAA7C,EAAA/R,KAAA,GACA7E,SAAsB4V,GAAqBiE,EAAA/X,EAAA8U,EAAA/R,KAAA,EAC3CsB,QAAAgT,EACAjT,UAAAkT,EACA1C,UAAAA,EACAtQ,UAAAA,CACA,GACA,EAEA,OADA4T,EAAA,GACA,CACApB,mBAAA,KACAC,KAAA,IAOA,IAAAoB,EAAA,SAUA,CATAV,GAAAD,KAAAlX,IAAAkX,IACAW,EAAA,GACAH,EAAAhY,GACAkY,EAAAlY,IAMAwX,KAAAlX,IAAAkX,GAAAxX,GAAAwX,GACAC,EAAAV,IAAA,CAAA/W,EAAAwX,IAGA,GAAAQ,EAAAhY,GACA8U,EAEA,CACA,CACA,CClFA,IAAAsD,GAA6BnS,GAAW,WACxCoS,GAA8BpS,GAAW,WACzCqS,GAAgCrS,GAAW,aCJ3CsS,GAAA,GACAzN,MAAAgH,OAAA,CAAApN,IAAA,iBAAAA,CAAA,ICOA8T,GAAA,CACAC,OAAYnS,EAAAC,CAAI,CAChB6R,OAAUA,GACVE,UAAaA,GACbD,QAAWA,GACX7Q,OAAUA,GACVI,UAAaA,GACbD,QAAWA,GACXP,OAAUA,GACVC,UAAaA,GACbF,QAAWA,GACXG,WAAcA,EACd,EACAoR,GAAA,IACA,GAAA5N,MAAAgH,OAAA,CAAA6G,GAAA,CAEQ,GAAAzI,EAAAC,CAAA,EAASwI,IAAAA,EAAAta,MAAA,4DACjB,IAAAua,EAAAC,EAAAC,EAAAC,EAAA,CAAAJ,EACA,OAAe1S,GAAW2S,EAAAC,EAAAC,EAAAC,EAC1B,OACA,iBAAAJ,GAEQ,GAAAzI,EAAAC,CAAA,EAASqI,KAAAlY,IAAAkY,EAAA,CAAAG,EAAA,yBAAiEA,EAAW,IAC7FH,EAAA,CAAAG,EAAA,EAEAA,CACA,6BExBA,SAAA9T,GAAA,CAAqBJ,SAAAA,EAAA,IAAAI,UAAAmU,CAAA,CAAAC,MAAAA,CAAA,CAAAvU,KAAAA,EAAA,YAAuE,EAK5F,IAAAwU,EAA4BX,GAAa7T,GACzCA,EAAAyG,GAAA,CAAmBuN,IACTA,GAA0BhU,GAKpCoQ,EAAA,CACAC,KAAA,GACAhS,MAAAiW,CAAA,KAKAG,ED5BA/c,CC+BA6c,GAAAA,EAAA5a,MAAA,GAAA2a,EAAA3a,MAAA,CACA4a,EACU,GAAAG,GAAAC,CAAA,EAAaL,EAAA,EDjCvB7N,GAAA,IAAAmO,ECiCuB7U,GACvB8U,EAA8B,GAAAC,GAAAC,CAAA,EAAWN,EAAAH,EAAA,CACzCtU,KAAAoG,MAAAgH,OAAA,CAAAoH,GACAA,EA7BA1W,EAAA2I,GAAA,KAAAlE,GAAsCqR,IAASoB,MAAA,GAAAlX,EAAAnE,MAAA,GA+B/C,GACA,OACAyY,mBAAArS,EACAsS,KAAA,IACAjC,EAAA/R,KAAA,CAAAwW,EAAAvZ,GACA8U,EAAAC,IAAA,CAAA/U,GAAAyE,EACAqQ,EAEA,CACA,iBE7CA,IAAA6E,GAAA,IACA,IAAAC,EAAA,EAA6Bpd,UAAAA,CAAA,CAAW,GAAAlD,EAAAkD,GACxC,OACAqd,MAAA,IAAqBpd,EAAAO,EAAK,CAAA1D,MAAA,CAAAsgB,EAAA,IAC1BE,KAAA,IAAoB,GAAArd,EAAAqB,EAAA,EAAW8b,GAK/BpH,IAAA,IAAoB/V,EAAAC,SAAS,CAAAqd,YAAA,CAAgBtd,EAAAC,SAAS,CAAAF,SAAA,CAAa8V,GAAAC,CAAI,CAAAC,GAAA,EACvE,CACA,ECCAwH,GAAA,CACAC,MAAW/C,GACXA,QAAWA,GACXgD,MAAWrV,GACXA,UAAeA,GACf8P,OAAUA,EACV,EACAwF,GAAA,GAAAC,EAAA,GAMA,OAAAC,WAAkCtI,GAClC5Y,YAAAuB,CAAA,EACA,MAAAA,GAIA,KAAA4f,QAAA,MAIA,KAAAC,UAAA,MAIA,KAAAC,WAAA,GAIA,KAAAC,aAAA,GAMA,KAAAC,gBAAA,WAIA,KAAAC,SAAA,MACA,KAAA7F,KAAA,QAKA,KAAAgF,IAAA,MAGA,GAFA,KAAA9O,QAAA,CAAAyC,MAAA,GACA,KAAA0E,SAAA,IACA,cAAA2C,KAAA,CACA,OACA,KAAA8F,QAAA,GACA,IAAoBC,OAAAA,CAAA,EAAS,KAAAngB,OAAA,CAC7BmgB,GAAAA,GACA,EACA,IAAgBhc,KAAAA,CAAA,CAAA+N,YAAAA,CAAA,CAAAxB,QAAAA,CAAA,CAAAvG,UAAAA,CAAA,EAAwC,KAAAnK,OAAA,CACxDogB,EAAA,CAAA1P,MAAAA,EAAA,OAAAA,EAAAqB,gBAAA,GAAmHA,EAEnH,MAAAzB,QAAA,KAAA8P,EAAAjW,EADA,CAAAc,EAAAD,IAAA,KAAAmN,mBAAA,CAAAlN,EAAAD,GACA7G,EAAA+N,EAAAxB,GACA,KAAAJ,QAAA,CAAA+B,eAAA,EACA,CACAwG,aAAAwH,CAAA,MAWAC,EACAC,EAXA,IAAgB1d,KAAAA,EAAA,YAAAiI,OAAAA,EAAA,EAAA0M,YAAAA,EAAA,EAAAzM,WAAAA,CAAA,CAAAvH,SAAAA,EAAA,GAA6E,KAAAxD,OAAA,CAC7FwgB,EAAiCtJ,GAAWrU,GAC5CA,EACAyc,EAAA,CAAAzc,EAAA,EAAkCsH,GASlCqW,IAAiCrW,IACjC,iBAAAkW,CAAA,MAIAC,EAAoC,GAAArd,EAAAC,CAAA,EAAIuc,GAAoB,GAAAgB,GAAAC,CAAA,EAAGL,CAAA,IAAAA,CAAA,MAC/DA,EAAA,SAEA,IAAAM,EAAAH,EAAA,CAA6C,QAAAxgB,OAAA,CAAAmK,UAAAkW,CAAA,EAK7C,YAAAtV,GACAwV,CAAAA,EAAAC,EAAA,CACA,QAAAxgB,OAAA,CACAmK,UAAA,IAAAkW,EAAA,CAAAO,OAAA,GACApd,SAAA,CAAAA,CACA,EAAa,EAUb,OAAAmd,EAAAvE,kBAAA,EACAuE,CAAAA,EAAAvE,kBAAA,CAA2CyE,SFlH3CF,CAAA,EACA,IAAA5W,EAAA,EAEAqQ,EAAAuG,EAAAtE,IAAA,CAAAtS,GACA,MAAAqQ,EAAAC,IAAA,EAAAtQ,EALA,KAMAA,GAHA,GAIAqQ,EAAAuG,EAAAtE,IAAA,CAAAtS,GAEA,OAAAA,GATA,IASA9F,IAAA8F,CACA,EEyGgE4W,EAAA,EAEhE,IAAgBvE,mBAAAA,CAAA,EAAqBuE,EACrCG,EAAA1E,EAAA5E,EAEA,OACAmJ,UAAAA,EACAJ,kBAAAA,EACAD,sBAAAA,EACAlE,mBAAAA,EACA0E,iBAAAA,EACAC,cAPAD,EAAAhW,CAAAA,EAAA,GAAA0M,CAQA,CACA,CACAsB,gBAAA,CACA,IAAgBxB,SAAAA,EAAA,IAAkB,KAAAtX,OAAA,CAClC,KAAAghB,IAAA,GACA,gBAAAhB,gBAAA,EAAA1I,EAIA,KAAA8C,KAAA,MAAA4F,gBAAA,CAHA,KAAAiB,KAAA,EAKA,CACAC,KAAApf,CAAA,CAAAqf,EAAA,IACA,IAAgB9L,SAAAA,CAAA,EAAW,KAE3B,IAAAA,EAAA,CACA,IAAoBlL,UAAAA,CAAA,EAAY,KAAAnK,OAAA,CAChC,OAAqBqa,KAAA,GAAAhS,MAAA8B,CAAA,CAAAA,EAAAxG,MAAA,IACrB,CACA,IAAgBqH,cAAAA,CAAA,CAAA2V,UAAAA,CAAA,CAAAJ,kBAAAA,CAAA,CAAAD,sBAAAA,CAAA,CAAAnW,UAAAA,CAAA,CAAAiS,mBAAAA,CAAA,CAAA2E,cAAAA,CAAA,CAAAD,iBAAAA,CAAA,EAAsIzL,EACtJ,eAAA4K,SAAA,CACA,OAAAU,EAAAtE,IAAA,IACA,IAAgB9E,MAAAA,CAAA,CAAAzM,OAAAA,CAAA,CAAAC,WAAAA,CAAA,CAAAyM,YAAAA,CAAA,CAAAY,SAAAA,CAAA,EAAmD,KAAApY,OAAA,CAOnE,KAAAohB,KAAA,GACA,KAAAnB,SAAA,CAAAzf,KAAAwE,GAAA,MAAAib,SAAA,CAAAne,GAEA,KAAAsf,KAAA,IACA,MAAAnB,SAAA,CAAAzf,KAAAwE,GAAA,CAAAlD,EAAAif,EAAA,KAAAK,KAAA,MAAAnB,SAAA,GAGAkB,EACA,KAAArB,WAAA,CAAAhe,EAEA,YAAA8d,QAAA,CACA,KAAAE,WAAA,MAAAF,QAAA,CAMA,KAAAE,WAAA,CACAtf,KAAA6gB,KAAA,CAAAvf,EAAA,KAAAme,SAAA,OAAAmB,KAAA,CAGA,IAAAE,EAAA,KAAAxB,WAAA,CAAAvI,EAAA,MAAA6J,KAAA,UACAG,EAAA,KAAAH,KAAA,IACAE,EAAA,EACAA,EAAAP,CACA,MAAAjB,WAAA,CAAAtf,KAAAuE,GAAA,CAAAuc,EAAA,GAEA,kBAAAlH,KAAA,cAAAwF,QAAA,EACA,MAAAE,WAAA,CAAAiB,CAAA,EAEA,IAAAS,EAAA,KAAA1B,WAAA,CACA2B,EAAAd,EACA,GAAA7V,EAAA,CAMA,IAAA4W,EAAAlhB,KAAAwE,GAAA,MAAA8a,WAAA,CAAAiB,GAAAD,EAKAa,EAAAnhB,KAAAohB,KAAA,CAAAF,GAKAG,EAAAH,EAAA,CAKA,EAAAG,GAAAH,GAAA,GACAG,CAAAA,EAAA,GAEAA,IAAAA,GAAAF,IACAA,CAAAA,EAAAnhB,KAAAwE,GAAA,CAAA2c,EAAA7W,EAAA,IAIA,IAEAC,YAAAA,GACA8W,EAAA,EAAAA,EACArK,GACAqK,CAAAA,GAAArK,EAAAsJ,CAAA,GAGA,WAAA/V,GACA0W,CAAAA,EAAAlB,CAAA,GAGAiB,EAAsB,GAAAzG,EAAAC,CAAA,EAAK,IAAA6G,GAAAf,CAC3B,CAMA,IAAA1G,EAAAmH,EACA,CAAgBlH,KAAA,GAAAhS,MAAA8B,CAAA,KAChBsX,EAAApF,IAAA,CAAAmF,GACAlB,GACAlG,CAAAA,EAAA/R,KAAA,CAAAiY,EAAAlG,EAAA/R,KAAA,GAEA,IAAcgS,KAAAA,CAAA,EAAOD,EACrBmH,GAAAnF,OAAAA,GACA/B,CAAAA,EACA,KAAA+G,KAAA,IACA,KAAAtB,WAAA,EAAAiB,EACA,KAAAjB,WAAA,KAEA,IAAAgC,EAAA,YAAAlC,QAAA,EACA,mBAAAxF,KAAA,mBAAAA,KAAA,EAAAC,CAAA,EAUA,OATAyH,GAAA9W,KAAApF,IAAAoF,GACAoP,CAAAA,EAAA/R,KAAA,CAA0BwC,GAAgBV,EAAA,KAAAnK,OAAA,CAAAgL,EAAA,EAE1CoN,GACAA,EAAAgC,EAAA/R,KAAA,EAEAyZ,GACA,KAAAC,MAAA,GAEA3H,CACA,CACA,IAAArQ,UAAA,CACA,IAAgBsL,SAAAA,CAAA,EAAW,KAC3B,OAAAA,EAA0B1V,EAAqB0V,EAAA+G,kBAAA,GAC/C,CACA,IAAArY,MAAA,CACA,OAAepE,EAAqB,KAAAmgB,WAAA,CACpC,CACA,IAAA/b,KAAAie,CAAA,EACAA,EAAkBviB,EAAqBuiB,GACvC,KAAAlC,WAAA,CAAAkC,EACA,YAAApC,QAAA,WAAAwB,KAAA,CACA,KAAAxB,QAAA,CAAAoC,EAEA,KAAAC,MAAA,EACA,MAAAhC,SAAA,MAAAgC,MAAA,CAAAnK,GAAA,GAAAkK,EAAA,KAAAZ,KAAA,CAEA,CACA,IAAAA,OAAA,CACA,YAAArB,aAAA,CAEA,IAAAqB,MAAAc,CAAA,EACA,IAAAC,EAAA,KAAApC,aAAA,GAAAmC,CACA,MAAAnC,aAAA,CAAAmC,EACAC,GACA,MAAApe,IAAA,CAAwBpE,EAAqB,KAAAmgB,WAAA,EAE7C,CACAkB,MAAA,CAIA,GAHA,KAAA1Q,QAAA,CAAAN,WAAA,EACA,KAAAM,QAAA,CAAA0C,MAAA,GAEA,MAAAkF,SAAA,EACA,KAAA8H,gBAAA,WACA,MACA,CACA,QAAAvI,SAAA,CACA,OACA,IAAgBwK,OAAAA,EAAShD,EAAe,CAAAmD,OAAAA,CAAA,CAAAnC,UAAAA,CAAA,EAAsB,KAAAjgB,OAAA,CAC9D,KAAAiiB,MAAA,EACA,MAAAA,MAAA,CAAAA,EAAA,QAAAf,IAAA,CAAApf,GAAA,EAEAsgB,GAAAA,IACA,IAAAtK,EAAA,KAAAmK,MAAA,CAAAnK,GAAA,EACA,aAAA8H,QAAA,CACA,KAAAK,SAAA,CAAAnI,EAAA,KAAA8H,QAAA,CAEA,KAAAK,SAAA,CAGA,kBAAA7F,KAAA,EACA,MAAA6F,SAAA,CAAAnI,CAAA,EAHA,KAAAmI,SAAA,CAAAA,MAAAA,EAAAA,EAAA,KAAAjI,aAAA,GAKA,kBAAAoC,KAAA,EACA,KAAArC,qBAAA,GAEA,KAAA8H,UAAA,MAAAI,SAAA,CACA,KAAAL,QAAA,MAKA,KAAAxF,KAAA,WACA,KAAA6H,MAAA,CAAA9C,KAAA,EACA,CACA8B,OAAA,CACA,IAAA1P,EACA,SAAA2G,SAAA,EACA,KAAA8H,gBAAA,UACA,MACA,CACA,KAAA5F,KAAA,UACA,KAAAwF,QAAA,QAAArO,CAAAA,EAAA,KAAAuO,WAAA,GAAAvO,KAAA,IAAAA,EAAAA,EAAA,CACA,CACAI,UAAA,CACA,iBAAAyI,KAAA,EACA,KAAA4G,IAAA,GAEA,KAAAhB,gBAAA,MAAA5F,KAAA,YACA,KAAAwF,QAAA,KACA,CACAmC,QAAA,CACA,KAAA7B,QAAA,GACA,KAAA9F,KAAA,YACA,IAAgBnI,WAAAA,CAAA,EAAa,KAAAjS,OAAA,CAC7BiS,GAAAA,GACA,CACAc,QAAA,CACA,YAAA8M,UAAA,EACA,KAAAqB,IAAA,MAAArB,UAAA,EAEA,KAAAK,QAAA,GACA,KAAAnI,qBAAA,EACA,CACAmI,UAAA,CACA,KAAA9F,KAAA,QACA,KAAAiI,UAAA,GACA,KAAA1J,sBAAA,GACA,KAAAZ,qBAAA,GACA,KAAAkI,SAAA,MAAAJ,UAAA,MACA,KAAAvP,QAAA,CAAAyC,MAAA,EACA,CACAsP,YAAA,CACA,KAAAJ,MAAA,GAEA,KAAAA,MAAA,CAAA7C,IAAA,GACA,KAAA6C,MAAA,CAAArc,KAAAA,EACA,CACAub,OAAApd,CAAA,EAEA,OADA,KAAAkc,SAAA,GACA,KAAAiB,IAAA,CAAAnd,EAAA,GACA,CACA,iBCzXA,IAAAue,GAAA,GAAAlS,MAAAgH,OAAA,CAAA7K,IAAA,iBAAAA,CAAA,ICIAgW,GAAA,CAAAhW,EAAAxC,KAEA,IAAAyY,EAAA,GACAC,EAAAjiB,KAAAuE,GAAA,CAAAvE,KAAA6gB,KAAA,CAAAtX,EAJA,IAIA,GACA,QAAAnG,EAAA,EAAoBA,EAAA6e,EAAe7e,IACnC4e,GAAAjW,EAAyB,GAAAmV,EAAA/C,CAAA,EAAQ,EAAA8D,EAAA,EAAA7e,IAAA,KAEjC,gBAAqB4e,EAAAE,SAAA,GAAAF,EAAA7e,MAAA,IAAuC,oBCP5D,IAAAgf,GAAA,CACAC,aAAAhd,KAAAA,CACA,EEJAid,GAA2CC,SDC3C3b,CAAA,CAAA4b,CAAA,EACA,IAAAC,EAAqB,GAAAC,GAAApL,CAAA,EAAI1Q,GACzB,WAAmB,IAAAoK,EAAQ,cAAAA,CAAAA,EAAaoR,EAAa,CAAAI,EAAA,GAAAxR,KAAA,IAAAA,EAAAA,EAAAyR,GAAA,CACrD,ECJuD,KACvD,IACAE,SACAC,aAAA,QACAC,OAAA,EAAuBC,QAAA,GAAY,CAAI9W,OAAA,gBACvC,CACA,MAAA6O,EAAA,CACA,QACA,CACA,QACA,EAAC,gBCADkI,GAAA,EAAAhjB,EAAAC,EAAAgjB,EAAAjI,EAAA,mBAA8Dhb,EAAE,IAAIC,EAAE,IAAIgjB,EAAE,IAAIjI,EAAE,GAClFkI,GAAA,CACAzF,OAAA,SACA/T,KAAA,OACA0T,OAAA,UACAC,QAAA,WACAC,UAAA,cACA9Q,OAAAwW,GAAA,eACArW,QAAAqW,GAAA,eACA5W,OAAA4W,GAAA,oBACA7W,QAAA6W,GAAA,mBACA,EEvBA,SAAAG,GAAAC,CAAA,CAAAC,CAAA,EACAD,EAAAC,QAAA,CAAAA,EACAD,EAAAE,QAAA,KACA,CCDA,IAAAC,GAAoC,GAAAZ,GAAApL,CAAA,EAAI,IAAAiM,OAAAC,cAAA,CAAAC,IAAA,CAAAC,QAAAC,SAAA,aCoExCC,GAAA,CACAvX,WAAcA,GACdD,UAAaA,GACbO,UAAaA,EACb,CAIA,OAAAkX,WAAmC/M,GACnC5Y,YAAAuB,CAAA,EACA,MAAAA,GACA,IAAgBmE,KAAAA,CAAA,CAAA+N,YAAAA,CAAA,CAAAxB,QAAAA,CAAA,CAAAvG,UAAAA,CAAA,EAAwC,KAAAnK,OAAA,CACxD,KAAAsQ,QAAA,KAA4B2E,GAAoB9K,EAAA,CAAAc,EAAAD,IAAA,KAAAmN,mBAAA,CAAAlN,EAAAD,GAAA7G,EAAA+N,EAAAxB,GAChD,KAAAJ,QAAA,CAAA+B,eAAA,EACA,CACAwG,aAAA1O,CAAA,CAAAa,CAAA,MACAuG,EArDAvR,EAsDA,IAAc+J,SAAAA,EAAA,IAAAwU,MAAAA,CAAA,CAAAvU,KAAAA,CAAA,CAAAnH,KAAAA,CAAA,CAAAqP,YAAAA,CAAA,CAAA/N,KAAAA,CAAA,CAAA8b,UAAAA,CAAA,EAAmE,KAAAjgB,OAAA,CAKjF,YAAAuR,CAAAA,EAAAW,EAAAmS,KAAA,GAAA9S,KAAA,IAAAA,EAAA,OAAAA,EAAA5G,OAAA,EACA,SAeA,GARA,iBAAAX,GACY6Y,MAzBZpY,KAAA0Z,IA2BAna,CAAAA,EAAAma,EAAA,CAAAna,EAAA,EArEYkN,GAAWlX,CADvBA,EA2EA,KAAAA,OAAA,EA1EuB6C,IAAA,GACvB7C,WAAAA,EAAA6C,IAAA,EACA,CAASyhB,SJhCTA,EAAA/X,CAAA,EACA,MAAAgY,CAAAA,CAAA,oBAAAhY,GAAoDsW,MACpD,CAAAtW,GACA,iBAAAA,GACAA,CAAAA,KAAAiX,IAA+CX,IAAoB,GAC3DP,GAAkB/V,IAC1B6D,MAAAgH,OAAA,CAAA7K,IAAAA,EAAAiY,KAAA,CAAAF,EAAA,CACA,EIyB+BtkB,EAAAgK,IAAA,EAwE/B,CACA,IAAoBiI,WAAAA,CAAA,CAAAmG,SAAAA,CAAA,CAAAlG,YAAAA,CAAA,CAAAxB,QAAAA,CAAA,IAAA1Q,EAAA,CAAyD,KAAAA,OAAA,CAC7EykB,EAAAC,SAxEAva,CAAA,CAAAnK,CAAA,EAMA,IAAA2kB,EAAA,IAAgChF,GAAmB,CACnD,GAAA3f,CAAA,CACAmK,UAAAA,EACAW,OAAA,EACAyM,MAAA,EACAL,YAAA,EACA,GACAkD,EAAA,CAAkBC,KAAA,GAAAhS,MAAA8B,CAAA,KAClBya,EAAA,GAKAtf,EAAA,EACA,MAAA8U,EAAAC,IAAA,EAAA/U,EA/BiB,KAiCjBsf,EAAA3iB,IAAA,CAAAmY,CADAA,EAAAuK,EAAAxD,MAAA,CAAA7b,EAAA,EACA+C,KAAA,EACA/C,GAvCA,GAyCA,OACAiZ,MAAA3Y,KAAAA,EACAuE,UAAAya,EACA7a,SAAAzE,EA5CA,GA6CA0E,KAAA,QACA,CACA,EAyCAG,EAAAnK,EAKA,KAAAmK,CAJAA,EAAAsa,EAAAta,SAAA,EAIAxG,MAAA,EACAwG,CAAAA,CAAA,IAAAA,CAAA,KAEAJ,EAAA0a,EAAA1a,QAAA,CACAwU,EAAAkG,EAAAlG,KAAA,CACAvU,EAAAya,EAAAza,IAAA,CACAnH,EAAA,WACA,CACA,IAAA6gB,EAA0BmB,SHzH1BnU,CAAA,CAAAoU,CAAA,CAAA3a,CAAA,EAA8DoN,MAAAA,EAAA,EAAAxN,SAAAA,EAAA,IAAAe,OAAAA,EAAA,EAAAC,WAAAA,EAAA,OAAAf,KAAAA,CAAA,CAAAuU,MAAAA,CAAA,EAA2E,EAAI,EAC7I,IAAAwG,EAAA,CAA8B,CAAAD,EAAA,CAAA3a,CAAA,EAC9BoU,GACAwG,CAAAA,EAAArjB,MAAA,CAAA6c,CAAA,EACA,IAAAhS,EAAmByY,SDkBnBA,EAAAzY,CAAA,CAAAxC,CAAA,EACA,GAAAwC,QAGA,mBAAAA,GAA6CsW,KAC9BN,GAAoBhW,EAAAxC,GAEtBuY,GAAkB/V,GAC/B+W,GAAA/W,GAEA6D,MAAAgH,OAAA,CAAA7K,GACAA,EAAAkE,GAAA,IAAAuU,EAAAC,EAAAlb,IACAyZ,GAAA7F,OAAA,EAGA6F,EAAA,CAAAjX,EAAA,ECjC0CvC,EAAAD,GAM1C,OAFAqG,MAAAgH,OAAA,CAAA7K,IACAwY,CAAAA,EAAAxY,MAAA,CAAAA,CAAA,EACAmE,EAAA0S,OAAA,CAAA2B,EAAA,CACAxN,MAAAA,EACAxN,SAAAA,EACAwC,OAAA,MAAA6K,OAAA,CAAA7K,GAAA,SAAAA,EACA+H,KAAA,OACA4Q,WAAApa,EAAA,EACAqa,UAAApa,YAAAA,EAAA,oBACA,EACA,EGuG6CmH,EAAAmS,KAAA,CAAA1Z,OAAA,CAAAxG,EAAAgG,EAAA,CAA+C,QAAAnK,OAAA,CAAA+J,SAAAA,EAAAwU,MAAAA,EAAAvU,KAAAA,CAAA,GAyB5F,OAtBA0Z,EAAAzD,SAAA,CAAAA,MAAAA,EAAAA,EAAA,KAAAjI,aAAA,GACA,KAAAoN,eAAA,EACY3B,GAAcC,EAAA,KAAA0B,eAAA,EAC1B,KAAAA,eAAA,CAAAxf,KAAAA,GAWA8d,EAAAE,QAAA,MACA,IAAwB3R,WAAAA,CAAA,EAAa,KAAAjS,OAAA,CACrCkS,EAAAf,GAAA,CAAgCtG,GAAgBV,EAAA,KAAAnK,OAAA,CAAAgL,IAChDiH,GAAAA,IACA,KAAAc,MAAA,GACA,KAAA4F,sBAAA,EACA,EAEA,CACA+K,UAAAA,EACA3Z,SAAAA,EACAwU,MAAAA,EACA1b,KAAAA,EACAmH,KAAAA,EACAG,UAAAA,CACA,CACA,CACA,IAAAJ,UAAA,CACA,IAAgBsL,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,SACA,IAAgBtL,SAAAA,CAAA,EAAWsL,EAC3B,OAAe1V,EAAqBoK,EACpC,CACA,IAAAhG,MAAA,CACA,IAAgBsR,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,SACA,IAAgBqO,UAAAA,CAAA,EAAYrO,EAC5B,OAAe1V,EAAqB+jB,EAAA5D,WAAA,IACpC,CACA,IAAA/b,KAAAie,CAAA,EACA,IAAgB3M,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,OACA,IAAgBqO,UAAAA,CAAA,EAAYrO,CAC5BqO,CAAAA,EAAA5D,WAAA,CAAgCrgB,EAAqBuiB,EACrD,CACA,IAAAZ,OAAA,CACA,IAAgB/L,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,SACA,IAAgBqO,UAAAA,CAAA,EAAYrO,EAC5B,OAAAqO,EAAA2B,YAAA,CAEA,IAAAjE,MAAAc,CAAA,EACA,IAAgB7M,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,OACA,IAAgBqO,UAAAA,CAAA,EAAYrO,CAC5BqO,CAAAA,EAAA2B,YAAA,CAAAnD,CACA,CACA,IAAA9H,OAAA,CACA,IAAgB/E,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,aACA,IAAgBqO,UAAAA,CAAA,EAAYrO,EAC5B,OAAAqO,EAAA4B,SAAA,CAEA,IAAArF,WAAA,CACA,IAAgB5K,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,YACA,IAAgBqO,UAAAA,CAAA,EAAYrO,EAG5B,OAAAqO,EAAAzD,SAAA,CAMAwD,eAAAE,CAAA,EACA,QAAAzL,SAAA,CAGA,CACA,IAAoB7C,SAAAA,CAAA,EAAW,KAC/B,IAAAA,EACA,OAAuBzJ,EAAAC,CAAI,CAC3B,IAAoB6X,UAAAA,CAAA,EAAYrO,EACpBoO,GAAcC,EAAAC,EAC1B,MARA,KAAAyB,eAAA,CAAAzB,EASA,OAAe/X,EAAAC,CAAI,CAEnBmV,MAAA,CACA,QAAAvJ,SAAA,CACA,OACA,IAAgBpC,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,OACA,IAAgBqO,UAAAA,CAAA,EAAYrO,CAC5B,cAAAqO,EAAA4B,SAAA,EACA,KAAAvN,qBAAA,GAEA2L,EAAA1C,IAAA,EACA,CACAC,OAAA,CACA,IAAgB5L,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,OACA,IAAgBqO,UAAAA,CAAA,EAAYrO,EAC5BqO,EAAAzC,KAAA,EACA,CACA7B,MAAA,CAGA,GAFA,KAAA9O,QAAA,CAAAyC,MAAA,GACA,KAAA0E,SAAA,IACA,cAAA2C,KAAA,CACA,OACA,KAAAzB,sBAAA,GACA,KAAAZ,qBAAA,GACA,IAAgB1C,SAAAA,CAAA,EAAW,KAC3B,IAAAA,EACA,OACA,IAAgBqO,UAAAA,CAAA,CAAAvZ,UAAAA,CAAA,CAAAJ,SAAAA,CAAA,CAAAlH,KAAAA,CAAA,CAAAmH,KAAAA,CAAA,CAAAuU,MAAAA,CAAA,EAAoDlJ,EACpE,GAAAqO,SAAAA,EAAA4B,SAAA,EACA5B,aAAAA,EAAA4B,SAAA,CACA,OAUA,QAAAvhB,IAAA,EACA,IAAoBmO,YAAAA,CAAA,CAAAkG,SAAAA,CAAA,CAAAnG,WAAAA,CAAA,CAAAvB,QAAAA,CAAA,IAAA1Q,EAAA,CAAyD,KAAAA,OAAA,CAC7E2kB,EAAA,IAAwChF,GAAmB,CAC3D,GAAA3f,CAAA,CACAmK,UAAAA,EACAJ,SAAAA,EACAlH,KAAAA,EACAmH,KAAAA,EACAuU,MAAAA,EACArH,YAAA,EACA,GACAqO,EAA+B9lB,EAAqB,KAAAsE,IAAA,EACpDmO,EAAAsT,eAAA,CAAAb,EAAAxD,MAAA,CAAAoE,EAjQA,IAiQAld,KAAA,CAAAsc,EAAAxD,MAAA,CAAAoE,GAAAld,KAAA,CAjQA,GAkQA,CACA,IAAgB8X,OAAAA,CAAA,EAAS,KAAAngB,OAAA,CACzBmgB,GAAAA,IACA,KAAApN,MAAA,EACA,CACApB,UAAA,CACA,IAAgB0D,SAAAA,CAAA,EAAW,KAC3BA,GAEAA,EAAAqO,SAAA,CAAA3B,MAAA,EACA,CACAhP,QAAA,CACA,IAAgBsC,SAAAA,CAAA,EAAW,KAC3BA,GAEAA,EAAAqO,SAAA,CAAA3Q,MAAA,EACA,CACA,OAAA0S,SAAAzlB,CAAA,EACA,IAAgBkS,YAAAA,CAAA,CAAA/N,KAAAA,CAAA,CAAAqT,YAAAA,CAAA,CAAAzM,WAAAA,CAAA,CAAApB,QAAAA,CAAA,CAAA9G,KAAAA,CAAA,EAA4D7C,EAC5E,OAAgB6jB,MAChB1f,GACYuhB,GAAApgB,CAAiB,CAAA+E,GAAA,CAAAlG,IAC7B+N,GACAA,EAAAmS,KAAA,EACAnS,EAAAmS,KAAA,CAAA1Z,OAAA,YAAAgb,aAKA,CAAAzT,EAAAmS,KAAA,CAAAuB,QAAA,GAAAxN,QAAA,EACA,CAAAZ,GACAzM,WAAAA,GACApB,IAAAA,GACA9G,YAAAA,CACA,CACA,gBCzTA,OAAAgjB,GACApnB,YAAAqnB,CAAA,EAEA,KAAA1G,IAAA,UAAA2G,MAAA,SACA,KAAAD,UAAA,CAAAA,EAAA5a,MAAA,CAAAqZ,QACA,CACAxL,KAAAiN,CAAA,CAAAC,CAAA,EACA,OAAA9M,QAAA+M,GAAA,MAAAJ,UAAA,EAAA/M,IAAA,CAAAiN,GAAAG,KAAA,CAAAF,EACA,CAIAG,OAAAC,CAAA,EACA,YAAAP,UAAA,IAAAO,EAAA,CAEAC,OAAAD,CAAA,CAAAE,CAAA,EACA,QAAA3iB,EAAA,EAAwBA,EAAA,KAAAkiB,UAAA,CAAAniB,MAAA,CAA4BC,IACpD,KAAAkiB,UAAA,CAAAliB,EAAA,CAAAyiB,EAAA,CAAAE,CAEA,CACA9C,eAAAE,CAAA,CAAAhO,CAAA,EACA,IAAA6Q,EAAA,KAAAV,UAAA,CAAArV,GAAA,IACA,CAAgB,EAAAgV,GAAAngB,CAAA,KAAsBoe,EAAAD,cAAA,CACtCC,EAAAD,cAAA,CAAAE,GAGAhO,EAAA+N,IAGA,WACA8C,EAAA3V,OAAA,EAAAkC,EAAAnP,KACAmP,GAAAA,IACA,KAAA+S,UAAA,CAAAliB,EAAA,CAAAwb,IAAA,EACA,EACA,CACA,CACA,IAAArb,MAAA,CACA,YAAAqiB,MAAA,QACA,CACA,IAAAriB,KAAAA,CAAA,EACA,KAAAuiB,MAAA,QAAAviB,EACA,CACA,IAAAqd,OAAA,CACA,YAAAgF,MAAA,SACA,CACA,IAAAhF,MAAAA,CAAA,EACA,KAAAkF,MAAA,SAAAlF,EACA,CACA,IAAAnB,WAAA,CACA,YAAAmG,MAAA,aACA,CACA,IAAArc,UAAA,CACA,IAAAhF,EAAA,EACA,QAAAnB,EAAA,EAAwBA,EAAA,KAAAkiB,UAAA,CAAAniB,MAAA,CAA4BC,IACpDmB,EAAAvE,KAAAuE,GAAA,CAAAA,EAAA,KAAA+gB,UAAA,CAAAliB,EAAA,CAAAmG,QAAA,EAEA,OAAAhF,CACA,CACAghB,OAAAU,CAAA,EACA,KAAAX,UAAA,CAAAjV,OAAA,IAAA6V,CAAA,CAAAD,EAAA,GACA,CACAzF,MAAA,CACA,KAAA+E,MAAA,QACA,CACA9E,OAAA,CACA,KAAA8E,MAAA,SACA,CACAhT,QAAA,CACA,KAAAgT,MAAA,UACA,CACApU,UAAA,CACA,KAAAoU,MAAA,YACA,CACA,CE/DA,IAAAY,GAAA,CAAAxiB,EAAAkE,EAAAvI,EAAA0K,EAAA,EAAgE,CAAAkG,EAAAkW,IAAA,IAChE,IAAAC,EAA4Btc,GAAkBC,EAAArG,IAAA,GAM9CoT,EAAAsP,EAAAtP,KAAA,EAAA/M,EAAA+M,KAAA,IAKA,CAAUiK,QAAAA,EAAA,GAAchX,EACxBgX,GAAwB/hB,EAAqB8X,GAC7C,IAAAvX,EAAA,CACAmK,UAAAiG,MAAAgH,OAAA,CAAAtX,GAAAA,EAAA,MAAAA,EAAA,CACAkK,KAAA,UACAxG,SAAA6E,EAAA5E,WAAA,GACA,GAAAojB,CAAA,CACAtP,MAAA,CAAAiK,EACApJ,SAAA,IACA/P,EAAA8I,GAAA,CAAA9D,GACAwZ,EAAAzO,QAAA,EAAAyO,EAAAzO,QAAA,CAAA/K,EACA,EACA4E,WAAA,KACAA,IACA4U,EAAA5U,UAAA,EAAA4U,EAAA5U,UAAA,EACA,EACA9N,KAAAA,EACA+N,YAAA7J,EACAqI,QAAAkW,EAAAhhB,KAAAA,EAAA8K,CACA,CAKA,EAASoW,SD3CT,CAA+BC,KAAAA,CAAA,CAAAxP,MAAAyP,CAAA,CAAAC,cAAAA,CAAA,CAAAC,gBAAAA,CAAA,CAAAC,iBAAAA,CAAA,CAAArc,OAAAA,CAAA,CAAAC,WAAAA,CAAA,CAAAyM,YAAAA,CAAA,CAAAnH,KAAAA,CAAA,CAAAmR,QAAAA,CAAA,IAAAhX,EAAsI,EACrK,QAAAsZ,OAAA/J,IAAA,CAAAvP,GAAA7G,MAAA,EC0C4BkjB,IAC5B7mB,CAAAA,EAAA,CACA,GAAAA,CAAA,CACA,GAAeiK,GAAoB9F,EAAAnE,EAAA,CACnC,EAOAA,EAAA+J,QAAA,EACA/J,CAAAA,EAAA+J,QAAA,CAA2BtK,EAAqBO,EAAA+J,QAAA,GAEhD/J,EAAAwX,WAAA,EACAxX,CAAAA,EAAAwX,WAAA,CAA8B/X,EAAqBO,EAAAwX,WAAA,GAEnD5R,KAAAA,IAAA5F,EAAAqQ,IAAA,EACArQ,CAAAA,EAAAmK,SAAA,IAAAnK,EAAAqQ,IAAA,EAEA,IAAA+W,EAAA,GAmBA,GAlBA,KAAApnB,EAAA6C,IAAA,EACA7C,CAAAA,IAAAA,EAAA+J,QAAA,EAAA/J,EAAAwX,WAAA,IACAxX,EAAA+J,QAAA,GACA,IAAA/J,EAAAuX,KAAA,EACA6P,CAAAA,EAAA,KAGQ1c,CAAAA,GAAqBC,OAAA,EACrB0c,GAAA9D,CAAkB,CAAA+D,cAAA,IAC1BF,EAAA,GACApnB,EAAA+J,QAAA,GACA/J,EAAAuX,KAAA,IAOA6P,GAAA,CAAAR,GAAAve,KAAAzC,IAAAyC,EAAA6I,GAAA,IACA,IAAAlG,EAA8BH,GAAgB7K,EAAAmK,SAAA,CAAA0c,GAC9C,GAAA7b,KAAApF,IAAAoF,EAOA,OANYjJ,EAAAO,EAAK,CAAA1D,MAAA,MACjBoB,EAAAoY,QAAA,CAAApN,GACAhL,EAAAiS,UAAA,EACA,GAGA,IAAuB4T,GAAqB,GAE5C,OAMA,CAAAe,GAAsBxC,GAAoBqB,QAAA,CAAAzlB,GAC1C,IAAmBokB,GAAoBpkB,GAGvC,IAAmB2f,GAAmB3f,EAEtC,EC7GAunB,GAAA,EAA4B5c,QAAAA,CAAA,CAAS,GACrCA,EAAAA,EAAA6c,aAAA,CAAAC,WAAA,gCECA,SAAAC,GAAA1W,CAAA,CAAAvG,CAAA,MACA8G,EACA,IAAAP,EAAA2W,eAAA,CACA,OACA,IAAAC,EAAA5W,EAAAC,QAAA,eACA,GDLmB,GAAA4W,GAAAjkB,CAAA,ECKYgkB,IDLCvf,EAAAiK,GAAA,CCMhC,OAAAsV,EAAAtV,GAAA,CAAA7H,EAEA,UAAA8G,CAAAA,EAAAP,EAAA8W,KAAA,CAAAC,KAAA,GAAAxW,KAAA,IAAAA,EAAA,OAAAA,EAAAqW,UAAA,GACQ,GAAAI,GAAA1b,CAAA,EAAiB7B,IACzBuG,EAAAiX,cAAA,0BAEA,CCKA,IAAAC,GAAA,IAAAC,OAKA,OAAAC,GACA3pB,YAAAuS,CAAA,EAIA,KAAAqX,cAAA,MACA,KAAAC,UAAA,IACA,KAAAC,gBAAA,MACA,KAAAnjB,WAAA,EAA6B/F,EAAA,EAAAC,EAAA,GAI7B,KAAAkpB,WAAA,IACA,KAAAC,qBAAA,IAIA,KAAAC,OAAA,CAAuBzhB,IACvB,KAAA+J,aAAA,CAAAA,CACA,CACAmO,MAAAwJ,CAAA,EAAyBC,aAAAA,EAAA,IAAuB,EAAI,EAIpD,IAAgBC,gBAAAA,CAAA,EAAkB,KAAA7X,aAAA,CAClC,GAAA6X,GAAAA,CAAA,IAAAA,EAAAC,SAAA,CACA,OA8FA,IAAgBhoB,iBAAAA,CAAA,EAAmB,KAAA8kB,QAAA,EACnC,MAAAmD,UAAA,KAA8BroB,EAAUioB,EAAA,CACxC5lB,eA/FA,IACA,IAAoBjC,iBAAAA,CAAA,EAAmB,KAAA8kB,QAAA,EAGvC9kB,CAAAA,EAAA,KAAAkoB,cAAA,QAAAC,aAAA,GACAL,GACA,KAAAA,YAAA,CAAkC1pB,EAAgBJ,EAAA,QAAAM,KAAA,CAElD,EAwFA8C,QAvFA,CAAApD,EAAAsC,KAEA,IAAoBoD,KAAAA,CAAA,CAAA0kB,gBAAAA,CAAA,CAAAC,YAAAA,CAAA,EAAqC,KAAAvD,QAAA,GACzD,GAAAphB,GAAA,CAAA0kB,IACA,KAAAb,cAAA,EACA,KAAAA,cAAA,GACA,KAAAA,cAAA,CAAsC9jB,EAAaC,GAEnD,MAAA6jB,cAAA,EACA,MAEA,MAAAC,UAAA,IACA,KAAAC,gBAAA,MACA,KAAAa,kBAAA,GACA,KAAApY,aAAA,CAAAqY,UAAA,GACA,KAAArY,aAAA,CAAAqY,UAAA,CAAAC,kBAAA,IACA,KAAAtY,aAAA,CAAAqY,UAAA,CAAAvpB,MAAA,CAAA8F,KAAAA,GAKYsB,EAAQ,IACpB,IAAAyD,EAAA,KAAA4e,kBAAA,CAAAzkB,GAAAoM,GAAA,MAIA,GAAoBrD,GAAA2B,EAAO,CAAApC,IAAA,CAAAzC,GAAA,CAC3B,IAA4B0e,WAAAA,CAAA,EAAa,KAAArY,aAAA,CACzC,GAAAqY,GAAAA,EAAAnjB,MAAA,EACA,IAAAsjB,EAAAH,EAAAnjB,MAAA,CAAAujB,SAAA,CAAA3kB,EAAA,CACA,GAAA0kB,EAAA,CACA,IAAA7lB,EAA2CkB,EAAU2kB,GACrD7e,EAAAhH,WAAAgH,GAAA,IAAAhH,CACA,CACA,CACA,CACA,KAAAyB,WAAA,CAAAN,EAAA,CAAA6F,CACA,GAEAwe,GACgBpnB,EAAAO,EAAK,CAAAonB,UAAA,KAAAP,EAAArqB,EAAAsC,IAETsmB,GAAoB,KAAA1W,aAAA,cAChC,IAAoB2Y,eAAAA,CAAA,EAAiB,KAAA3Y,aAAA,CACrC2Y,GAAAA,EAAAC,SAAA,gBACA,EA2CAznB,OA1CA,CAAArD,EAAAsC,KAEA,IAAoB8nB,gBAAAA,CAAA,CAAAW,kBAAAA,CAAA,CAAAC,gBAAAA,CAAA,CAAAC,OAAAA,CAAA,EAA+D,KAAAnE,QAAA,GAEnF,IAAAsD,GAAA,MAAAb,cAAA,CACA,OACA,IAAoB3mB,OAAAA,CAAA,EAASN,EAE7B,GAAAyoB,GAAA,YAAAtB,gBAAA,EACA,KAAAA,gBAAA,CAAAyB,SAuWAtoB,CAAA,CAAAuoB,EAAA,IACA,IAAA9E,EAAA,KAOA,OANA3kB,KAAAC,GAAA,CAAAiB,EAAApC,CAAA,EAAA2qB,EACA9E,EAAA,IAEA3kB,KAAAC,GAAA,CAAAiB,EAAArC,CAAA,EAAA4qB,GACA9E,CAAAA,EAAA,KAEAA,CACA,EAhXAzjB,GAEA,YAAA6mB,gBAAA,EACAuB,GAAAA,EAAA,KAAAvB,gBAAA,EAEA,MACA,CAEA,KAAA2B,UAAA,KAAA9oB,EAAAhC,KAAA,CAAAsC,GACA,KAAAwoB,UAAA,KAAA9oB,EAAAhC,KAAA,CAAAsC,GAOA,KAAAsP,aAAA,CAAAI,MAAA,GAKA2Y,GAAAA,EAAAjrB,EAAAsC,EACA,EAYAsB,aAXA,CAAA5D,EAAAsC,IAAA,KAAAge,IAAA,CAAAtgB,EAAAsC,GAYAuB,gBAXA,IAAsCuE,EAAQ,IAC9C,IAAAqK,EACA,sBAAA4Y,iBAAA,CAAArlB,IACA,QAAAyM,CAAAA,EAAA,KAAAgY,kBAAA,CAAAzkB,GAAA4e,SAAA,GAAAnS,KAAA,IAAAA,EAAA,OAAAA,EAAAyP,IAAA,GACA,EAQA,EAAS,CACTpgB,mBAAA,KAAAoQ,aAAA,CAAAoZ,qBAAA,GACAtpB,iBAAAA,EACAD,cAA2B0mB,GAAgB,KAAAvW,aAAA,CAC3C,EACA,CACAoO,KAAAtgB,CAAA,CAAAsC,CAAA,EACA,IAAAknB,EAAA,KAAAA,UAAA,CAEA,GADA,KAAAvV,MAAA,GACA,CAAAuV,EACA,OACA,IAAgB9kB,SAAAA,CAAA,EAAWpC,EAC3B,KAAAipB,cAAA,CAAA7mB,GACA,IAAgB8mB,UAAAA,CAAA,EAAY,KAAA1E,QAAA,GAC5B0E,GACYvoB,EAAAO,EAAK,CAAAonB,UAAA,KAAAY,EAAAxrB,EAAAsC,GAEjB,CACA2R,QAAA,CACA,KAAAuV,UAAA,IACA,IAAgBe,WAAAA,CAAA,CAAAM,eAAAA,CAAA,EAA6B,KAAA3Y,aAAA,CAC7CqY,GACAA,CAAAA,EAAAC,kBAAA,KAEA,KAAAP,UAAA,OAAAA,UAAA,CAAAvmB,GAAA,GACA,KAAAumB,UAAA,CAAAnjB,KAAAA,EACA,IAAgBsjB,gBAAAA,CAAA,EAAkB,KAAAtD,QAAA,EAClC,EAAAsD,GAAA,KAAAb,cAAA,GACA,KAAAA,cAAA,GACA,KAAAA,cAAA,OAEAsB,GAAAA,EAAAC,SAAA,gBACA,CACAM,WAAAplB,CAAA,CAAAylB,CAAA,CAAA7oB,CAAA,EACA,IAAgB8C,KAAAA,CAAA,EAAO,KAAAohB,QAAA,GAEvB,IAAAlkB,GAAA,CAAA8oB,GAAA1lB,EAAAN,EAAA,KAAA+jB,gBAAA,EACA,OACA,IAAAkC,EAAA,KAAAlB,kBAAA,CAAAzkB,GACAuX,EAAA,KAAAjX,WAAA,CAAAN,EAAA,CAAApD,CAAA,CAAAoD,EAAA,CAEA,KAAA0jB,WAAA,OAAAA,WAAA,CAAA1jB,EAAA,EACAuX,CAAAA,EAAmBqO,S/DxLnBtrB,CAAA,EAAmC4F,IAAAA,CAAA,CAAAD,IAAAA,CAAA,CAAU,CAAA2jB,CAAA,EAa7C,OAZA1jB,KAAAY,IAAAZ,GAAA5F,EAAA4F,EAEA5F,EAAAspB,EACc,GAAArjB,EAAAC,CAAA,EAASN,EAAA5F,EAAAspB,EAAA1jB,GAAA,EACvBxE,KAAAuE,GAAA,CAAA3F,EAAA4F,GAEAY,KAAAA,IAAAb,GAAA3F,EAAA2F,GAEA3F,CAAAA,EAAAspB,EACc,GAAArjB,EAAAC,CAAA,EAASP,EAAA3F,EAAAspB,EAAA3jB,GAAA,EACvBvE,KAAAwE,GAAA,CAAA5F,EAAA2F,EAAA,EAEA3F,CACA,E+D0KmCid,EAAA,KAAAmM,WAAA,CAAA1jB,EAAA,MAAA4jB,OAAA,CAAA5jB,EAAA,GAEnC2lB,EAAAtZ,GAAA,CAAAkL,EACA,CACA+M,oBAAA,CACA,IAAA7X,EACA,IAAgBoZ,gBAAAA,CAAA,CAAAlkB,YAAAA,CAAA,EAA+B,KAAAmf,QAAA,GAC/C1f,EAAA,KAAA8K,aAAA,CAAAqY,UAAA,EACA,MAAArY,aAAA,CAAAqY,UAAA,CAAAnjB,MAAA,CACA,KAAA8K,aAAA,CAAAqY,UAAA,CAAAuB,OAAA,KACA,OAAArZ,CAAAA,EAAA,KAAAP,aAAA,CAAAqY,UAAA,GAAA9X,KAAA,IAAAA,EAAA,OAAAA,EAAArL,MAAA,CACA2kB,EAAA,KAAArC,WAAA,CACAmC,GAA+B,GAAAG,EAAAC,CAAA,EAAWJ,GAC1C,KAAAnC,WAAA,EACA,MAAAA,WAAA,MAAAwC,qBAAA,IAIAL,GAAAzkB,EACA,KAAAsiB,WAAA,CAAmCyC,S/D3KnCxB,CAAA,EAA8CpiB,IAAAA,CAAA,CAAAC,KAAAA,CAAA,CAAAE,OAAAA,CAAA,CAAAD,MAAAA,CAAA,CAA0B,EACxE,OACAlI,EAAA+G,EAAAqjB,EAAApqB,CAAA,CAAAiI,EAAAC,GACAjI,EAAA8G,EAAAqjB,EAAAnqB,CAAA,CAAA+H,EAAAG,EACA,CACA,E+DsK0DtB,EAAAujB,SAAA,CAAAkB,GAG1D,KAAAnC,WAAA,IAGA,KAAAE,OAAA,CAAuBwC,S/DnHvBzkB,EAJA,GAIA,EAOA,MANAA,CAAA,IAAAA,EACAA,EAAA,EAEA,KAAAA,GACAA,CAAAA,EATA,GASA,EAEA,CACApH,EAAAmH,EAAAC,EAAA,gBACAnH,EAAAkH,EAAAC,EAAA,eACA,CACA,E+DwGyCA,GAKzCokB,IAAA,KAAArC,WAAA,EACAtiB,GACA,KAAAsiB,WAAA,EACA,MAAAC,qBAAA,EACYvhB,EAAQ,IACpB,UAAAshB,WAAA,EACA,KAAAe,kBAAA,CAAAzkB,IACA,MAAA0jB,WAAA,CAAA1jB,EAAA,CAA6CqmB,S/D7I7CjlB,CAAA,CAAAsiB,CAAA,EACA,IAAA4C,EAAA,GAOA,OANAxlB,KAAAA,IAAA4iB,EAAAxjB,GAAA,EACAomB,CAAAA,EAAApmB,GAAA,CAAAwjB,EAAAxjB,GAAA,CAAAkB,EAAAlB,GAAA,EAEAY,KAAAA,IAAA4iB,EAAAzjB,GAAA,EACAqmB,CAAAA,EAAArmB,GAAA,CAAAyjB,EAAAzjB,GAAA,CAAAmB,EAAAlB,GAAA,EAEAomB,CACA,E+DoIkEllB,EAAAujB,SAAA,CAAA3kB,EAAA,MAAA0jB,WAAA,CAAA1jB,EAAA,EAElE,EAEA,CACAkmB,uBAAA,K/D3KAvB,E+D4KA,IAAgBkB,gBAAAnC,CAAA,CAAA6C,yBAAAA,CAAA,EAAyD,KAAAzF,QAAA,GACzE,IAAA4C,GAAA,CAA6B,GAAAsC,EAAAC,CAAA,EAAWvC,GACxC,SACA,IAAA8C,EAAA9C,EAAA7d,OAAA,CACQ,GAAA6K,EAAAC,CAAA,EAAS6V,OAAAA,EAAA,0GACjB,IAAgBjC,WAAAA,CAAA,EAAa,KAAArY,aAAA,CAE7B,IAAAqY,GAAA,CAAAA,EAAAnjB,MAAA,CACA,SACA,IAAAqlB,EAA+BC,SzDhP/B9a,CAAA,CAAA+a,CAAA,CAAA7qB,CAAA,EACA,IAAA8qB,EAAAviB,GAAAuH,EAAA9P,GACA,CAAY+qB,OAAAA,CAAA,EAASF,EAKrB,OAJAE,IACQ/iB,EAAa8iB,EAAArsB,CAAA,CAAAssB,EAAAjqB,MAAA,CAAArC,CAAA,EACbuJ,EAAa8iB,EAAApsB,CAAA,CAAAqsB,EAAAjqB,MAAA,CAAApC,CAAA,GAErBosB,CACA,EyDwO6CJ,EAAAjC,EAAAuC,IAAA,MAAA5a,aAAA,CAAAoZ,qBAAA,IAC7CyB,E/DrLA,CACAxsB,EAAAgH,EAAAojB,CAFAA,E+DsLyDJ,EAAAnjB,MAAA,CAAAujB,SAAA,E/DpLzDpqB,CAAA,CAAAksB,EAAAlsB,CAAA,EACAC,EAAA+G,EAAAojB,EAAAnqB,CAAA,CAAAisB,EAAAjsB,CAAA,CACA,E+DuLA,GAAA+rB,EAAA,CACA,IAAAS,EAAAT,EAA6DU,S5DlP7D,CAAmC1sB,EAAAA,CAAA,CAAAC,EAAAA,CAAA,CAAM,EACzC,OAAa+H,IAAA/H,EAAA0F,GAAA,CAAAuC,MAAAlI,EAAA0F,GAAA,CAAAyC,OAAAlI,EAAAyF,GAAA,CAAAuC,KAAAjI,EAAA2F,GAAA,CACb,E4DgPoF6mB,GACpF,MAAApD,qBAAA,GAAAqD,EACAA,GACAD,CAAAA,EAAsCzkB,EAAuB0kB,EAAA,CAE7D,CACA,OAAAD,CACA,CACAxB,eAAA7mB,CAAA,EACA,IAAgBgB,KAAAA,CAAA,CAAAwnB,aAAAA,CAAA,CAAAvlB,YAAAA,CAAA,CAAAwlB,eAAAA,CAAA,CAAAnrB,iBAAAA,CAAA,CAAAorB,oBAAAA,CAAA,EAA0F,KAAAtG,QAAA,GAC1G4C,EAAA,KAAAA,WAAA,KAiCA,OAAArP,QAAA+M,GAAA,CAhCmChf,EAAQ,IAC3C,IAAAsjB,GAAA1lB,EAAAN,EAAA,KAAA+jB,gBAAA,EACA,OAEA,IAAA/d,EAAA,GAAAge,CAAA,CAAA1jB,EAAA,KACAhE,GACA0J,CAAAA,EAAA,CAA+BxF,IAAA,EAAAD,IAAA,IAS/B,IAAAyX,EAAA,CACA3Z,KAAA,UACAW,SAAAwoB,EAAAxoB,CAAA,CAAAsB,EAAA,GACA8X,gBALAnW,EAAA,QAMAkW,cALAlW,EAAA,OAMAiW,aAAA,IACAxC,UAAA,EACAtQ,UAAA,GACA,GAAAqiB,CAAA,CACA,GAAAzhB,CAAA,EAKA,YAAA2hB,uBAAA,CAAArnB,EAAA0X,EACA,IAEAzD,IAAA,CAAAmT,EACA,CACAC,wBAAArnB,CAAA,CAAA0F,CAAA,EACA,IAAAigB,EAAA,KAAAlB,kBAAA,CAAAzkB,GAEA,OADQ4iB,GAAoB,KAAA1W,aAAA,CAAAlM,GAC5B2lB,EAAAtL,KAAA,CAA+BwH,GAAkB7hB,EAAA2lB,EAAA,EAAAjgB,EAAA,KAAAwG,aAAA,KACjD,CACAiY,eAAA,CACQ/hB,EAAQ,QAAAqiB,kBAAA,CAAAzkB,GAAAsa,IAAA,GAChB,CACA4J,gBAAA,CACQ9hB,EAAQ,IAAa,IAAAqK,EAAQ,cAAAA,CAAAA,EAAA,KAAAgY,kBAAA,CAAAzkB,GAAA4e,SAAA,GAAAnS,KAAA,IAAAA,EAAA,OAAAA,EAAA0P,KAAA,IACrC,CACAkJ,kBAAArlB,CAAA,EACA,IAAAyM,EACA,cAAAA,CAAAA,EAAA,KAAAgY,kBAAA,CAAAzkB,GAAA4e,SAAA,GAAAnS,KAAA,IAAAA,EAAA,OAAAA,EAAA6I,KAAA,CAQAmP,mBAAAzkB,CAAA,EACA,IAAAsnB,EAAA,QAAgCtnB,EAAAunB,WAAA,GAAmB,EACnDvE,EAAA,KAAA9W,aAAA,CAAA4U,QAAA,GAEA,OAAA0G,CADA,CAAAF,EAAA,EAGA,KAAApb,aAAA,CAAAC,QAAA,CAAAnM,EAAA,CAAAgjB,EAAAyE,OAAA,CACAzE,EAAAyE,OAAA,CAAAznB,EAAA,CACAc,KAAAA,CAAA,KACA,CACAgjB,aAAAxpB,CAAA,EACQ8H,EAAQ,IAChB,IAAoB1C,KAAAA,CAAA,EAAO,KAAAohB,QAAA,GAE3B,IAAA4E,GAAA1lB,EAAAN,EAAA,KAAA+jB,gBAAA,EACA,OACA,IAAoBc,WAAAA,CAAA,EAAa,KAAArY,aAAA,CACjCyZ,EAAA,KAAAlB,kBAAA,CAAAzkB,GACA,GAAAukB,GAAAA,EAAAnjB,MAAA,EACA,IAAwBlB,IAAAA,CAAA,CAAAD,IAAAA,CAAA,EAAWskB,EAAAnjB,MAAA,CAAAujB,SAAA,CAAA3kB,EAAA,CACnC2lB,EAAAtZ,GAAA,CAAA/R,CAAA,CAAA0F,EAAA,CAA4C,GAAAO,EAAAC,CAAA,EAASN,EAAAD,EAAA,IACrD,CACA,EACA,CAMAynB,gCAAA,CACA,SAAAxb,aAAA,CAAArG,OAAA,CACA,OACA,IAAgBnG,KAAAA,CAAA,CAAAmmB,gBAAAA,CAAA,EAAwB,KAAA/E,QAAA,GACxC,CAAgByD,WAAAA,CAAA,EAAa,KAAArY,aAAA,CAC7B,IAAa,GAAA8Z,EAAAC,CAAA,EAAWJ,IAAA,CAAAtB,GAAA,MAAAb,WAAA,CACxB,OAKA,KAAAS,aAAA,GAKA,IAAAwD,EAAA,CAA8BptB,EAAA,EAAAC,EAAA,GACtB4H,EAAQ,IAChB,IAAAujB,EAAA,KAAAlB,kBAAA,CAAAzkB,GACA,GAAA2lB,GAAA,UAAAjC,WAAA,EACA,IAAAjL,EAAAkN,EAAAvZ,GAAA,EACAub,CAAAA,CAAA,CAAA3nB,EAAA,CAAoC4nB,S/DtSpCxnB,CAAA,CAAApF,CAAA,EACA,IAAAqF,EAAA,GACAwnB,EAAyB9nB,EAAUK,GACnC0nB,EAAyB/nB,EAAU/E,GAOnC,OANA8sB,EAAAD,EACAxnB,EAAiB,GAAAuc,EAAA/C,CAAA,EAAQ7e,EAAAkF,GAAA,CAAAlF,EAAAiF,GAAA,CAAA4nB,EAAAznB,EAAAF,GAAA,EAEzB2nB,EAAAC,GACAznB,CAAAA,EAAiB,GAAAuc,EAAA/C,CAAA,EAAQzZ,EAAAF,GAAA,CAAAE,EAAAH,GAAA,CAAA6nB,EAAA9sB,EAAAkF,GAAA,GAEd,GAAA+V,EAAAC,CAAA,EAAK,IAAA7V,EAChB,E+D2R8C,CAAGH,IAAAuY,EAAAxY,IAAAwY,CAAA,EAA0B,KAAAiL,WAAA,CAAA1jB,EAAA,CAC3E,CACA,GAIA,IAAgB+nB,kBAAAA,CAAA,EAAoB,KAAA7b,aAAA,CAAA4U,QAAA,EACpC,MAAA5U,aAAA,CAAArG,OAAA,CAAAod,KAAA,CAAA7e,SAAA,CAAA2jB,EACAA,EAAA,GAAkC,IAClC,OACAxD,EAAAuC,IAAA,EAAAvC,EAAAuC,IAAA,CAAAkB,YAAA,GACAzD,EAAA0D,YAAA,GACA,KAAA3D,kBAAA,GAKQliB,EAAQ,IAChB,IAAAsjB,GAAA1lB,EAAAN,EAAA,MACA,OAIA,IAAAimB,EAAA,KAAAlB,kBAAA,CAAAzkB,GACA,CAAoBE,IAAAA,CAAA,CAAAD,IAAAA,CAAA,EAAW,KAAAyjB,WAAA,CAAA1jB,EAAA,CAC/B2lB,EAAAtZ,GAAA,CAA0B,GAAA9L,EAAAC,CAAA,EAASN,EAAAD,EAAA0nB,CAAA,CAAA3nB,EAAA,EACnC,EACA,CACAkoB,cAAA,CACA,SAAAhc,aAAA,CAAArG,OAAA,CACA,OACAud,GAAA/W,GAAA,MAAAH,aAAA,OAKA,IAAAic,EAAoC7sB,EAJpC,KAAA4Q,aAAA,CAAArG,OAAA,CAImD,kBACnD,IAAoBnG,KAAAA,CAAA,CAAA0oB,aAAAA,EAAA,IAA4B,KAAAtH,QAAA,EAChDphB,CAAAA,GAAA0oB,GAAA,KAAA/N,KAAA,CAAArgB,EACA,GACAquB,EAAA,KACA,IAAoBxC,gBAAAA,CAAA,EAAkB,KAAA/E,QAAA,GACtB,GAAAkF,EAAAC,CAAA,EAAWJ,IAAAA,EAAAhgB,OAAA,EAC3B,MAAA6d,WAAA,MAAAwC,qBAAA,GAEA,EACA,CAAgB3B,WAAAA,CAAA,EAAa,KAAArY,aAAA,CAC7Boc,EAAA/D,EAAAnpB,gBAAA,WAAAitB,GACA9D,GAAA,CAAAA,EAAAnjB,MAAA,GACAmjB,EAAAuC,IAAA,EAAAvC,EAAAuC,IAAA,CAAAkB,YAAA,GACAzD,EAAA0D,YAAA,IAEQhrB,EAAAO,EAAK,CAAAiQ,IAAA,CAAA4a,GAKb,IAAAE,EAAmCxtB,EAAWqB,OAAA,kBAAAsrB,8BAAA,IAK9Cc,EAAAjE,EAAAnpB,gBAAA,eAAsFoD,MAAAA,CAAA,CAAAiqB,iBAAAA,CAAA,CAAyB,IAC/G,KAAAjF,UAAA,EAAAiF,IACgBrmB,EAAQ,IACxB,IAAAgL,EAAA,KAAAqX,kBAAA,CAAAzkB,GACAoN,IAEA,KAAA9M,WAAA,CAAAN,EAAA,EAAAxB,CAAA,CAAAwB,EAAA,CAAAU,SAAA,CACA0M,EAAAf,GAAA,CAAAe,EAAAhB,GAAA,GAAA5N,CAAA,CAAAwB,EAAA,CAAAU,SAAA,EACA,GACA,KAAAwL,aAAA,CAAAI,MAAA,GAEA,GACA,WACAic,IACAJ,IACAG,IACAE,GAAAA,GACA,CACA,CACA1H,UAAA,CACA,IAAAkC,EAAA,KAAA9W,aAAA,CAAA4U,QAAA,GACA,CAAgBphB,KAAAA,EAAA,GAAAqlB,kBAAAA,EAAA,GAAAX,gBAAAA,EAAA,GAAAyB,gBAAAA,EAAA,GAAAlkB,YAAAA,E/DhWhB,G+DgWuI,CAAAulB,aAAAA,EAAA,IAAyBlE,EAChK,OACA,GAAAA,CAAA,CACAtjB,KAAAA,EACAqlB,kBAAAA,EACAX,gBAAAA,EACAyB,gBAAAA,EACAlkB,YAAAA,EACAulB,aAAAA,CACA,CACA,CACA,CACA,SAAAxB,GAAArF,CAAA,CAAA3gB,CAAA,CAAA+jB,CAAA,EACA,OAAA/jB,CAAA,IAAAA,GAAAA,IAAA2gB,CAAA,GACAoD,CAAAA,OAAAA,GAAAA,IAAApD,CAAA,CACA,CC/cA,MAAAqI,WAA0BhvB,EAC1BC,YAAAC,CAAA,EACA,MAAAA,GACA,KAAA+uB,mBAAA,CAAmC7hB,EAAAC,CAAI,CACvC,KAAA7I,eAAA,CAA+B4I,EAAAC,CAAI,CACnC,KAAA6a,QAAA,KAA4B0B,GAAyB1pB,EACrD,CACAgvB,OAAA,CAGA,IAAgBC,aAAAA,CAAA,EAAe,KAAAjvB,IAAA,CAAAknB,QAAA,GAC/B+H,GACA,MAAAF,mBAAA,CAAAE,EAAAC,SAAA,MAAAlH,QAAA,GAEA,KAAA1jB,eAAA,MAAA0jB,QAAA,CAAAsG,YAAA,IAA+DphB,EAAAC,CAAI,CAEnEgiB,SAAA,CACA,KAAAJ,mBAAA,GACA,KAAAzqB,eAAA,EACA,CACA,CCjBA,IAAA8qB,GAAA,IAAAhvB,EAAAsC,KACA5B,GACQuC,EAAAO,EAAK,CAAAonB,UAAA,KAAAlqB,EAAAV,EAAAsC,GAEb,CACA,OAAA2sB,WAAyBvvB,EACzBC,aAAA,CACA,SAAAuvB,WACA,KAAAC,yBAAA,CAAyCriB,EAAAC,CAAI,CAE7CqiB,cAAAC,CAAA,EACA,KAAAC,OAAA,KAA2B1tB,EAAUytB,EAAA,KAAAE,iBAAA,IACrCztB,mBAAA,KAAAlC,IAAA,CAAA0rB,qBAAA,GACAvpB,cAA2B0mB,GAAgB,KAAA7oB,IAAA,CAC3C,EACA,CACA2vB,mBAAA,CACA,IAAgBC,kBAAAA,CAAA,CAAAC,WAAAA,CAAA,CAAAC,MAAAA,CAAA,CAAAC,SAAAA,CAAA,EAAiD,KAAA/vB,IAAA,CAAAknB,QAAA,GACjE,OACA7iB,eAAA+qB,GAAAQ,GACApsB,QAAA4rB,GAAAS,GACApsB,OAAAqsB,EACA/rB,MAAA,CAAA3D,EAAAsC,KACA,YAAAgtB,OAAA,CACAK,GACoB1sB,EAAAO,EAAK,CAAAonB,UAAA,KAAA+E,EAAA3vB,EAAAsC,GAEzB,CACA,CACA,CACAssB,OAAA,CACA,KAAAO,yBAAA,CAAyC7tB,EAAe,KAAA1B,IAAA,CAAAiM,OAAA,uBAAAujB,aAAA,CAAApvB,GACxD,CACAF,QAAA,CACA,KAAAwvB,OAAA,OAAAA,OAAA,CAAAjrB,cAAA,MAAAkrB,iBAAA,GACA,CACAR,SAAA,CACA,KAAAI,yBAAA,GACA,KAAAG,OAAA,OAAAA,OAAA,CAAA5rB,GAAA,EACA,CACA,iEE1CA,IAAAksB,GAAA,CAKAC,uBAAA,GAKAC,eAAA,EACA,ECdA,SAAAC,GAAAC,CAAA,CAAAhqB,CAAA,SACA,EAAAC,GAAA,GAAAD,EAAAE,GAAA,CACA,EACA,EAAAF,CAAAA,EAAAC,GAAA,CAAAD,EAAAE,GAAA,KACA,CAQA,IAAA+pB,GAAA,CACAC,QAAA,CAAAzR,EAAA7e,KACA,IAAAA,EAAAoB,MAAA,CACA,OAAAyd,EAKA,oBAAAA,EAAA,CACA,IAAgB1P,GAAAC,EAAE,CAAAV,IAAA,CAAAmQ,GAIlB,OAAAA,EAHAA,EAAArP,WAAAqP,EAKA,CAKA,IAAAle,EAAAwvB,GAAAtR,EAAA7e,EAAAoB,MAAA,CAAAT,CAAA,EACAC,EAAAuvB,GAAAtR,EAAA7e,EAAAoB,MAAA,CAAAR,CAAA,EACA,SAAkBD,EAAE,IAAIC,EAAE,GAE1B,6BEzBA,OAAA2vB,WAAuCC,GAAAC,SAAS,CAMhDC,mBAAA,CACA,IAAgBpe,cAAAA,CAAA,CAAAqe,YAAAA,CAAA,CAAAC,kBAAAA,CAAA,CAAAC,SAAAA,CAAA,EAA0D,KAAAzH,KAAA,CAC1E,CAAgBuB,WAAAA,CAAA,EAAarY,EACrB,GAAAwe,GAAAC,CAAA,EAAiBC,IACzBrG,IACAgG,EAAAM,KAAA,EACAN,EAAAM,KAAA,CAAArd,GAAA,CAAA+W,GACAiG,GAAAA,EAAAM,QAAA,EAAAL,GACAD,EAAAM,QAAA,CAAAvG,GAEAA,EAAAuC,IAAA,CAAAiE,SAAA,GACAxG,EAAAnpB,gBAAA,0BACA,KAAA4vB,YAAA,EACA,GACAzG,EAAA0G,UAAA,EACA,GAAA1G,EAAArpB,OAAA,CACAgwB,eAAA,SAAAF,YAAA,EACA,IAEQpB,GAAqBE,cAAA,GAC7B,CACAqB,wBAAAC,CAAA,EACA,IAAgBC,iBAAAA,CAAA,CAAAnf,cAAAA,CAAA,CAAAxM,KAAAA,CAAA,CAAAskB,UAAAA,CAAA,EAAmD,KAAAhB,KAAA,CACnEuB,EAAArY,EAAAqY,UAAA,QACAA,IASAA,EAAAP,SAAA,CAAAA,EACAtkB,GACA0rB,EAAAC,gBAAA,GAAAA,GACAA,KAAAvqB,IAAAuqB,EACA9G,EAAA+G,UAAA,GAGA,KAAAN,YAAA,GAEAI,EAAApH,SAAA,GAAAA,IACAA,EACAO,EAAAgH,OAAA,GAEAhH,EAAAiH,QAAA,IAMgBvuB,EAAAO,EAAK,CAAAonB,UAAA,MACrB,IAAA6G,EAAAlH,EAAAmH,QAAA,GACAD,GAAAA,EAAAE,OAAA,CAAA9sB,MAAA,EACA,KAAAmsB,YAAA,EAEA,KAhCA,IAoCA,CACAY,oBAAA,CACA,IAAgBrH,WAAAA,CAAA,EAAa,KAAAvB,KAAA,CAAA9W,aAAA,CAC7BqY,IACAA,EAAAuC,IAAA,CAAAiE,SAAA,GACYc,GAAAtV,CAAS,CAAAqO,UAAA,MACrB,CAAAL,EAAAuH,gBAAA,EAAAvH,EAAAwH,MAAA,IACA,KAAAf,YAAA,EAEA,GAEA,CACAgB,sBAAA,CACA,IAAgB9f,cAAAA,CAAA,CAAAqe,YAAAA,CAAA,CAAAC,kBAAAyB,CAAA,EAAiE,KAAAjJ,KAAA,CACjF,CAAgBuB,WAAAA,CAAA,EAAarY,EAC7BqY,IACAA,EAAA2H,yBAAA,GACA3B,GAAAA,EAAAM,KAAA,EACAN,EAAAM,KAAA,CAAAsB,MAAA,CAAA5H,GACA0H,GAAAA,EAAAG,UAAA,EACAH,EAAAG,UAAA,CAAA7H,GAEA,CACAyG,cAAA,CACA,IAAgBA,aAAAA,CAAA,EAAe,KAAAhI,KAAA,CAC/BgI,GAAAA,GACA,CACA1e,QAAA,CACA,WACA,CACA,CACA,SAAA+f,GAAArJ,CAAA,EACA,IAAAgB,EAAAgH,EAAA,CAAsCsB,WJrFtC,IAAAC,EAAoB,GAAAnC,GAAAoC,UAAA,EAAWC,GAAAC,CAAe,EAC9C,GAAAH,OAAAA,EACA,gBACA,IAAYvI,UAAAA,CAAA,CAAAkH,eAAAA,CAAA,CAAAJ,SAAAA,CAAA,EAAsCyB,EAGlDI,EAAe,GAAAvC,GAAAwC,KAAA,IACX,GAAAxC,GAAAyC,SAAA,EAAS,IAAA/B,EAAA6B,GAAA,IACb,IAAA3B,EAAyB,GAAAZ,GAAA0C,WAAA,EAAW,IAAA5B,GAAAA,EAAAyB,GAAA,CAAAA,EAAAzB,EAAA,EACpC,OAAAlH,GAAAkH,EAAA,IAAAF,EAAA,SI6EAT,EAAwB,GAAAH,GAAAoC,UAAA,EAAWO,GAAAvlB,CAAkB,EACrD,MAAY,GAAAwlB,GAAAC,GAAA,EAAG9C,GAAA,CAA6B,GAAAnH,CAAA,CAAAuH,YAAAA,EAAAC,kBAAuD,GAAAJ,GAAAoC,UAAA,EAAWU,GAAA3W,CAAwB,EAAAyN,UAAAA,EAAAgH,aAAAA,CAAA,EACtI,CACA,IAAAJ,GAAA,CACAuC,aAAA,CACA,GAAWlD,EAAmB,CAC9BmD,QAAA,CACA,sBACA,uBACA,yBACA,0BACA,EAEAC,oBAAyBpD,GACzBqD,qBAA0BrD,GAC1BsD,uBAA4BtD,GAC5BuD,wBAA6BvD,GAC7BwD,UD/HA,CACAvD,QAAA,CAAAzR,EAAA,CAAwBiV,UAAAA,CAAA,CAAAC,gBAAAA,CAAA,CAA4B,IAEpD,IAAAC,EAAuBhf,GAAAC,CAAO,CAAA/D,KAAA,CAAA2N,GAE9B,GAAAmV,EAAA/uB,MAAA,GACA,OAJA4Z,EAKA,IAAAoV,EAAyBjf,GAAAC,CAAO,CAAAif,iBAAA,CAAArV,GAChC7b,EAAA,iBAAAgxB,CAAA,QAEAG,EAAAJ,EAAApzB,CAAA,CAAAkG,KAAA,CAAAitB,EAAAnzB,CAAA,CACAyzB,EAAAL,EAAAnzB,CAAA,CAAAiG,KAAA,CAAAitB,EAAAlzB,CAAA,CACAozB,CAAA,GAAAhxB,EAAA,EAAAmxB,EACAH,CAAA,GAAAhxB,EAAA,EAAAoxB,EAOA,IAAAC,EAA6B,GAAA1tB,EAAAC,CAAA,EAASutB,EAAAC,EAAA,IAOtC,MALA,iBAAAJ,CAAA,GAAAhxB,EAAA,EACAgxB,CAAAA,CAAA,GAAAhxB,EAAA,EAAAqxB,CAAA,EAEA,iBAAAL,CAAA,GAAAhxB,EAAA,EACAgxB,CAAAA,CAAA,GAAAhxB,EAAA,EAAAqxB,CAAA,EACAJ,EAAAD,EACA,CACA,CCmGA,kBC7HA,IAAAM,GAAA,kDACAC,GAAAD,GAAArvB,MAAA,CACAuvB,GAAA,oBAAA7qB,EAAA6F,WAAA7F,GAAAA,EACA8qB,GAAA,oBAAA9qB,GAAqDwF,GAAAC,EAAE,CAAAV,IAAA,CAAA/E,GA0CvD,SAAA+qB,GAAAtrB,CAAA,CAAAurB,CAAA,EACA,OAAAvrB,KAAAlC,IAAAkC,CAAA,CAAAurB,EAAA,CACAvrB,CAAA,CAAAurB,EAAA,CACAvrB,EAAAmqB,YAAA,CAyBA,IAAAqB,GAAAC,GAAA,KAAuDtmB,IACvDumB,GAAAD,GAAA,OAA2D3nB,EAAAC,CAAI,EAC/D,SAAA0nB,GAAAvuB,CAAA,CAAAD,CAAA,CAAAwH,CAAA,EACA,UAEA,EAAAvH,EACA,EACAsH,EAAAvH,EACA,EACAwH,EAAsB,GAAAmV,EAAA/C,CAAA,EAAQ3Z,EAAAD,EAAAuH,GAE9B,CCrFA,SAAAmnB,GAAA3uB,CAAA,CAAA4uB,CAAA,EACA5uB,EAAAE,GAAA,CAAA0uB,EAAA1uB,GAAA,CACAF,EAAAC,GAAA,CAAA2uB,EAAA3uB,GAAA,CAOA,SAAA4uB,GAAAhrB,CAAA,CAAAirB,CAAA,EACAH,GAAA9qB,EAAAtJ,CAAA,CAAAu0B,EAAAv0B,CAAA,EACAo0B,GAAA9qB,EAAArJ,CAAA,CAAAs0B,EAAAt0B,CAAA,CACA,CAMA,SAAAu0B,GAAAvwB,CAAA,CAAAwwB,CAAA,EACAxwB,EAAAkC,SAAA,CAAAsuB,EAAAtuB,SAAA,CACAlC,EAAAiC,KAAA,CAAAuuB,EAAAvuB,KAAA,CACAjC,EAAA8B,WAAA,CAAA0uB,EAAA1uB,WAAA,CACA9B,EAAA6B,MAAA,CAAA2uB,EAAA3uB,MAAA,CCpBA,SAAA4uB,GAAA30B,CAAA,CAAAoG,CAAA,CAAAD,CAAA,CAAAH,CAAA,CAAAoD,CAAA,EAMA,OALApJ,GAAAoG,EACApG,EpEAAgG,EADAG,EoECsBA,EpEFtBnG,CAAAA,EoEEsBgG,CpEFtB,EoEGAQ,KAAAA,IAAA4C,GACApJ,CAAAA,EpEFAgG,EADAG,EoEG0BiD,EpEJ1BpJ,CAAAA,EoEI0BgG,CpEJ1B,CoEI0B,EAE1BhG,CACA,CAsBA,SAAA40B,GAAAlvB,CAAA,CAAAmvB,CAAA,EAAAxpB,EAAAypB,EAAAC,EAAA,CAAAhvB,CAAA,CAAAivB,CAAA,GACAC,SAnBAvvB,CAAA,CAAAU,EAAA,EAAAD,EAAA,EAAAJ,EAAA,GAAAqD,CAAA,CAAAkrB,EAAA5uB,CAAA,CAAAsvB,EAAAtvB,CAAA,EAMA,GALQ+I,GAAA2B,EAAO,CAAApC,IAAA,CAAA5H,KACfA,EAAA0I,WAAA1I,GAEAA,EAAA8uB,CADiC,EAAAjvB,EAAAC,CAAA,EAAS8uB,EAAApvB,GAAA,CAAAovB,EAAArvB,GAAA,CAAAS,EAAA,KAC1C4uB,EAAApvB,GAAA,EAEA,iBAAAQ,EACA,OACA,IAAAJ,EAAsB,GAAAC,EAAAC,CAAA,EAASouB,EAAA1uB,GAAA,CAAA0uB,EAAA3uB,GAAA,CAAAI,GAC/BL,IAAA4uB,GACAtuB,CAAAA,GAAAI,CAAA,EACAV,EAAAE,GAAA,CAAA+uB,GAAAjvB,EAAAE,GAAA,CAAAQ,EAAAD,EAAAH,EAAAoD,GACA1D,EAAAC,GAAA,CAAAgvB,GAAAjvB,EAAAC,GAAA,CAAAS,EAAAD,EAAAH,EAAAoD,EACA,EAMA1D,EAAAmvB,CAAA,CAAAxpB,EAAA,CAAAwpB,CAAA,CAAAC,EAAA,CAAAD,CAAA,CAAAE,EAAA,CAAAF,EAAA1uB,KAAA,CAAAJ,EAAAivB,EACA,CAIA,IAAAG,GAAA,yBACAC,GAAA,yBAKA,SAAAC,GAAA9rB,CAAA,CAAAsrB,CAAA,CAAAL,CAAA,CAAAc,CAAA,EACAV,GAAArrB,EAAAtJ,CAAA,CAAA40B,EAAAM,GAAAX,EAAAA,EAAAv0B,CAAA,CAAAuG,KAAAA,EAAA8uB,EAAAA,EAAAr1B,CAAA,CAAAuG,KAAAA,GACAouB,GAAArrB,EAAArJ,CAAA,CAAA20B,EAAAO,GAAAZ,EAAAA,EAAAt0B,CAAA,CAAAsG,KAAAA,EAAA8uB,EAAAA,EAAAp1B,CAAA,CAAAsG,KAAAA,EACA,CCjDA,SAAA+uB,GAAArxB,CAAA,EACA,OAAAA,IAAAA,EAAAkC,SAAA,EAAAlC,IAAAA,EAAAiC,KAAA,CAEA,SAAAqvB,GAAAtxB,CAAA,EACA,OAAAqxB,GAAArxB,EAAAjE,CAAA,GAAAs1B,GAAArxB,EAAAhE,CAAA,CACA,CACA,SAAAu1B,GAAAv0B,CAAA,CAAAC,CAAA,EACA,OAAAD,EAAA0E,GAAA,GAAAzE,EAAAyE,GAAA,EAAA1E,EAAAyE,GAAA,GAAAxE,EAAAwE,GAAA,CAKA,SAAA+vB,GAAAx0B,CAAA,CAAAC,CAAA,EACA,OAAAC,KAAA6gB,KAAA,CAAA/gB,EAAA0E,GAAA,IAAAxE,KAAA6gB,KAAA,CAAA9gB,EAAAyE,GAAA,GACAxE,KAAA6gB,KAAA,CAAA/gB,EAAAyE,GAAA,IAAAvE,KAAA6gB,KAAA,CAAA9gB,EAAAwE,GAAA,CACA,CACA,SAAAgwB,GAAAz0B,CAAA,CAAAC,CAAA,EACA,OAAAu0B,GAAAx0B,EAAAjB,CAAA,CAAAkB,EAAAlB,CAAA,GAAAy1B,GAAAx0B,EAAAhB,CAAA,CAAAiB,EAAAjB,CAAA,CACA,CACA,SAAA01B,GAAArsB,CAAA,EACA,OAAW9D,EAAU8D,EAAAtJ,CAAA,EAAUwF,EAAU8D,EAAArJ,CAAA,CACzC,CACA,SAAA21B,GAAA30B,CAAA,CAAAC,CAAA,EACA,OAAAD,EAAAkF,SAAA,GAAAjF,EAAAiF,SAAA,EACAlF,EAAAiF,KAAA,GAAAhF,EAAAgF,KAAA,EACAjF,EAAA8E,WAAA,GAAA7E,EAAA6E,WAAA,gBCzBA,OAAA8vB,GACAz2B,aAAA,CACA,KAAAgyB,OAAA,IAEAne,IAAA5T,CAAA,EACQ,GAAAy2B,GAAAC,EAAA,EAAa,KAAA3E,OAAA,CAAA/xB,GACrBA,EAAA22B,cAAA,EACA,CACApE,OAAAvyB,CAAA,EAKA,GAJQ,GAAAy2B,GAAAG,EAAA,EAAU,KAAA7E,OAAA,CAAA/xB,GAClBA,IAAA,KAAA62B,QAAA,EACA,MAAAA,QAAA,CAAA3vB,KAAAA,CAAA,EAEAlH,IAAA,KAAA82B,IAAA,EACA,IAAAD,EAAA,KAAA9E,OAAA,MAAAA,OAAA,CAAA9sB,MAAA,IACA4xB,GACA,KAAAlF,OAAA,CAAAkF,EAEA,CACA,CACAjF,SAAA5xB,CAAA,MAOA62B,EANA,IAAAE,EAAA,KAAAhF,OAAA,CAAAiF,SAAA,IAAAh3B,IAAAi3B,GACA,GAAAF,IAAAA,EACA,SAKA,QAAA7xB,EAAA6xB,EAAkC7xB,GAAA,EAAQA,IAAA,CAC1C,IAAA+xB,EAAA,KAAAlF,OAAA,CAAA7sB,EAAA,CACA,GAAA+xB,CAAA,IAAAA,EAAA7M,SAAA,EACAyM,EAAAI,EACA,KACA,CACA,OACA,EAAAJ,IACA,KAAAlF,OAAA,CAAAkF,GACA,GAKA,CACAlF,QAAA3xB,CAAA,CAAAk3B,CAAA,EACA,IAAAL,EAAA,KAAAC,IAAA,CACA,GAAA92B,IAAA62B,IAEA,KAAAA,QAAA,CAAAA,EACA,KAAAC,IAAA,CAAA92B,EACAA,EAAAm3B,IAAA,GACAN,GAAA,CACAA,EAAAnsB,QAAA,EAAAmsB,EAAAF,cAAA,GACA32B,EAAA22B,cAAA,GACA32B,EAAAo3B,UAAA,CAAAP,EACAK,GACAl3B,CAAAA,EAAAo3B,UAAA,CAAAC,eAAA,KAEAR,EAAAS,QAAA,GACAt3B,EAAAs3B,QAAA,CAAAT,EAAAS,QAAA,CACAt3B,EAAAs3B,QAAA,CAAAC,YAAA,CACAV,EAAAW,eAAA,EAAAX,EAAAU,YAAA,EAEAv3B,EAAAktB,IAAA,EAAAltB,EAAAktB,IAAA,CAAAuK,UAAA,EACAz3B,CAAAA,EAAA03B,aAAA,KAEA,IAAoBC,UAAAA,CAAA,EAAY33B,EAAAsB,OAAA,EAChC,IAAAq2B,GACAd,EAAAe,IAAA,EAcA,CACA,CACAC,uBAAA,CACA,KAAA9F,OAAA,CAAA5f,OAAA,KACA,IAAoB7Q,QAAAA,CAAA,CAAAw2B,aAAAA,CAAA,EAAwB93B,CAC5CsB,CAAAA,EAAAgwB,cAAA,EAAAhwB,EAAAgwB,cAAA,GACAwG,GACAA,EAAAx2B,OAAA,CAAAgwB,cAAA,EACAwG,EAAAx2B,OAAA,CAAAgwB,cAAA,EAEA,EACA,CACAqF,gBAAA,CACA,KAAA5E,OAAA,CAAA5f,OAAA,KACAnS,EAAA0K,QAAA,EAAA1K,EAAA22B,cAAA,IACA,EACA,CAKAoB,oBAAA,CACA,KAAAjB,IAAA,OAAAA,IAAA,CAAAQ,QAAA,EACA,MAAAR,IAAA,CAAAQ,QAAA,CAAApwB,KAAAA,CAAA,CAEA,CACA,CE7GA,IAAA8wB,GAAA,CAAAp2B,EAAAC,IAAAD,EAAAiV,KAAA,CAAAhV,EAAAgV,KAAA,OCGAohB,GACAl4B,aAAA,CACA,KAAAm4B,QAAA,IACA,KAAAC,OAAA,GACA,CACAvkB,IAAAwkB,CAAA,EACQ,GAAA3B,GAAAC,EAAA,EAAa,KAAAwB,QAAA,CAAAE,GACrB,KAAAD,OAAA,GACA,CACA5F,OAAA6F,CAAA,EACQ,GAAA3B,GAAAG,EAAA,EAAU,KAAAsB,QAAA,CAAAE,GAClB,KAAAD,OAAA,GACA,CACAhmB,QAAA1J,CAAA,EACA,KAAA0vB,OAAA,OAAAD,QAAA,CAAAG,IAAA,CAA2CL,IAC3C,KAAAG,OAAA,IACA,KAAAD,QAAA,CAAA/lB,OAAA,CAAA1J,EACA,CACA,sCInBA,SAAA6vB,GAAAhmB,CAAA,EACA,OAAAA,EAAA8W,KAAA,CAA+BmP,GAAAC,CAA4B,ECyB3D,IAAAC,GAAA,CACAt0B,KAAA,kBACAu0B,WAAA,EACAC,qBAAA,EACAC,uBAAA,CACA,EACAC,GAAA,oBAAAr2B,QAAAA,KAAA0E,IAAA1E,OAAAs2B,WAAA,CACAC,GAAA,iBACAC,GAAA,CAA2BC,WAAA,UAM3BlG,GAAA,EACA,SAAAmG,GAAAntB,CAAA,CAAAuG,CAAA,CAAAlJ,CAAA,CAAA+vB,CAAA,EACA,IAAY5B,aAAAA,CAAA,EAAejlB,CAE3BilB,CAAAA,CAAA,CAAAxrB,EAAA,GACA3C,CAAA,CAAA2C,EAAA,CAAAwrB,CAAA,CAAAxrB,EAAA,CACAuG,EAAAiX,cAAA,CAAAxd,EAAA,GACAotB,GACAA,CAAAA,CAAA,CAAAptB,EAAA,IAGA,CAkBA,SAAAqtB,GAAA,CAAgCC,qBAAAA,CAAA,CAAAC,cAAAA,CAAA,CAAAC,cAAAA,CAAA,CAAAC,kBAAAA,CAAA,CAAAC,eAAAA,CAAA,CAAwF,EACxH,aACA15B,YAAAw3B,EAAA,EAAqC,CAAAjwB,EAAAgyB,MAAAA,EAAA,OAAAA,GAAA,EAIrC,KAAAvG,EAAA,CAAAA,KAIA,KAAA2G,WAAA,GAOA,KAAAxB,QAAA,KAAAnpB,IAKA,KAAAzN,OAAA,IAMA,KAAAq4B,eAAA,IACA,KAAA/O,kBAAA,IAOA,KAAA8M,aAAA,IAKA,KAAAkC,iBAAA,IAKA,KAAAC,uBAAA,IAKA,KAAAC,gBAAA,IAIA,KAAAC,qBAAA,IACA,KAAAC,qBAAA,IAKA,KAAAvC,UAAA,IAIA,KAAAwC,KAAA,IAKA,KAAAC,UAAA,IAIA,KAAAC,oBAAA,IAOA,KAAAC,yBAAA,IASA,KAAAtG,SAAA,EAA+BnzB,EAAA,EAAAC,EAAA,GAI/B,KAAAy5B,aAAA,KAAAnoB,IACA,KAAAooB,eAAA,IAEA,KAAAC,eAAA,IACA,KAAAC,cAAA,UAAAt6B,MAAA,GACA,KAAAu6B,yBAAA,IACA,KAAAC,iBAAA,MACA,KAAAjD,UAAA,GACA,KAAAA,UAAA,IACA,KAAAkD,iBAAA,GAEA,EAMA,KAAAC,gBAAA,MACA,KAAAH,yBAAA,IAKA5B,IACAJ,CAAAA,GAAAC,UAAA,CACAD,GAAAE,oBAAA,CACAF,GAAAG,sBAAA,CACA,GAEA,KAAAiC,KAAA,CAAA1oB,OAAA,CAAA2oB,IACA,KAAAD,KAAA,CAAA1oB,OAAA,CAAA4oB,IACA,KAAAF,KAAA,CAAA1oB,OAAA,CAAA6oB,IACA,KAAAH,KAAA,CAAA1oB,OAAA,CAAA8oB,IACApC,IACAr2B,OAAAs2B,WAAA,CAAAoC,MAAA,CAAAzC,GAEA,EAIA,KAAA0C,wBAAA,GACA,KAAAC,YAAA,IACA,KAAAC,SAAA,IACA,KAAAC,iBAAA,GAKA,KAAAC,WAAA,KAAArpB,IACA,KAAAqlB,YAAA,CAAAA,EACA,KAAArK,IAAA,CAAA5lB,EAAAA,EAAA4lB,IAAA,EAAA5lB,EAAA,KACA,KAAAk0B,IAAA,CAAAl0B,EAAA,IAAAA,EAAAk0B,IAAA,CAAAl0B,EAAA,IACA,KAAAA,MAAA,CAAAA,EACA,KAAAuP,KAAA,CAAAvP,EAAAA,EAAAuP,KAAA,KACA,QAAA3R,EAAA,EAA4BA,EAAA,KAAAs2B,IAAA,CAAAv2B,MAAA,CAAsBC,IAClD,KAAAs2B,IAAA,CAAAt2B,EAAA,CAAAi1B,oBAAA,GAEA,MAAAjN,IAAA,SACA,MAAA2N,KAAA,KAAiC5C,EAAQ,CACzC,CACAz2B,iBAAAiE,CAAA,CAAA3E,CAAA,EAIA,OAHA,KAAAu5B,aAAA,CAAA1uB,GAAA,CAAAlG,IACA,KAAA40B,aAAA,CAAA5nB,GAAA,CAAAhN,EAAA,IAAiDg2B,GAAAC,CAAmB,EAEpE,KAAArB,aAAA,CAAA7nB,GAAA,CAAA/M,GAAAmO,GAAA,CAAA9S,EACA,CACA66B,gBAAAl2B,CAAA,IAAAm2B,CAAA,EACA,IAAAC,EAAA,KAAAxB,aAAA,CAAA7nB,GAAA,CAAA/M,EACAo2B,CAAAA,GAAAA,EAAAC,MAAA,IAAAF,EACA,CACAG,aAAAt2B,CAAA,EACA,YAAA40B,aAAA,CAAA1uB,GAAA,CAAAlG,EACA,CAIAupB,MAAAtkB,CAAA,CAAAgtB,EAAA,KAAAxK,IAAA,CAAAoN,eAAA,EACA,QAAA5vB,QAAA,CACA,MACA,MAAAuvB,KAAA,CHnPAjoB,aAAAgqB,YAAAhqB,QAAAA,EAAAiqB,OAAA,CGoPA,KAAAvxB,QAAA,CAAAA,EACA,IAAoBmmB,SAAAA,CAAA,CAAArpB,OAAAA,CAAA,CAAA8K,cAAAA,CAAA,EAAkC,KAAAhR,OAAA,CAStD,GARAgR,GAAA,CAAAA,EAAArG,OAAA,EACAqG,EAAA0c,KAAA,CAAAtkB,GAEA,KAAAwiB,IAAA,CAAA2N,KAAA,CAAAjnB,GAAA,OACA,KAAAtM,MAAA,OAAAA,MAAA,CAAA4wB,QAAA,CAAAtkB,GAAA,OACA8jB,GAAAlwB,CAAAA,GAAAqpB,CAAA,GACA,MAAA6G,aAAA,KAEA2B,EAAA,KACA6C,EACA,IAAAC,EAAA,SAAAjP,IAAA,CAAA8M,qBAAA,IACAX,EAAA3uB,EAAA,KACA,KAAAwiB,IAAA,CAAA8M,qBAAA,IACAkC,GAAAA,IACAA,EAAkCrjB,SJ9PlCpQ,CAAA,CAAA2zB,CAAA,EACA,IAAA3b,EAAkBvH,GAAAC,CAAI,CAAAC,GAAA,GACtBijB,EAAA,EAA4Bj5B,UAAAA,CAAA,CAAW,IACvC,IAAA0f,EAAA1f,EAAAqd,EACAqC,GI0PuC,MJzP3B,GAAAzf,EAAAqB,EAAA,EAAW23B,GACvB5zB,EAAAqa,EIwPuC,KJtPvC,EAEA,OADIzf,EAAAO,EAAK,CAAAiQ,IAAA,CAAAwoB,EAAA,IACT,IAAiB,GAAAh5B,EAAAqB,EAAA,EAAW23B,EAC5B,EImPuCF,EAAA,GACfnM,GAAqBC,sBAAA,GACrBD,GAAqBC,sBAAA,IAC7C,KAAA4K,KAAA,CAAA1oB,OAAA,CAAAmqB,IAEA,EACA,CACAzL,GACA,KAAA3D,IAAA,CAAAqP,kBAAA,CAAA1L,EAAA,MAGA,UAAAvvB,OAAA,CAAAojB,OAAA,EACApS,GACAue,CAAAA,GAAArpB,CAAA,GACA,KAAAhG,gBAAA,eAAsDoD,MAAAA,CAAA,CAAAiqB,iBAAAA,CAAA,CAAA2N,yBAAAA,CAAA,CAAAh1B,OAAAi1B,CAAA,CAAuE,IAC7H,QAAAC,sBAAA,IACA,KAAAt7B,MAAA,CAAA8F,KAAAA,EACA,KAAAy1B,cAAA,CAAAz1B,KAAAA,EACA,MACA,CAEA,IAAA01B,EAAA,KAAAt7B,OAAA,CAAAwK,UAAA,EACAwG,EAAA/G,oBAAA,IACAsxB,GACA,CAA4BC,uBAAAA,CAAA,CAAAC,0BAAAA,CAAA,EAAqDzqB,EAAA4U,QAAA,GAKjF8V,EAAA,MAAAC,YAAA,EACA,CAAyB5G,GAAgB,KAAA4G,YAAA,CAAAR,IACzCD,EAMAU,EAAA,CAAArO,GAAA2N,EACA,QAAAl7B,OAAA,CAAA67B,UAAA,EACA,KAAA/F,UAAA,OAAAA,UAAA,CAAA1sB,QAAA,EACAwyB,GACArO,GACAmO,CAAAA,GAAA,MAAA9K,gBAAA,GACA,KAAAkF,UAAA,GACA,KAAAU,YAAA,MAAAV,UAAA,CACA,KAAAU,YAAA,CAAAA,YAAA,CAAA5wB,KAAAA,GAEA,KAAAk2B,kBAAA,CAAAx4B,EAAAs4B,GACA,IAAAG,EAAA,CACA,GAA+BxxB,GAAkB+wB,EAAA,UACjDlZ,OAAAoZ,EACAvpB,WAAAwpB,CACA,EACAzqB,CAAAA,EAAAgrB,kBAAA,EACA,KAAAh8B,OAAA,CAAA67B,UAAA,IACAE,EAAAxkB,KAAA,GACAwkB,EAAAl5B,IAAA,KAEA,KAAAwnB,cAAA,CAAA0R,EACA,MAOAxO,GACAyN,GAAA,MAEA,KAAAnK,MAAA,SAAA7wB,OAAA,CAAAgwB,cAAA,EACA,KAAAhwB,OAAA,CAAAgwB,cAAA,EAGA,MAAA2L,YAAA,CAAAR,CACA,EAEA,CACAtN,SAAA,CACA,KAAA7tB,OAAA,CAAAuvB,QAAA,OAAAa,UAAA,GACA,KAAAxE,IAAA,CAAA2N,KAAA,CAAAtI,MAAA,OACA,IAAAV,EAAA,KAAAC,QAAA,EACAD,CAAAA,GAAAA,EAAAU,MAAA,OACA,KAAAjrB,MAAA,OAAAA,MAAA,CAAA4wB,QAAA,CAAA9jB,MAAA,OACA,KAAA1J,QAAA,CAAAxD,KAAAA,EACY,GAAA7D,EAAAqB,EAAA,EAAW,KAAAk2B,gBAAA,CACvB,CAEA2C,aAAA,CACA,KAAAxD,qBAAA,GACA,CACAyD,eAAA,CACA,KAAAzD,qBAAA,GACA,CACA0D,iBAAA,CACA,YAAA1D,qBAAA,OAAAC,qBAAA,CAEA0C,wBAAA,CACA,YAAA9R,kBAAA,EACA,KAAAtjB,MAAA,OAAAA,MAAA,CAAAo1B,sBAAA,IACA,EACA,CAEAgB,aAAA,EACA,KAAAD,eAAA,KAEA,KAAAhG,UAAA,IACA,KAAAoD,KAAA,OAAAA,KAAA,CAAA1oB,OAAA,CAAAwrB,IACA,KAAAjE,WAAA,GACA,CACAkE,sBAAA,CACA,IAAoBtrB,cAAAA,CAAA,EAAgB,KAAAhR,OAAA,CACpC,OAAAgR,GAAAA,EAAA4U,QAAA,GAAAiH,iBAAA,CAEAuD,WAAAmM,EAAA,IAEA,GADA,KAAA3Q,IAAA,CAAAoN,eAAA,IACA,KAAApN,IAAA,CAAAuQ,eAAA,IACA,KAAAn8B,OAAA,CAAAgwB,cAAA,OAAAhwB,OAAA,CAAAgwB,cAAA,GACA,MACA,CAkBA,GALA9uB,OAAAs7B,8BAAA,EACA,MAAA1D,yBAAA,EACA2D,SApVAA,EAAAC,CAAA,EAEA,GADAA,EAAA5D,yBAAA,IACA4D,EAAA9Q,IAAA,GAAA8Q,EACA,OACA,IAAY1rB,cAAAA,CAAA,EAAgB0rB,EAAA18B,OAAA,CAC5B,IAAAgR,EACA,OACA,IAAA2rB,EAAqB3F,GAAoBhmB,GACzC,GAAA9P,OAAA07B,2BAAA,CAAAD,EAAA,cACA,IAAgBz2B,OAAAA,CAAA,CAAAqpB,SAAAA,CAAA,EAAmBmN,EAAA18B,OAAA,CACnCkB,OAAAs7B,8BAAA,CAAAG,EAAA,YAAqE56B,EAAAO,EAAK,EAAA4D,CAAAA,GAAAqpB,CAAA,EAC1E,CACA,IAAYvpB,OAAAA,CAAA,EAAS02B,EACrB12B,GAAA,CAAAA,EAAA8yB,yBAAA,EACA2D,EAAAz2B,EAEA,EAoUA,MAEA,KAAA4lB,IAAA,CAAAuK,UAAA,OAAAvK,IAAA,CAAAwQ,WAAA,GACA,KAAAhG,aAAA,CACA,MACA,MAAAA,aAAA,IACA,QAAAxyB,EAAA,EAA4BA,EAAA,KAAAs2B,IAAA,CAAAv2B,MAAA,CAAsBC,IAAA,CAClD,IAAAlF,EAAA,KAAAw7B,IAAA,CAAAt2B,EAAA,CACAlF,EAAAm6B,oBAAA,IACAn6B,EAAAouB,YAAA,aACApuB,EAAAsB,OAAA,CAAA67B,UAAA,EACAn9B,EAAA0xB,UAAA,IAEA,CACA,IAAoBb,SAAAA,CAAA,CAAArpB,OAAAA,CAAA,EAAmB,KAAAlG,OAAA,CACvC,GAAAuvB,KAAA3pB,IAAA2pB,GAAA,CAAArpB,EACA,OACA,IAAA2mB,EAAA,KAAAyP,oBAAA,EACA,MAAAO,0BAAA,CAAAhQ,EACAA,EAAA,KAAAoJ,YAAA,KACArwB,KAAAA,EACA,KAAAk3B,cAAA,GACAP,GAAA,KAAAlC,eAAA,cACA,CACAz7B,QAAA,CAMA,GALA,KAAAq6B,eAAA,IACA,KAAAkD,eAAA,GAIA,CACA,KAAAD,aAAA,GACA,KAAA7C,iBAAA,GACA,KAAAE,KAAA,CAAA1oB,OAAA,CAAAksB,IACA,MACA,CACA,KAAA5G,UAAA,EACA,KAAAoD,KAAA,CAAA1oB,OAAA,CAAAmsB,IAEA,KAAA7G,UAAA,IAIA,KAAAoD,KAAA,CAAA1oB,OAAA,CAAAosB,IAKA,KAAA1D,KAAA,CAAA1oB,OAAA,CAAAkc,IAKA,KAAAwM,KAAA,CAAA1oB,OAAA,CAAAqsB,IACA,KAAA7D,iBAAA,GAMA,IAAAvhB,EAAwBF,GAAAC,CAAI,CAAAC,GAAA,EAChB/V,CAAAA,EAAAC,SAAS,CAAAsB,KAAA,CAAS,GAAAyX,EAAAC,CAAA,EAAK,SAAAlD,EAAqB/V,EAAAC,SAAS,CAAAF,SAAA,EACrDC,EAAAC,SAAS,CAAAF,SAAA,CAAAgW,EACT/V,EAAAC,SAAS,CAAAqd,YAAA,IACTtd,EAAAo7B,EAAU,CAAAv+B,MAAA,CAAAw+B,OAAA,CAAgBr7B,EAAAC,SAAS,EACnCD,EAAAo7B,EAAU,CAAAE,SAAA,CAAAD,OAAA,CAAmBr7B,EAAAC,SAAS,EACtCD,EAAAo7B,EAAU,CAAA/rB,MAAA,CAAAgsB,OAAA,CAAgBr7B,EAAAC,SAAS,EACnCD,EAAAC,SAAS,CAAAqd,YAAA,GACrB,CACAwQ,WAAA,CACA,KAAAoJ,eAAA,GACA,KAAAA,eAAA,IACgBtI,GAAAtV,CAAS,CAAA9I,IAAA,MAAA2mB,cAAA,EAEzB,CACAG,mBAAA,CACA,KAAAE,KAAA,CAAA1oB,OAAA,CAAAysB,IACA,KAAArD,WAAA,CAAAppB,OAAA,CAAA0sB,GACA,CACAC,0BAAA,CACA,KAAArE,yBAAA,GACA,KAAAA,yBAAA,IACgBp3B,EAAAO,EAAK,CAAA+6B,SAAA,MAAA/D,gBAAA,QAErB,CACAtI,2BAAA,CAMYjvB,EAAAO,EAAK,CAAAonB,UAAA,MACjB,KAAA0M,aAAA,CACA,KAAAxK,IAAA,CAAAiE,SAAA,GAGA,KAAAjE,IAAA,CAAAwN,iBAAA,EAEA,EACA,CAIA0D,gBAAA,EACA,KAAA9G,QAAA,OAAA5sB,QAAA,EAEA,MAAA4sB,QAAA,MAAApL,OAAA,GACA,CACAmC,cAAA,CACA,SAAA3jB,QAAA,GAGA,KAAA0jB,YAAA,GACA,OAAA9sB,OAAA,CAAAy9B,mBAAA,OAAA5M,MAAA,KACA,MAAAuF,aAAA,EAJA,OAcA,QAAAN,UAAA,QAAAA,UAAA,CAAA1sB,QAAA,CACA,QAAAxF,EAAA,EAAgCA,EAAA,KAAAs2B,IAAA,CAAAv2B,MAAA,CAAsBC,IAEtDlF,IADA,CAAAw7B,IAAA,CAAAt2B,EAAA,CACAkpB,YAAA,GAGA,IAAA4Q,EAAA,KAAAx3B,MAAA,CACA,KAAAA,MAAA,MAAA0kB,OAAA,KACA,KAAA+S,eAAA,CAAmC12B,IACnC,KAAAmvB,aAAA,IACA,KAAA3D,eAAA,CAAA7sB,KAAAA,EACA,KAAAy0B,eAAA,gBAAAn0B,MAAA,CAAAujB,SAAA,EACA,IAAoBzY,cAAAA,CAAA,EAAgB,KAAAhR,OAAA,CACpCgR,GACAA,EAAAwpB,MAAA,sBAAAt0B,MAAA,CAAAujB,SAAA,CAAAiU,EAAAA,EAAAjU,SAAA,CAAA7jB,KAAAA,EACA,CACAknB,aAAA8Q,EAAA,WACA,IAAArtB,EAAAgU,CAAAA,CAAA,MAAAvkB,OAAA,CAAA69B,YAAA,OAAAz0B,QAAA,EAMA,GALA,KAAAuiB,MAAA,EACA,KAAAA,MAAA,CAAAyM,WAAA,QAAAxM,IAAA,CAAAwM,WAAA,EACA,KAAAzM,MAAA,CAAAiS,KAAA,GAAAA,GACArtB,CAAAA,EAAA,IAEAA,EAAA,CACA,IAAAutB,EAAA5F,EAAA,KAAA9uB,QAAA,CACA,MAAAuiB,MAAA,EACAyM,YAAA,KAAAxM,IAAA,CAAAwM,WAAA,CACAwF,MAAAA,EACAE,OAAAA,EACAp8B,OAAAu2B,EAAA,KAAA7uB,QAAA,EACA20B,QAAA,KAAApS,MAAA,MAAAA,MAAA,CAAAmS,MAAA,CAAAA,CACA,CACA,CACA,CACA3F,gBAAA,CACA,IAAAA,EACA,OACA,IAAA6F,EAAA,KAAA5H,aAAA,EACA,KAAAyC,oBAAA,EACA,KAAA74B,OAAA,CAAAy9B,mBAAA,CACAQ,EAAA,KAAAxL,eAAA,GAA2DmC,GAAW,KAAAnC,eAAA,EACtE5F,EAAA,KAAAyP,oBAAA,GACA4B,EAAArR,EACAA,EAAA,KAAAoJ,YAAA,KACArwB,KAAAA,EACAu4B,EAAAD,IAAA,KAAArB,0BAAA,CACAmB,GACAC,CAAAA,GACoBp2B,EAAY,KAAAouB,YAAA,GAChCkI,CAAA,IACAhG,EAAA,KAAA/uB,QAAA,CAAA80B,GACA,KAAArF,oBAAA,IACA,KAAAxD,cAAA,GAEA,CACAzK,QAAAwT,EAAA,QAm+BAz1B,EAl+BA,IAAA01B,EAAA,KAAA7S,cAAA,GACA/B,EAAA,KAAA6U,mBAAA,CAAAD,GAUA,OAJAD,GACA3U,CAAAA,EAAA,KAAA2U,eAAA,CAAA3U,EAAA,EA29BA8U,GAAA51B,CADAA,EAx9BA8gB,GAy9BApqB,CAAA,EACAk/B,GAAA51B,EAAArJ,CAAA,EAz9BA,CACA84B,YAAA,KAAAxM,IAAA,CAAAwM,WAAA,CACAoG,YAAAH,EACA5U,UAAAA,EACAwM,aAAA,GACA/wB,OAAA,KAAAusB,EAAA,CAEA,CACAjG,gBAAA,CACA,IAAAja,EACA,IAAoBP,cAAAA,CAAA,EAAgB,KAAAhR,OAAA,CACpC,IAAAgR,EACA,OAAuB/J,IACvB,IAAA0B,EAAAqI,EAAA7H,kBAAA,GAEA,IADA,SAAAoI,CAAAA,EAAA,KAAAoa,MAAA,GAAApa,KAAA,IAAAA,EAAA,OAAAA,EAAAwsB,OAAA,QAAA7D,IAAA,CAAAlgB,IAAA,CAAAykB,GAAA,EACA,CAEA,IAAwB9S,OAAAA,CAAA,EAAS,KAAAC,IAAA,CACjCD,IACoB/iB,EAAaD,EAAAtJ,CAAA,CAAAssB,EAAAjqB,MAAA,CAAArC,CAAA,EACbuJ,EAAaD,EAAArJ,CAAA,CAAAqsB,EAAAjqB,MAAA,CAAApC,CAAA,EAEjC,CACA,OAAAqJ,CACA,CACA21B,oBAAA31B,CAAA,EACA,IAAA4I,EACA,IAAAmtB,EAAqCz3B,IAErC,GADY0sB,GAAW+K,EAAA/1B,GACvB,OAAA4I,CAAAA,EAAA,KAAAoa,MAAA,GAAApa,KAAA,IAAAA,EAAA,OAAAA,EAAAwsB,OAAA,CACA,OAAAW,EAMA,QAAA96B,EAAA,EAA4BA,EAAA,KAAAs2B,IAAA,CAAAv2B,MAAA,CAAsBC,IAAA,CAClD,IAAAlF,EAAA,KAAAw7B,IAAA,CAAAt2B,EAAA,CACA,CAAwB+nB,OAAAA,CAAA,CAAA3rB,QAAAA,CAAA,EAAkBtB,EAC1CA,IAAA,KAAAktB,IAAA,EAAAD,GAAA3rB,EAAA69B,YAAA,GAKAlS,EAAAoS,OAAA,EACwBpK,GAAW+K,EAAA/1B,GAEfC,EAAa81B,EAAAr/B,CAAA,CAAAssB,EAAAjqB,MAAA,CAAArC,CAAA,EACbuJ,EAAa81B,EAAAp/B,CAAA,CAAAqsB,EAAAjqB,MAAA,CAAApC,CAAA,EAEjC,CACA,OAAAo/B,CACA,CACAC,eAAAh2B,CAAA,CAAAi2B,EAAA,IACA,IAAAC,EAAmC53B,IACvB0sB,GAAWkL,EAAAl2B,GACvB,QAAA/E,EAAA,EAA4BA,EAAA,KAAAs2B,IAAA,CAAAv2B,MAAA,CAAsBC,IAAA,CAClD,IAAAlF,EAAA,KAAAw7B,IAAA,CAAAt2B,EAAA,EACAg7B,GACAlgC,EAAAsB,OAAA,CAAA69B,YAAA,EACAn/B,EAAAitB,MAAA,EACAjtB,IAAAA,EAAAktB,IAAA,EACoB3iB,GAAY41B,EAAA,CAChCx/B,EAAA,CAAAX,EAAAitB,MAAA,CAAAjqB,MAAA,CAAArC,CAAA,CACAC,EAAA,CAAAZ,EAAAitB,MAAA,CAAAjqB,MAAA,CAAApC,CAAA,GAGqBuI,EAAYnJ,EAAAu3B,YAAA,GAEjBhtB,GAAY41B,EAAAngC,EAAAu3B,YAAA,CAC5B,CAIA,OAHgBpuB,EAAY,KAAAouB,YAAA,GACZhtB,GAAY41B,EAAA,KAAA5I,YAAA,EAE5B4I,CACA,CACAT,gBAAAz1B,CAAA,EACA,IAAAm2B,EAAwC73B,IAC5B0sB,GAAWmL,EAAAn2B,GACvB,QAAA/E,EAAA,EAA4BA,EAAA,KAAAs2B,IAAA,CAAAv2B,MAAA,CAAsBC,IAAA,CAClD,IAAAlF,EAAA,KAAAw7B,IAAA,CAAAt2B,EAAA,CACA,IAAAlF,EAAA0K,QAAA,EAEA,CAAqBvB,EAAYnJ,EAAAu3B,YAAA,EADjC,QAGgBvuB,CAAAA,EAAQhJ,EAAAu3B,YAAA,GAAAv3B,EAAAo+B,cAAA,GACxB,IAAApI,EAAkCztB,IAElB0sB,GAAWe,EAD3Bh2B,EAAA8sB,cAAA,IAEgBiJ,GAAmBqK,EAAApgC,EAAAu3B,YAAA,CAAAv3B,EAAAs3B,QAAA,CAAAt3B,EAAAs3B,QAAA,CAAAvM,SAAA,CAAA7jB,KAAAA,EAAA8uB,EACnC,CAIA,OAHgB7sB,EAAY,KAAAouB,YAAA,GACZxB,GAAmBqK,EAAA,KAAA7I,YAAA,EAEnC6I,CACA,CACAC,eAAAz7B,CAAA,EACA,KAAA07B,WAAA,CAAA17B,EACA,KAAAsoB,IAAA,CAAA4R,wBAAA,GACA,KAAAlF,iBAAA,GACA,CACAvI,WAAA/vB,CAAA,EACA,KAAAA,OAAA,EACA,QAAAA,OAAA,CACA,GAAAA,CAAA,CACAq2B,UAAAr2B,KAAA4F,IAAA5F,EAAAq2B,SAAA,EAAAr2B,EAAAq2B,SAAA,CAEA,CACA0G,mBAAA,CACA,KAAApR,MAAA,CAAA/lB,KAAAA,EACA,KAAAM,MAAA,CAAAN,KAAAA,EACA,KAAAowB,QAAA,CAAApwB,KAAAA,EACA,KAAAi3B,0BAAA,CAAAj3B,KAAAA,EACA,KAAAo5B,WAAA,CAAAp5B,KAAAA,EACA,KAAA9F,MAAA,CAAA8F,KAAAA,EACA,KAAAwwB,aAAA,GACA,CACA6I,oCAAA,CACA,KAAAC,cAAA,EAQA,KAAAA,cAAA,CAAArF,wBAAA,GACgB93B,EAAAC,SAAS,CAAAF,SAAA,EACzB,KAAAo9B,cAAA,CAAAzF,kBAAA,IAEA,CACAA,mBAAA0F,EAAA,QACA5tB,EpFvqBAzR,EAAAiG,EAAAC,EoF6qBA,IAAAwvB,EAAA,KAAA4J,OAAA,EACA,MAAA9G,iBAAA,QAAAA,iBAAA,CAAA9C,EAAA8C,iBAAA,EACA,KAAAE,gBAAA,QAAAA,gBAAA,CAAAhD,EAAAgD,gBAAA,EACA,KAAAD,uBAAA,QAAAA,uBAAA,CAAA/C,EAAA+C,uBAAA,EACA,IAAA8G,EAAA9a,CAAAA,CAAA,KAAAiS,YAAA,SAAAhB,EAWA,GANA,CAAA2J,CAAAA,GACAE,GAAA,KAAA9G,uBAAA,EACA,KAAAD,iBAAA,EACA,QAAA/mB,CAAAA,EAAA,KAAAvL,MAAA,GAAAuL,KAAA,IAAAA,EAAA,OAAAA,EAAA+mB,iBAAA,GACA,KAAAgH,8BAAA,EACA,KAAA1T,IAAA,CAAA8M,qBAAA,EAEA,OACA,IAAoBxyB,OAAAA,CAAA,CAAAqpB,SAAAA,CAAA,EAAmB,KAAAvvB,OAAA,CAIvC,QAAAkG,MAAA,EAAAA,CAAAA,GAAAqpB,CAAA,GAQA,GANA,KAAAsK,wBAAA,CAA4C93B,EAAAC,SAAS,CAAAF,SAAA,CAMrD,MAAAk9B,WAAA,QAAA3D,cAAA,EACA,IAAA6D,EAAA,KAAAK,0BAAA,EACAL,CAAAA,GACAA,EAAAh5B,MAAA,EACA,SAAA8zB,iBAAA,EACA,KAAAkF,cAAA,CAAAA,EACA,KAAAD,kCAAA,GACA,KAAA5D,cAAA,CAA0Cp0B,IAC1C,KAAAu4B,oBAAA,CAAgDv4B,IAC5Bd,EAAoB,KAAAq5B,oBAAA,MAAAt5B,MAAA,CAAAujB,SAAA,CAAAyV,EAAAh5B,MAAA,CAAAujB,SAAA,EACpBkK,GAAW,KAAA0H,cAAA,MAAAmE,oBAAA,GAG/B,KAAAN,cAAA,MAAA7D,cAAA,CAAAz1B,KAAAA,CAEA,CAKA,QAAAy1B,cAAA,OAAA2D,WAAA,EAyCA,IApCA,KAAAl/B,MAAA,GACA,KAAAA,MAAA,CAA8BmH,IAC9B,KAAAw4B,oBAAA,CAA4Cx4B,KAK5C,KAAAo0B,cAAA,EACA,KAAAmE,oBAAA,EACA,KAAAN,cAAA,EACA,KAAAA,cAAA,CAAAp/B,MAAA,GACA,KAAAm/B,kCAAA,GpF9uBAn/B,EoF+uB+B,KAAAA,MAAA,CpF/uB/BiG,EoF+uB+B,KAAAs1B,cAAA,CpF/uB/Br1B,EoF+uB+B,KAAAk5B,cAAA,CAAAp/B,MAAA,CpF9uB/BgG,EAAAhG,EAAAT,CAAA,CAAA0G,EAAA1G,CAAA,CAAA2G,EAAA3G,CAAA,EACAyG,EAAAhG,EAAAR,CAAA,CAAAyG,EAAAzG,CAAA,CAAA0G,EAAA1G,CAAA,GoFkvBA,KAAA0/B,WAAA,EACA,KAAAxI,YAAA,CAEA,KAAA12B,MAAA,MAAA6+B,cAAA,MAAAz4B,MAAA,CAAAujB,SAAA,EAGoBkK,GAAW,KAAA7zB,MAAA,MAAAoG,MAAA,CAAAujB,SAAA,EAEf/gB,EAAa,KAAA5I,MAAA,MAAAk/B,WAAA,GAMbrL,GAAW,KAAA7zB,MAAA,MAAAoG,MAAA,CAAAujB,SAAA,EAK3B,KAAA6V,8BAAA,EACA,KAAAA,8BAAA,IACA,IAAAJ,EAAA,KAAAK,0BAAA,EACAL,CAAAA,GACA3a,CAAAA,CAAA2a,EAAA1I,YAAA,EACAjS,CAAAA,CAAA,KAAAiS,YAAA,EACA,CAAA0I,EAAAl/B,OAAA,CAAA69B,YAAA,EACAqB,EAAAp/B,MAAA,EACA,SAAAk6B,iBAAA,EACA,KAAAkF,cAAA,CAAAA,EACA,KAAAD,kCAAA,GACA,KAAA5D,cAAA,CAA0Cp0B,IAC1C,KAAAu4B,oBAAA,CAAgDv4B,IAC5Bd,EAAoB,KAAAq5B,oBAAA,MAAA1/B,MAAA,CAAAo/B,EAAAp/B,MAAA,EACpB6zB,GAAW,KAAA0H,cAAA,MAAAmE,oBAAA,GAG/B,KAAAN,cAAA,MAAA7D,cAAA,CAAAz1B,KAAAA,CAEA,CAIA2xB,IACAJ,GAAAE,oBAAA,IAEA,CACAkI,4BAAA,OACA,MAAAv5B,MAAA,EACgB0B,EAAQ,KAAA1B,MAAA,CAAAiwB,YAAA,GACRluB,EAAc,KAAA/B,MAAA,CAAAiwB,YAAA,EAC9B,OAEA,KAAAjwB,MAAA,CAAA05B,YAAA,GACA,KAAA15B,MAAA,CAGA,KAAAA,MAAA,CAAAu5B,0BAAA,EAEA,CACAG,cAAA,CACA,MAAAnb,CAAAA,CAAA,OAAA8W,cAAA,EACA,KAAA2D,WAAA,EACA,KAAAh/B,OAAA,CAAA67B,UAAA,GACA,KAAA31B,MAAA,CACA,CACAwzB,gBAAA,CACA,IAAAnoB,EACA,IAAAikB,EAAA,KAAA4J,OAAA,GACAC,EAAA9a,CAAAA,CAAA,KAAAiS,YAAA,SAAAhB,EACAmK,EAAA,GAuBA,GAlBA,MAAArH,iBAAA,UAAA/mB,CAAAA,EAAA,KAAAvL,MAAA,GAAAuL,KAAA,IAAAA,EAAA,OAAAA,EAAA+mB,iBAAA,IACAqH,CAAAA,EAAA,IAMAN,GACA,MAAA9G,uBAAA,OAAAC,gBAAA,GACAmH,CAAAA,EAAA,IAMA,KAAA9F,wBAAA,GAAkD93B,EAAAC,SAAS,CAAAF,SAAA,EAC3D69B,CAAAA,EAAA,IAEAA,EACA,OACA,IAAoBz5B,OAAAA,CAAA,CAAAqpB,SAAAA,CAAA,EAAmB,KAAAvvB,OAAA,CAWvC,GANA,KAAAq4B,eAAA,CAAA9T,CAAAA,CAAA,MAAAve,MAAA,OAAAA,MAAA,CAAAqyB,eAAA,EACA,KAAAzH,gBAAA,EACA,KAAAgP,gBAAA,EACA,KAAAvH,eAAA,EACA,MAAA2G,WAAA,MAAA3D,cAAA,CAAAz1B,KAAAA,CAAA,EAEA,MAAAM,MAAA,GAAAA,CAAAA,GAAAqpB,CAAA,EACA,OAKYoE,GAAW,KAAAgK,eAAA,MAAAz3B,MAAA,CAAAujB,SAAA,EAIvB,IAAAoW,EAAA,KAAArN,SAAA,CAAAnzB,CAAA,CACAygC,EAAA,KAAAtN,SAAA,CAAAlzB,CAAA,EAKYygC,S9Ez2BZp3B,CAAA,CAAA6pB,CAAA,CAAAwN,CAAA,CAAAC,EAAA,QAMAvhC,EACA4E,EANA,IAAA48B,EAAAF,EAAAr8B,MAAA,CACA,GAAAu8B,GAGA1N,EAAAnzB,CAAA,CAAAmzB,EAAAlzB,CAAA,GAGA,QAAAsE,EAAA,EAAoBA,EAAAs8B,EAAgBt8B,IAAA,CAEpCN,EAAA5E,CADAA,EAAAshC,CAAA,CAAAp8B,EAAA,EACA6uB,eAAA,CAKA,IAAgBzhB,cAAAA,CAAA,EAAgBtS,EAAAsB,OAAA,CAChCgR,CAAAA,CAAAA,IACAA,EAAA8W,KAAA,CAAAC,KAAA,EACA/W,aAAAA,EAAA8W,KAAA,CAAAC,KAAA,CAAAoY,OAAA,IAGAF,GACAvhC,EAAAsB,OAAA,CAAA69B,YAAA,EACAn/B,EAAAitB,MAAA,EACAjtB,IAAAA,EAAAktB,IAAA,EACA3iB,GAAAN,EAAA,CACAtJ,EAAA,CAAAX,EAAAitB,MAAA,CAAAjqB,MAAA,CAAArC,CAAA,CACAC,EAAA,CAAAZ,EAAAitB,MAAA,CAAAjqB,MAAA,CAAApC,CAAA,GAGAgE,IAEAkvB,EAAAnzB,CAAA,EAAAiE,EAAAjE,CAAA,CAAAkG,KAAA,CACAitB,EAAAlzB,CAAA,EAAAgE,EAAAhE,CAAA,CAAAiG,KAAA,CAEAmD,EAAAC,EAAArF,IAEA28B,GAAkCp4B,EAAYnJ,EAAAu3B,YAAA,GAC9ChtB,GAAAN,EAAAjK,EAAAu3B,YAAA,EAEA,CAKAzD,EAAAnzB,CAAA,CApDA,iBAqDAmzB,EAAAnzB,CAAA,CAtDA,eAuDAmzB,CAAAA,EAAAnzB,CAAA,IAEAmzB,EAAAlzB,CAAA,CAxDA,iBAyDAkzB,EAAAlzB,CAAA,CA1DA,eA2DAkzB,CAAAA,EAAAlzB,CAAA,IAEA,E8EozB2B,KAAAq+B,eAAA,MAAAnL,SAAA,MAAA0H,IAAA,CAAAmF,GAK3B7J,EAAAtvB,MAAA,EACA,CAAAsvB,EAAA11B,MAAA,EACA,UAAA0yB,SAAA,CAAAnzB,CAAA,WAAAmzB,SAAA,CAAAlzB,CAAA,IACAk2B,EAAA11B,MAAA,CAAA01B,EAAAtvB,MAAA,CAAAujB,SAAA,CACA+L,EAAAiK,oBAAA,CAA4Cx4B,KAE5C,IAAoBnH,OAAAA,CAAA,EAAS01B,EAC7B,IAAA11B,EAAA,CAMA,KAAAsgC,mBAAA,GACA,KAAAC,sBAAA,GACA,KAAAhL,cAAA,IAEA,MACA,CACA,KAAA5C,eAAA,OAAA2N,mBAAA,EAIgBvM,GAAiB,KAAAuM,mBAAA,CAAA/gC,CAAA,MAAAozB,eAAA,CAAApzB,CAAA,EACjBw0B,GAAiB,KAAAuM,mBAAA,CAAA9gC,CAAA,MAAAmzB,eAAA,CAAAnzB,CAAA,GAJjC,KAAA+gC,sBAAA,GAeY36B,EAAY,KAAA+sB,eAAA,MAAAkL,eAAA,CAAA79B,EAAA,KAAAm2B,YAAA,EACxB,KAAAzD,SAAA,CAAAnzB,CAAA,GAAAwgC,GACA,KAAArN,SAAA,CAAAlzB,CAAA,GAAAwgC,GACiB7K,GAAe,KAAAxC,eAAA,CAAApzB,CAAA,MAAA+gC,mBAAA,CAAA/gC,CAAA,GACf41B,GAAe,KAAAxC,eAAA,CAAAnzB,CAAA,MAAA8gC,mBAAA,CAAA9gC,CAAA,IAChC,KAAAw6B,YAAA,IACA,KAAAzE,cAAA,GACA,KAAAgF,eAAA,oBAAAv6B,IAKAy3B,IACAJ,GAAAG,sBAAA,EAEA,CACAhB,MAAA,CACA,KAAAyD,SAAA,GAEA,CACAlE,MAAA,CACA,KAAAkE,SAAA,GAEA,CACA1E,eAAAiL,EAAA,IACA,IAAA/uB,EAEA,GADA,OAAAA,CAAAA,EAAA,KAAAvR,OAAA,CAAAgR,aAAA,GAAAO,KAAA,IAAAA,GAAAA,EAAA8jB,cAAA,GACAiL,EAAA,CACA,IAAA/P,EAAA,KAAAC,QAAA,EACAD,CAAAA,GAAAA,EAAA8E,cAAA,EACA,CACA,KAAAmB,YAAA,QAAAA,YAAA,CAAAptB,QAAA,EACA,MAAAotB,YAAA,CAAA5wB,KAAAA,CAAA,CAEA,CACAy6B,wBAAA,CACA,KAAAD,mBAAA,CAAuCr5B,IACvC,KAAA0rB,eAAA,CAAmC1rB,IACnC,KAAAw5B,4BAAA,CAAgDx5B,GAChD,CACA+0B,mBAAAx4B,CAAA,CAAAs4B,EAAA,QAuBA4E,EAtBA,IAAAxK,EAAA,KAAAA,QAAA,CACAyK,EAAAzK,EACAA,EAAAC,YAAA,CACA,GACAyK,EAAA,CAAkC,QAAAzK,YAAA,EAClC+I,EAAgCj4B,GAChC,MAAAm4B,cAAA,EACA,KAAAA,cAAA,CAAAl/B,OAAA,CAAA67B,UAAA,EACA,MAAAR,cAAA,MAAAmE,oBAAA,CAAA55B,KAAAA,CAAA,EAEA,KAAA05B,8BAAA,EAAA1D,EACA,IAAA+E,EAAmC15B,IAGnC25B,EAAAC,CAFA7K,EAAAA,EAAA9wB,MAAA,CAAAU,KAAAA,CAAA,IACA,MAAAM,MAAA,MAAAA,MAAA,CAAAhB,MAAA,CAAAU,KAAAA,CAAA,EAEA2qB,EAAA,KAAAC,QAAA,GACAsQ,EAAA,CAAAvQ,GAAAA,EAAAE,OAAA,CAAA9sB,MAAA,IACAo9B,EAAAxc,CAAAA,CAAAqc,CAAAA,GACA,CAAAE,GACA,UAAA9gC,OAAA,CAAAq2B,SAAA,EACA,MAAA6D,IAAA,CAAAlgB,IAAA,CAAAgnB,GAAA,CACA,MAAAhH,iBAAA,GAEA,KAAAiH,cAAA,KACA,IAAAvf,EAAAnE,EAAA,IAIA,GAHA2jB,GAAAlC,EAAA3/B,CAAA,CAAAiE,EAAAjE,CAAA,CAAAqiB,GACAwf,GAAAlC,EAAA1/B,CAAA,CAAAgE,EAAAhE,CAAA,CAAAoiB,GACA,KAAAqd,cAAA,CAAAC,GACA,KAAA3D,cAAA,EACA,KAAAmE,oBAAA,EACA,KAAAt5B,MAAA,EACA,KAAAg5B,cAAA,EACA,KAAAA,cAAA,CAAAh5B,MAAA,MTz/BA5F,EAAAC,ES0/CA4gC,EAAA9wB,EAhgBoBlK,EAAoBw6B,EAAA,KAAAz6B,MAAA,CAAAujB,SAAA,MAAAyV,cAAA,CAAAh5B,MAAA,CAAAujB,SAAA,EAggBxC0X,EA/fA,KAAA9F,cAAA,CA+fAhrB,EA/fA,KAAAmvB,oBAAA,CAggBA4B,GAAAD,EAAA9hC,CAAA,CAAAgR,EAAAhR,CAAA,CAAAgiC,EAAAhiC,CAAA,CAhgBAqiB,GAigBA0f,GAAAD,EAAA7hC,CAAA,CAAA+Q,EAAA/Q,CAAA,CAAA+hC,EAAA/hC,CAAA,CAjgBAoiB,GAKA8e,IThgCAlgC,ESigCiC,KAAA+6B,cAAA,CTjgCjC96B,ESigCiCigC,EThgCjC3L,GAAAv0B,EAAAjB,CAAA,CAAAkB,EAAAlB,CAAA,GAAAw1B,GAAAv0B,EAAAhB,CAAA,CAAAiB,EAAAjB,CAAA,ISigCA,MAAAg5B,iBAAA,KAEAkI,GACAA,CAAAA,EAA6Cv5B,GAAS,EAClC0sB,GAAW6M,EAAA,KAAAnF,cAAA,CAC/B,CACAuF,IACA,KAAA1K,eAAA,CAAAwK,EACoBY,SZ3gCpBxhC,CAAA,CAAAyhC,CAAA,CAAA/L,CAAA,CAAA9T,CAAA,CAAAqf,CAAA,CAAAD,CAAA,EACAC,GACAjhC,EAAAujB,OAAA,CAAyB,GAAAhe,EAAAC,CAAA,EAAS,EAElCkwB,KAAA5vB,IAAA4vB,EAAAnS,OAAA,CAAAmS,EAAAnS,OAAA,GAAAiQ,GAAA5R,IACA5hB,EAAA0hC,WAAA,CAA6B,GAAAn8B,EAAAC,CAAA,EAASi8B,KAAA37B,IAAA27B,EAAAle,OAAA,CAAAke,EAAAle,OAAA,KAAAmQ,GAAA9R,KAEtCof,GACAhhC,CAAAA,EAAAujB,OAAA,CAAyB,GAAAhe,EAAAC,CAAA,EAASi8B,KAAA37B,IAAA27B,EAAAle,OAAA,CAAAke,EAAAle,OAAA,GAAAmS,KAAA5vB,IAAA4vB,EAAAnS,OAAA,CAAAmS,EAAAnS,OAAA,GAAA3B,EAAA,EAKlC,QAAA9d,EAAA,EAAoBA,EAAAqvB,GAAgBrvB,IAAA,CACpC,IAAA69B,EAAA,SAAqCzO,EAAA,CAAApvB,EAAA,CAAW,QAChD89B,EAAAtO,GAAAmO,EAAAE,GACAE,EAAAvO,GAAAoC,EAAAiM,GACAC,CAAAA,KAAA97B,IAAA87B,GAAAC,KAAA/7B,IAAA+7B,CAAA,IAEAD,GAAAA,CAAAA,EAAA,GACAC,GAAAA,CAAAA,EAAA,GACAD,IAAAA,GACAC,IAAAA,GACAxO,GAAAuO,KAAAvO,GAAAwO,IAEA7hC,CAAA,CAAA2hC,EAAA,CAAAjhC,KAAAuE,GAAA,CAA2C,GAAAM,EAAAC,CAAA,EAAS4tB,GAAAwO,GAAAxO,GAAAyO,GAAAjgB,GAAA,GACpC7T,CAAAA,GAAA2B,EAAO,CAAApC,IAAA,CAAAu0B,IAAqB9zB,GAAA2B,EAAO,CAAApC,IAAA,CAAAs0B,EAAA,GACnD5hC,CAAAA,CAAA,CAAA2hC,EAAA,QAIA3hC,CAAA,CAAA2hC,EAAA,CAAAE,EAEA,CAIAJ,CAAAA,EAAAv5B,MAAA,EAAAwtB,EAAAxtB,MAAA,GACAlI,CAAAA,EAAAkI,MAAA,CAAwB,GAAA3C,EAAAC,CAAA,EAASi8B,EAAAv5B,MAAA,IAAAwtB,EAAAxtB,MAAA,IAAA0Z,EAAA,CAEjC,EYm+B6Bgf,EAAAD,EAAA,KAAAxK,YAAA,CAAAvU,EAAAqf,EAAAD,IAE7B,KAAAlV,IAAA,CAAA4R,wBAAA,GACA,KAAAnI,cAAA,GACA,KAAA2E,iBAAA,CAAAtY,CACA,EACA,KAAAuf,cAAA,MAAAjhC,OAAA,CAAA67B,UAAA,OACA,CACAxR,eAAArqB,CAAA,EACA,KAAAq6B,eAAA,mBACA,KAAAzJ,gBAAA,OAAAA,gBAAA,CAAAxR,IAAA,GACA,KAAAoX,YAAA,OAAAA,YAAA,CAAA5F,gBAAA,EACA,KAAA4F,YAAA,CAAA5F,gBAAA,CAAAxR,IAAA,GAEA,KAAAwgB,gBAAA,GACgB,GAAA79B,EAAAqB,EAAA,EAAW,KAAAw8B,gBAAA,EAC3B,KAAAA,gBAAA,CAAAh6B,KAAAA,GAOA,KAAAg6B,gBAAA,CAAoC79B,EAAAO,EAAK,CAAA1D,MAAA,MACzB8vB,GAAqBC,sBAAA,IACrC,KAAAiC,gBAAA,CAAwCgR,SF1iCxCv5B,CAAA,CAAA8B,CAAA,CAAAnK,CAAA,EACA,IAAA6hC,EAA0B,GAAAha,GAAAjkB,CAAA,EEyiCgC,KFziCD,GAAAk+B,GAAAC,EAAA,EEyiCC,GFviC1D,OADAF,EAAA1iB,KAAA,CAAwBwH,GAAkB,GAAAkb,EEmC1C,IFnC0C7hC,IAC1C6hC,EAAAne,SAAA,EEuiC0D,EArgC1D,EAqgC0D,CAC1D,GAAA1jB,CAAA,CACAoY,SAAA,IACA,KAAA6oB,cAAA,CAAA1jB,GACAvd,EAAAoY,QAAA,EAAApY,EAAAoY,QAAA,CAAAmF,EACA,EACAtL,WAAA,KACAjS,EAAAiS,UAAA,EAAAjS,EAAAiS,UAAA,GACA,KAAA+vB,iBAAA,EACA,CACA,GACA,KAAAxL,YAAA,EACA,MAAAA,YAAA,CAAA5F,gBAAA,MAAAA,gBAAA,EAEA,KAAAgP,gBAAA,CAAAh6B,KAAAA,CACA,EACA,CACAo8B,mBAAA,CACA,KAAAxL,YAAA,GACA,KAAAA,YAAA,CAAA5F,gBAAA,CAAAhrB,KAAAA,EACA,KAAA4wB,YAAA,CAAAT,eAAA,CAAAnwB,KAAAA,GAEA,IAAA2qB,EAAA,KAAAC,QAAA,EACAD,CAAAA,GAAAA,EAAAgG,qBAAA,GACA,KAAAC,YAAA,CACA,KAAA5F,gBAAA,CACA,KAAAsF,eAAA,CACAtwB,KAAAA,EACA,KAAAy0B,eAAA,qBACA,CACAW,iBAAA,CACA,KAAApK,gBAAA,GACA,KAAAqQ,cAAA,OAAAA,cAAA,CAriCA,KAsiCA,KAAArQ,gBAAA,CAAAxR,IAAA,IAEA,KAAA4iB,iBAAA,EACA,CACAC,yBAAA,CACA,IAAAzM,EAAA,KAAA4J,OAAA,GACA,CAAkBK,qBAAAA,CAAA,CAAA3/B,OAAAA,CAAA,CAAAoG,OAAAA,CAAA,CAAA+vB,aAAAA,CAAA,EAAqDT,EACvE,MAAA11B,GAAAoG,GAOA,UAAAsvB,GACA,KAAAtvB,MAAA,EACAA,GACAg8B,GAAA,KAAAliC,OAAA,CAAAmiC,aAAA,MAAAj8B,MAAA,CAAAujB,SAAA,CAAAvjB,EAAAujB,SAAA,GACA3pB,EAAA,KAAAA,MAAA,EAAwCmH,IACxC,IAAAm7B,EAAgCv9B,EAAU,KAAAqB,MAAA,CAAAujB,SAAA,CAAApqB,CAAA,CAC1CS,CAAAA,EAAAT,CAAA,CAAA2F,GAAA,CAAAwwB,EAAA11B,MAAA,CAAAT,CAAA,CAAA2F,GAAA,CACAlF,EAAAT,CAAA,CAAA0F,GAAA,CAAAjF,EAAAT,CAAA,CAAA2F,GAAA,CAAAo9B,EACA,IAAAC,EAAgCx9B,EAAU,KAAAqB,MAAA,CAAAujB,SAAA,CAAAnqB,CAAA,CAC1CQ,CAAAA,EAAAR,CAAA,CAAA0F,GAAA,CAAAwwB,EAAA11B,MAAA,CAAAR,CAAA,CAAA0F,GAAA,CACAlF,EAAAR,CAAA,CAAAyF,GAAA,CAAAjF,EAAAR,CAAA,CAAA0F,GAAA,CAAAq9B,CACA,CACY1O,GAAW8L,EAAA3/B,GAMXmJ,GAAYw2B,EAAAxJ,GAOZvwB,EAAY,KAAA66B,4BAAA,MAAA5C,eAAA,CAAA8B,EAAAxJ,GACxB,CACAgF,mBAAA1L,CAAA,CAAA7wB,CAAA,EACA,KAAAu7B,WAAA,CAAA5vB,GAAA,CAAAklB,IACA,KAAA0K,WAAA,CAAA9oB,GAAA,CAAAoe,EAAA,IAAmD2F,IAGnD3E,IADA,CAAA0J,WAAA,CAAA/oB,GAAA,CAAAqe,GACAjd,GAAA,CAAA5T,GACA,IAAA4jC,EAAA5jC,EAAAsB,OAAA,CAAAuiC,sBAAA,CACA7jC,EAAA2xB,OAAA,EACA7lB,WAAA83B,EAAAA,EAAA93B,UAAA,CAAA5E,KAAAA,EACAgwB,sBAAA0M,GAAAA,EAAAE,2BAAA,CACAF,EAAAE,2BAAA,CAAA9jC,GACAkH,KAAAA,CACA,EACA,CACAirB,QAAA,CACA,IAAAN,EAAA,KAAAC,QAAA,GACA,MAAAD,CAAAA,GAAAA,EAAAiF,IAAA,QAEA4J,SAAA,CACA,IAAA7tB,EACA,IAAoBge,SAAAA,CAAA,EAAW,KAAAvvB,OAAA,CAC/B,OAAAuvB,GAAA,QAAAhe,CAAAA,EAAA,KAAAif,QAAA,KAAAjf,KAAA,IAAAA,EAAA,OAAAA,EAAAikB,IAAA,QAEAiN,aAAA,CACA,IAAAlxB,EACA,IAAoBge,SAAAA,CAAA,EAAW,KAAAvvB,OAAA,CAC/B,OAAAuvB,EAAA,OAAAhe,CAAAA,EAAA,KAAAif,QAAA,KAAAjf,KAAA,IAAAA,EAAA,OAAAA,EAAAgkB,QAAA,CAAA3vB,KAAAA,CACA,CACA4qB,UAAA,CACA,IAAoBjB,SAAAA,CAAA,EAAW,KAAAvvB,OAAA,CAC/B,GAAAuvB,EACA,YAAA3D,IAAA,CAAAqO,WAAA,CAAA/oB,GAAA,CAAAqe,EACA,CACAc,QAAA,CAAkBuI,WAAAA,CAAA,CAAApuB,WAAAA,CAAA,CAAAorB,sBAAAA,CAAA,EAAiD,EAAI,EACvE,IAAArF,EAAA,KAAAC,QAAA,GACAD,GACAA,EAAAF,OAAA,MAAAuF,GACAgD,IACA,KAAAnG,eAAA,CAAA7sB,KAAAA,EACA,KAAAgzB,UAAA,KAEApuB,GACA,KAAAulB,UAAA,EAAkCvlB,WAAAA,CAAA,EAClC,CACA8lB,UAAA,CACA,IAAAC,EAAA,KAAAC,QAAA,SACA,EAAAD,GACAA,EAAAD,QAAA,MAKA,CACA+L,sBAAA,CACA,IAAoBrrB,cAAAA,CAAA,EAAgB,KAAAhR,OAAA,CACpC,IAAAgR,EACA,OAEA,IAAA0xB,EAAA,GAKA,CAAoBzM,aAAAA,CAAA,EAAejlB,EAWnC,GAVAilB,CAAAA,EAAA/yB,CAAA,EACA+yB,EAAAjuB,MAAA,EACAiuB,EAAAhuB,OAAA,EACAguB,EAAA/tB,OAAA,EACA+tB,EAAA0M,OAAA,EACA1M,EAAA9tB,KAAA,EACA8tB,EAAA7tB,KAAA,GACAs6B,CAAAA,EAAA,IAGA,CAAAA,EACA,OACA,IAAAE,EAAA,EACA3M,CAAAA,EAAA/yB,CAAA,EACA00B,GAAA,IAAA5mB,EAAA4xB,EAAA,KAAA1M,eAAA,EAGA,QAAAtyB,EAAA,EAA4BA,EAAA6zB,GAAA9zB,MAAA,CAA0BC,IACtDg0B,GAAA,SAAkDH,EAAA,CAAA7zB,EAAA,CAAiB,EAAAoN,EAAA4xB,EAAA,KAAA1M,eAAA,EACnE0B,GAAA,OAAgDH,EAAA,CAAA7zB,EAAA,CAAiB,EAAAoN,EAAA4xB,EAAA,KAAA1M,eAAA,EAMjE,QAAAzrB,KAFAuG,EAAAI,MAAA,GAEAwxB,EACA5xB,EAAAiX,cAAA,CAAAxd,EAAAm4B,CAAA,CAAAn4B,EAAA,EACA,KAAAyrB,eAAA,EACA,MAAAA,eAAA,CAAAzrB,EAAA,CAAAm4B,CAAA,CAAAn4B,EAAA,EAKAuG,EAAAqkB,cAAA,EACA,CACAwN,oBAAAC,CAAA,EACA,IAAAvxB,EAAAwxB,EACA,SAAA35B,QAAA,OAAAuvB,KAAA,CACA,OACA,SAAAoB,SAAA,CACA,OAAArC,GAEA,IAAAsL,EAAA,CACArL,WAAA,EACA,EACA9K,EAAA,KAAAyP,oBAAA,GACA,QAAA1D,UAAA,CAQA,OAPA,KAAAA,UAAA,IACAoK,EAAA3f,OAAA,IACA2f,EAAAC,aAAA,CACoB,GAAAC,GAAA3iC,CAAA,EAAkBuiC,MAAAA,EAAA,OAAAA,EAAAG,aAAA,MACtCD,EAAA95B,SAAA,CAAA2jB,EACAA,EAAA,KAAAoJ,YAAA,KACA,OACA+M,EAEA,IAAAxN,EAAA,KAAA4J,OAAA,GACA,SAAA3M,eAAA,QAAAvsB,MAAA,GAAAsvB,EAAA11B,MAAA,EACA,IAAAqjC,EAAA,GAeA,OAdA,KAAAnjC,OAAA,CAAAuvB,QAAA,GACA4T,EAAA9f,OAAA,CACA,KAAAzd,IAAA,KAAAqwB,YAAA,CAAA5S,OAAA,CACA,KAAA4S,YAAA,CAAA5S,OAAA,CACA,EACA8f,EAAAF,aAAA,CACwB,GAAAC,GAAA3iC,CAAA,EAAkBuiC,MAAAA,EAAA,OAAAA,EAAAG,aAAA,OAE1C,KAAAnJ,YAAA,GAA0CjyB,EAAY,KAAAouB,YAAA,IACtDkN,EAAAj6B,SAAA,CAAA2jB,EACAA,EAAA,GAA8C,IAC9C,OACA,KAAAiN,YAAA,KAEAqJ,CACA,CACA,IAAAC,EAAA5N,EAAAU,eAAA,EAAAV,EAAAS,YAAA,CACA,KAAAgM,uBAAA,GACAe,EAAA95B,SAAA,CAA+Bm6B,SPrwC/B//B,CAAA,CAAAkvB,CAAA,CAAA8Q,CAAA,EACA,IAAAp6B,EAAA,GAOAq6B,EAAAjgC,EAAAjE,CAAA,CAAAmG,SAAA,CAAAgtB,EAAAnzB,CAAA,CACAmkC,EAAAlgC,EAAAhE,CAAA,CAAAkG,SAAA,CAAAgtB,EAAAlzB,CAAA,CACAmkC,EAAA,CAAAH,MAAAA,EAAA,OAAAA,EAAApgC,CAAA,KAWA,GAVAqgC,CAAAA,GAAAC,GAAAC,CAAA,GACAv6B,CAAAA,EAAA,eAAmCq6B,EAAW,MAAMC,EAAW,MAAMC,EAAW,OAMhFjR,CAAAA,IAAAA,EAAAnzB,CAAA,EAAAmzB,IAAAA,EAAAlzB,CAAA,GACA4J,CAAAA,GAAA,SAA8B,EAAAspB,EAAAnzB,CAAA,CAAgB,IAAI,EAAAmzB,EAAAlzB,CAAA,CAAgB,KAElEgkC,EAAA,CACA,IAAgBI,qBAAAA,CAAA,CAAA17B,OAAAA,CAAA,CAAAC,QAAAA,CAAA,CAAAC,QAAAA,CAAA,CAAAC,MAAAA,CAAA,CAAAC,MAAAA,CAAA,EAA+Dk7B,EAC/EI,GACAx6B,CAAAA,EAAA,eAAuCw6B,EAAqB,MAAMx6B,EAAU,GAC5ElB,GACAkB,CAAAA,GAAA,UAAmClB,EAAO,QAC1CC,GACAiB,CAAAA,GAAA,WAAoCjB,EAAQ,QAC5CC,GACAgB,CAAAA,GAAA,WAAoChB,EAAQ,QAC5CC,GACAe,CAAAA,GAAA,SAAkCf,EAAM,QACxCC,GACAc,CAAAA,GAAA,SAAkCd,EAAM,OACxC,CAKA,IAAAu7B,EAAArgC,EAAAjE,CAAA,CAAAkG,KAAA,CAAAitB,EAAAnzB,CAAA,CACAukC,EAAAtgC,EAAAhE,CAAA,CAAAiG,KAAA,CAAAitB,EAAAlzB,CAAA,CAIA,MAHAqkC,CAAAA,IAAAA,GAAAC,IAAAA,CAAA,GACA16B,CAAAA,GAAA,SAA8By6B,EAAc,IAAIC,EAAc,IAE9D16B,GAAA,MACA,EOutCuD,KAAAq3B,4BAAA,MAAA/N,SAAA,CAAA4Q,GACvDvW,GACAmW,CAAAA,EAAA95B,SAAA,CAAA2jB,EAAAuW,EAAAJ,EAAA95B,SAAA,GAEA,IAAoB7J,EAAAA,CAAA,CAAAC,EAAAA,CAAA,EAAO,KAAAmzB,eAAA,CA+B3B,QAAAhoB,KA9BAu4B,EAAAa,eAAA,IAAwCxkC,IAAAA,EAAA8F,MAAA,CAAe,IAAI7F,IAAAA,EAAA6F,MAAA,CAAe,KAC1EqwB,EAAAU,eAAA,CAKA8M,EAAA3f,OAAA,CACAmS,IAAA,KACA,OAAAuN,CAAAA,EAAA,OAAAxxB,CAAAA,EAAA6xB,EAAA/f,OAAA,GAAA9R,KAAA,IAAAA,EAAAA,EAAA,KAAA0kB,YAAA,CAAA5S,OAAA,GAAA0f,KAAA,IAAAA,EAAAA,EAAA,EACA,KAAAhN,eAAA,CACA,KAAAE,YAAA,CAAA5S,OAAA,CACA+f,EAAA5B,WAAA,CAOAwB,EAAA3f,OAAA,CACAmS,IAAA,KACA4N,KAAAx9B,IAAAw9B,EAAA/f,OAAA,CACA+f,EAAA/f,OAAA,CACA,GACA+f,KAAAx9B,IAAAw9B,EAAA5B,WAAA,CACA4B,EAAA5B,WAAA,CACA,EAK8BhS,GAAA7b,CAAe,EAC7C,GAAAyvB,KAAAx9B,IAAAw9B,CAAA,CAAA34B,EAAA,CACA,SACA,IAAwBukB,QAAAA,CAAA,CAAAkD,QAAAA,CAAA,EAAqB1C,GAAA7b,CAAe,CAAAlJ,EAAA,CAO5Dq5B,EAAAd,SAAAA,EAAA95B,SAAA,CACAk6B,CAAA,CAAA34B,EAAA,CACAukB,EAAAoU,CAAA,CAAA34B,EAAA,CAAA+qB,GACA,GAAAtD,EAAA,CACA,IAAA6R,EAAA7R,EAAAvuB,MAAA,CACA,QAAAC,EAAA,EAAoCA,EAAAmgC,EAASngC,IAC7Co/B,CAAA,CAAA9Q,CAAA,CAAAtuB,EAAA,EAAAkgC,CAEA,MAEAd,CAAA,CAAAv4B,EAAA,CAAAq5B,CAEA,CAYA,OANA,KAAA9jC,OAAA,CAAAuvB,QAAA,EACAyT,CAAAA,EAAAC,aAAA,CACAzN,IAAA,KAC0B,GAAA0N,GAAA3iC,CAAA,EAAkBuiC,MAAAA,EAAA,OAAAA,EAAAG,aAAA,MAC5C,QAEAD,CACA,CACA1F,eAAA,CACA,KAAAxH,UAAA,MAAAE,QAAA,CAAApwB,KAAAA,CACA,CAEAo+B,WAAA,CACA,KAAApY,IAAA,CAAA2N,KAAA,CAAA1oB,OAAA,KAAgD,IAAAU,EAAQ,cAAAA,CAAAA,EAAA7S,EAAAkyB,gBAAA,GAAArf,KAAA,IAAAA,EAAA,OAAAA,EAAA6N,IAAA,KACxD,KAAAwM,IAAA,CAAA2N,KAAA,CAAA1oB,OAAA,CAAAksB,IACA,KAAAnR,IAAA,CAAAqO,WAAA,CAAAroB,KAAA,EACA,CACA,CACA,CACA,SAAAmb,GAAAruB,CAAA,EACAA,EAAAquB,YAAA,EACA,CACA,SAAAmQ,GAAAx+B,CAAA,EACA,IAAA6S,EACA,IAAAykB,EAAA,QAAAzkB,CAAAA,EAAA7S,EAAAo3B,UAAA,GAAAvkB,KAAA,IAAAA,EAAA,OAAAA,EAAAykB,QAAA,GAAAt3B,EAAAs3B,QAAA,CACA,GAAAt3B,EAAAmyB,MAAA,IACAnyB,EAAAwH,MAAA,EACA8vB,GACAt3B,EAAA+7B,YAAA,eACA,IAAgBhR,UAAAvjB,CAAA,CAAAs4B,YAAAyF,CAAA,EAAiDvlC,EAAAwH,MAAA,CACjE,CAAgBi8B,cAAAA,CAAA,EAAgBzjC,EAAAsB,OAAA,CAChCq/B,EAAArJ,EAAA9wB,MAAA,GAAAxG,EAAAwH,MAAA,CAAAhB,MAAA,CAGA,SAAAi9B,EACYj7B,EAAQ,IACpB,IAAAg9B,EAAA7E,EACArJ,EAAAwI,WAAA,CAAA15B,EAAA,CACAkxB,EAAAvM,SAAA,CAAA3kB,EAAA,CACAnB,EAA+BkB,EAAUq/B,EACzCA,CAAAA,EAAAl/B,GAAA,CAAAkB,CAAA,CAAApB,EAAA,CAAAE,GAAA,CACAk/B,EAAAn/B,GAAA,CAAAm/B,EAAAl/B,GAAA,CAAArB,CACA,GAEAu+B,GAAAC,EAAAnM,EAAAvM,SAAA,CAAAvjB,IACYgB,EAAQ,IACpB,IAAAg9B,EAAA7E,EACArJ,EAAAwI,WAAA,CAAA15B,EAAA,CACAkxB,EAAAvM,SAAA,CAAA3kB,EAAA,CACAnB,EAA+BkB,EAAUqB,CAAA,CAAApB,EAAA,CACzCo/B,CAAAA,EAAAn/B,GAAA,CAAAm/B,EAAAl/B,GAAA,CAAArB,EAIAjF,EAAA28B,cAAA,GAAA38B,EAAAkyB,gBAAA,GACAlyB,EAAA45B,iBAAA,IACA55B,EAAA28B,cAAA,CAAAv2B,EAAA,CAAAC,GAAA,CACArG,EAAA28B,cAAA,CAAAv2B,EAAA,CAAAE,GAAA,CAAArB,EAEA,GAEA,IAAAwgC,EAA4Bp9B,IACpBrB,EAAYy+B,EAAAj+B,EAAA8vB,EAAAvM,SAAA,EACpB,IAAA2a,EAA4Br9B,IAC5Bs4B,EACY35B,EAAY0+B,EAAA1lC,EAAAigC,cAAA,CAAAsF,EAAA,IAAAjO,EAAAwI,WAAA,EAGZ94B,EAAY0+B,EAAAl+B,EAAA8vB,EAAAvM,SAAA,EAExB,IAAA8D,EAAA,CAAkCqH,GAAWuP,GAC7CjJ,EAAA,GACA,IAAAx8B,EAAAo3B,UAAA,EACA,IAAAoJ,EAAAxgC,EAAA6gC,0BAAA,GAKA,GAAAL,GAAA,CAAAA,EAAApJ,UAAA,EACA,IAAwBE,SAAAqO,CAAA,CAAAn+B,OAAAo+B,CAAA,EAAiDpF,EACzE,GAAAmF,GAAAC,EAAA,CACA,IAAAC,EAA6Ct9B,IACzBd,EAAoBo+B,EAAAvO,EAAAvM,SAAA,CAAA4a,EAAA5a,SAAA,EACxC,IAAAkX,EAA2C15B,IACvBd,EAAoBw6B,EAAAz6B,EAAAo+B,EAAA7a,SAAA,EACfsL,GAAgBwP,EAAA5D,IACzCzF,CAAAA,EAAA,IAEAgE,EAAAl/B,OAAA,CAAA67B,UAAA,GACAn9B,EAAA28B,cAAA,CAAAsF,EACAjiC,EAAA8gC,oBAAA,CAAA+E,EACA7lC,EAAAwgC,cAAA,CAAAA,EAEA,CACA,CACA,CACAxgC,EAAA27B,eAAA,cACAn0B,OAAAA,EACA8vB,SAAAA,EACA1yB,MAAA8gC,EACAD,YAAAA,EACA5W,iBAAAA,EACA2N,yBAAAA,CACA,EACA,MACA,GAAAx8B,EAAAmyB,MAAA,IACA,IAAgBb,eAAAA,CAAA,EAAiBtxB,EAAAsB,OAAA,CACjCgwB,GAAAA,GACA,CAMAtxB,EAAAsB,OAAA,CAAAwK,UAAA,CAAA5E,KAAAA,CACA,CACA,SAAA4zB,GAAA96B,CAAA,EAIA64B,IACAJ,GAAAC,UAAA,GAEA14B,EAAAsH,MAAA,GAQAtH,EAAAghC,YAAA,IACAhhC,CAAAA,EAAA45B,iBAAA,CAAA55B,EAAAsH,MAAA,CAAAsyB,iBAAA,EAOA55B,EAAA65B,uBAAA,EAAA75B,CAAAA,EAAA65B,uBAAA,CAAAhU,CAAAA,CAAA7lB,CAAAA,EAAA45B,iBAAA,EACA55B,EAAAsH,MAAA,CAAAsyB,iBAAA,EACA55B,EAAAsH,MAAA,CAAAuyB,uBAAA,GACA75B,EAAA85B,gBAAA,EAAA95B,CAAAA,EAAA85B,gBAAA,CAAA95B,EAAAsH,MAAA,CAAAwyB,gBAAA,EACA,CACA,SAAAmB,GAAAj7B,CAAA,EACAA,EAAA45B,iBAAA,CACA55B,EAAA65B,uBAAA,CACA75B,EAAA85B,gBAAA,CACA,EACA,CACA,SAAA8E,GAAA5+B,CAAA,EACAA,EAAA4+B,aAAA,EACA,CACA,SAAAP,GAAAr+B,CAAA,EACAA,EAAAq+B,iBAAA,EACA,CACA,SAAAC,GAAAt+B,CAAA,EACAA,EAAA03B,aAAA,GACA,CACA,SAAA6G,GAAAv+B,CAAA,EACA,IAAYsS,cAAAA,CAAA,EAAgBtS,EAAAsB,OAAA,CAC5BgR,GAAAA,EAAA4U,QAAA,GAAA4e,qBAAA,EACAxzB,EAAAwpB,MAAA,wBAEA97B,EAAAy5B,cAAA,EACA,CACA,SAAA6C,GAAAt8B,CAAA,EACAA,EAAAs8B,eAAA,GACAt8B,EAAAsgC,WAAA,CAAAtgC,EAAA28B,cAAA,CAAA38B,EAAAoB,MAAA,CAAA8F,KAAAA,EACAlH,EAAA45B,iBAAA,GACA,CACA,SAAAmB,GAAA/6B,CAAA,EACAA,EAAA+6B,kBAAA,EACA,CACA,SAAAC,GAAAh7B,CAAA,EACAA,EAAAg7B,cAAA,EACA,CACA,SAAA2C,GAAA39B,CAAA,EACAA,EAAA29B,oBAAA,EACA,CACA,SAAAkB,GAAAhN,CAAA,EACAA,EAAAkG,kBAAA,EACA,CACA,SAAAyK,GAAAC,CAAA,CAAA79B,CAAA,CAAAgJ,CAAA,EACA60B,EAAA37B,SAAA,CAAuB,GAAAH,EAAAC,CAAA,EAAShC,EAAAkC,SAAA,GAAA8G,GAChC60B,EAAA57B,KAAA,CAAmB,GAAAF,EAAAC,CAAA,EAAShC,EAAAiC,KAAA,GAAA+G,GAC5B60B,EAAAh8B,MAAA,CAAA7B,EAAA6B,MAAA,CACAg8B,EAAA/7B,WAAA,CAAA9B,EAAA8B,WAAA,CAEA,SAAAg8B,GAAAD,CAAA,CAAA9wB,CAAA,CAAAgxB,CAAA,CAAA/0B,CAAA,EACA60B,EAAAn8B,GAAA,CAAiB,GAAAK,EAAAC,CAAA,EAAS+K,EAAArL,GAAA,CAAAq8B,EAAAr8B,GAAA,CAAAsH,GAC1B60B,EAAAp8B,GAAA,CAAiB,GAAAM,EAAAC,CAAA,EAAS+K,EAAAtL,GAAA,CAAAs8B,EAAAt8B,GAAA,CAAAuH,EAC1B,CAKA,SAAA00B,GAAAtiC,CAAA,EACA,OAAAA,EAAAw3B,eAAA,EAAAx3B,KAAAkH,IAAAlH,EAAAw3B,eAAA,CAAAsL,WAAA,CAEA,IAAAjG,GAAA,CACAxxB,SAAA,IACAC,KAAA,aAEAy6B,GAAA,uBAAAC,WACAA,UAAAC,SAAA,EACAD,UAAAC,SAAA,CAAAC,WAAA,GAAAC,QAAA,CAAAC,GAMAC,GAAAN,GAAA,kBAAAA,GAAA,WACAjkC,KAAA6gB,KAAA,CACMzV,EAAAC,CAAI,CACV,SAAA0yB,GAAAz5B,CAAA,EAEAA,EAAAE,GAAA,CAAA+/B,GAAAjgC,EAAAE,GAAA,EACAF,EAAAC,GAAA,CAAAggC,GAAAjgC,EAAAC,GAAA,CACA,CAKA,SAAAm9B,GAAAC,CAAA,CAAAnM,CAAA,CAAA9vB,CAAA,EACA,MAAAi8B,aAAAA,GACAA,oBAAAA,IpF1hDA3hC,CAAAA,IAAAA,KAAAC,GAAA,CAAA4H,GoF2hD+B2tB,GAAYhB,GAAW9uB,GpF3hDtD,CoF4hDA,CACA,SAAAu4B,GAAA//B,CAAA,EACA,IAAA6S,EACA,OAAA7S,IAAAA,EAAAktB,IAAA,UAAAra,CAAAA,EAAA7S,EAAAitB,MAAA,GAAApa,KAAA,IAAAA,EAAA,OAAAA,EAAAwsB,OAAA,CACA,CCziDA,IAAAiH,GAA+BlN,GAAoB,CACnDC,qBAAA,CAAAkN,EAAAzK,IAA2C36B,EAAWolC,EAAA,SAAAzK,GACtDvC,cAAA,MACA54B,EAAA6jB,SAAAgiB,eAAA,CAAAC,UAAA,EAAAjiB,SAAAkiB,IAAA,CAAAD,UAAA,CACA7lC,EAAA4jB,SAAAgiB,eAAA,CAAAG,SAAA,EAAAniB,SAAAkiB,IAAA,CAAAC,SAAA,CACA,EACAnN,kBAAA,MACA,GCPAzM,GAAA,CACA9gB,QAAA/E,KAAAA,CACA,EACA0/B,GAA2BxN,GAAoB,CAC/CG,cAAA,KACA54B,EAAA+J,EAAA+7B,UAAA,CACA7lC,EAAA8J,EAAAi8B,SAAA,CACA,EACArN,cAAA,KACA,IAAAvM,GAAA9gB,OAAA,EACA,IAAA46B,EAAA,IAAqCP,GAAsB,IAC3DO,EAAA7X,KAAA,CAAAxsB,QACAqkC,EAAAxV,UAAA,EAAsC8N,aAAA,KACtCpS,GAAA9gB,OAAA,CAAA46B,CACA,CACA,OAAA9Z,GAAA9gB,OAAA,EAEAwtB,eAAA,CAAA/uB,EAAAf,KACAe,EAAA2e,KAAA,CAAA7e,SAAA,CAAAb,KAAAzC,IAAAyC,EAAAA,EAAA,MACA,EACA6vB,kBAAA,GAAAh3B,UAAAA,OAAA8U,gBAAA,CAAA5M,GAAAo8B,QAAA,+BGvBA,SAAAC,GAAAppB,CAAA,CAAAqpB,CAAA,EACA,IAAAt1B,MAAAgH,OAAA,CAAAsuB,GACA,SACA,IAAAC,EAAAD,EAAA/hC,MAAA,CACA,GAAAgiC,IAAAtpB,EAAA1Y,MAAA,CACA,SACA,QAAAC,EAAA,EAAoBA,EAAA+hC,EAAgB/hC,IACpC,GAAA8hC,CAAA,CAAA9hC,EAAA,GAAAyY,CAAA,CAAAzY,EAAA,CACA,SAEA,QACA,6BCTA,SAAAgiC,GAAA50B,CAAA,CAAAiN,CAAA,CAAA4nB,CAAA,EACA,IAAA/d,EAAA9W,EAAA4U,QAAA,GACA,MAAW,GAAAkgB,GAAAlnB,CAAA,EAAuBkJ,EAAA7J,EAAA4nB,KAAAjgC,IAAAigC,EAAAA,EAAA/d,EAAA+d,MAAA,CAAA70B,EAClC,6BEcA,SAAA+0B,GAAA/0B,CAAA,CAAAg1B,CAAA,EAA6DzuB,MAAAA,EAAA,EAAA0uB,mBAAAA,CAAA,CAAApjC,KAAAA,CAAA,EAAsC,EAAI,EACvG,IAAA0O,EACA,IAAU/G,WAAAA,EAAAwG,EAAA/G,oBAAA,GAAAi8B,cAAAA,CAAA,IAAApmC,EAAA,CAA8EkmC,EACxFC,GACAz7B,CAAAA,EAAAy7B,CAAA,EACA,IAAAngB,EAAA,GACAqgB,EAAAtjC,GACAmO,EAAA2Y,cAAA,EACA3Y,EAAA2Y,cAAA,CAAAyc,QAAA,GAAAvjC,EAAA,CACA,QAAA4H,KAAA3K,EAAA,CACA,IAAAuI,EAAA2I,EAAAC,QAAA,CAAAxG,EAAA,OAAA8G,CAAAA,EAAAP,EAAAilB,YAAA,CAAAxrB,EAAA,GAAA8G,KAAA,IAAAA,EAAAA,EAAA,MACA80B,EAAAvmC,CAAA,CAAA2K,EAAA,CACA,GAAA47B,KAAAzgC,IAAAygC,GACAF,GACAG,SAnBA,CAAgCC,cAAAA,CAAA,CAAAC,eAAAA,CAAA,CAA+B,CAAA/7B,CAAA,EAC/D,IAAAg8B,EAAAF,EAAAxiB,cAAA,CAAAtZ,IAAA+7B,CAAA,IAAAA,CAAA,CAAA/7B,EAAA,CAEA,OADA+7B,CAAA,CAAA/7B,EAAA,IACAg8B,CACA,EAeAN,EAAA17B,GACA,SAEA,IAAAoc,EAAA,CACAtP,MAAAA,EACA,GAAehN,GAAkBC,GAAA,GAAiBC,EAAA,EAMlDmc,EAAA,GACA,GAAA1lB,OAAAwlC,sBAAA,EACA,IAAA/J,EAA6B3F,GAAoBhmB,GACjD,GAAA2rB,EAAA,CACA,IAAA1c,EAAA/e,OAAAwlC,sBAAA,CAAA/J,EAAAlyB,EAA+E1I,EAAAO,EAAK,CACpF,QAAA2d,IACA4G,EAAA5G,SAAA,CAAAA,EACA2G,EAAA,GAEA,CACA,CACQc,GAAoB1W,EAAAvG,GAC5BpC,EAAA8W,KAAA,CAAoBwH,GAAkBlc,EAAApC,EAAAg+B,EAAAr1B,EAAAgrB,kBAAA,EAA8D9yB,GAAAkB,CAAc,CAAAC,GAAA,CAAAI,GAClH,CAAgB5H,KAAA,IAChBgkB,EAAA7V,EAAA4V,IACA,IAAAlD,EAAArb,EAAAqb,SAAA,CACAA,GACAoC,EAAA7jB,IAAA,CAAAyhB,EAEA,CAQA,OAPAwiB,GACA/sB,QAAA+M,GAAA,CAAAJ,GAAA/M,IAAA,MACYhX,EAAAO,EAAK,CAAA1D,MAAA,MACjBsnC,GAAiCS,SDnDjC31B,CAAA,CAAAiN,CAAA,EAEA,IAAUioB,cAAAA,EAAA,EAAkB,CAAA17B,WAAAA,EAAA,EAAiB,IAAA1K,EAAA,CAAcuV,GADxBrE,EAAAiN,IACwB,GAE3D,QAAAxT,KADA3K,EAAA,CAAe,GAAAA,CAAA,IAAAomC,CAAA,EACf,CACA,IAAA79B,EAAsB,GAAAu+B,GAAAjoB,CAAA,EAA4B7e,CAAA,CAAA2K,EAAA,EAZlDuG,EAAA61B,QAAA,CAaAp8B,GAZAuG,EAAAC,QAAA,CAYAxG,GAZA0G,GAAA,CAYA9I,GATA2I,EAAA81B,QAAA,CASAr8B,EAToC,GAAAq3B,GAAAC,EAAA,EASpC15B,GACA,CACA,EC2C0C2I,EAAAk1B,EAC1C,EACA,GAEApgB,CACA,CCrEA,SAAAihB,GAAA/1B,CAAA,CAAAg2B,CAAA,CAAAhnC,EAAA,EAA4D,EAC5D,IAAAuR,EACA,IAAA8D,EAAqBuwB,GAAc50B,EAAAg2B,EAAAhnC,SAAAA,EAAA6C,IAAA,CACnC,OAAA0O,CAAAA,EAAAP,EAAA6X,eAAA,GAAAtX,KAAA,IAAAA,EAAA,OAAAA,EAAAs0B,MAAA,CACAjgC,KAAAA,GACA,CAAU4E,WAAAA,EAAAwG,EAAA/G,oBAAA,QAA0DoL,GAAA,EACpErV,CAAAA,EAAAimC,kBAAA,EACAz7B,CAAAA,EAAAxK,EAAAimC,kBAAA,EAMA,IAAAgB,EAAA5xB,EACA,IAAA8D,QAAA+M,GAAA,CAA4B6f,GAAa/0B,EAAAqE,EAAArV,IACzC,IAAAmZ,QAAAH,OAAA,GAKAkuB,EAAAl2B,EAAAm2B,eAAA,EAAAn2B,EAAAm2B,eAAA,CAAAC,IAAA,CACA,CAAAC,EAAA,KACA,IAAoBpgB,cAAAA,EAAA,EAAAC,gBAAAA,CAAA,CAAAC,iBAAAA,CAAA,EAAwD3c,EAC5E,OAAA88B,SAkBAt2B,CAAA,CAAAg2B,CAAA,CAAA/f,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAnnB,CAAA,EACA,IAAA8lB,EAAA,GACAyhB,EAAA,CAAAv2B,EAAAm2B,eAAA,CAAAC,IAAA,IAAAlgB,EACAsgB,EAAArgB,IAAAA,EACA,CAAAvjB,EAAA,IAAAA,EAAAsjB,EACA,CAAAtjB,EAAA,IAAA2jC,EAAA3jC,EAAAsjB,EAUA,OATA9W,MAAAC,IAAA,CAAAW,EAAAm2B,eAAA,EACApQ,IAAA,CAAA0Q,IACA52B,OAAA,EAAAimB,EAAAlzB,KACAkzB,EAAA0D,MAAA,kBAAAwM,GACAlhB,EAAA7jB,IAAA,CAAA8kC,GAAAjQ,EAAAkQ,EAAA,CACA,GAAAhnC,CAAA,CACAuX,MAAA0P,EAAAugB,EAAA5jC,EACA,GAASmV,IAAA,KAAA+d,EAAA0D,MAAA,qBAAAwM,IACT,GACA7tB,QAAA+M,GAAA,CAAAJ,EACA,EAlCA9U,EAAAg2B,EAAA/f,EAAAogB,EAAAngB,EAAAC,EAAAnnB,EACA,EACA,IAAAmZ,QAAAH,OAAA,GAKA,CAAY+N,KAAAA,CAAA,EAAOvc,EACnB,IAAAuc,EAOA,OAAA5N,QAAA+M,GAAA,EAAA+gB,IAAAC,EAAAlnC,EAAAuX,KAAA,GAPA,EACA,IAAAmwB,EAAAC,EAAA,CAAA5gB,mBAAAA,EACA,CAAAkgB,EAAAC,EAAA,CACA,CAAAA,EAAAD,EAAA,CACA,OAAAS,IAAA3uB,IAAA,KAAA4uB,IACA,CAIA,CAkBA,SAAAF,GAAAnnC,CAAA,CAAAC,CAAA,EACA,OAAAD,EAAAsnC,gBAAA,CAAArnC,EACA,CE5DA,IAAAsnC,GAAwBC,GAAArxB,CAAY,CAAA9S,MAAA,CCMpCokC,GAAA,IAAiCD,GAAA1sB,CAAoB,EAAAwF,OAAA,GACrDonB,GAA0BF,GAAA1sB,CAAoB,CAAAzX,MAAA,CA6S9C,SAAAskC,GAAAC,EAAA,IACA,OACAA,SAAAA,EACA3B,cAAA,GACAC,eAAA,GACA2B,mBAAA,EACA,CACA,CACA,SAAAC,KACA,OACAhlB,QAAA6kB,GAAA,IACAI,YAAAJ,KACAK,WAAAL,KACAM,SAAAN,KACAO,UAAAP,KACAQ,WAAAR,KACAS,KAAAT,IACA,CACA,CCrUA,MAAAU,WAA+BnqC,EAM/BC,YAAAC,CAAA,EACA,MAAAA,GACAA,EAAAirB,cAAA,EAAAjrB,CAAAA,EAAAirB,cAAA,CAAsDif,SDEtD53B,CAAA,EACA,IAAAoS,EAHA,GAAAjK,QAAA+M,GAAA,CAAAJ,EAAArV,GAAA,GAAyDiT,UAAAA,CAAA,CAAA1jB,QAAAA,CAAA,CAAoB,GAAK6oC,CFRlF,SAAA73B,CAAA,CAAAiN,CAAA,CAAAje,EAAA,EAAqE,MAErE0jB,EACA,GAFA1S,EAAAwpB,MAAA,kBAAAvc,GAEA7N,MAAAgH,OAAA,CAAA6G,GAEAyF,EAAAvK,QAAA+M,GAAA,CADAjI,EAAAxN,GAAA,IAAuDs2B,GAAc/1B,EAAAg2B,EAAAhnC,UAGrE,oBAAAie,EACAyF,EAAoBqjB,GAAc/1B,EAAAiN,EAAAje,OAElC,CACA,IAAA8oC,EAAA,mBAAA7qB,EACc2nB,GAAc50B,EAAAiN,EAAAje,EAAA6lC,MAAA,EAC5B5nB,EACAyF,EAAAvK,QAAA+M,GAAA,CAAgC6f,GAAa/0B,EAAA83B,EAAA9oC,GAC7C,CACA,OAAA0jB,EAAA3K,IAAA,MACA/H,EAAAwpB,MAAA,qBAAAvc,EACA,EACA,GERAjN,EAHsG0S,EAAA1jB,KAItGoa,EAAAguB,KACAW,EAAA,GAKAC,EAAA,IAAAC,EAAAhrB,KACA,IAAA1M,EACA,IAAA8D,EAAyBuwB,GAAc50B,EAAAiN,EAAApb,SAAAA,EACvC,OAAA0O,CAAAA,EAAAP,EAAA6X,eAAA,GAAAtX,KAAA,IAAAA,EAAA,OAAAA,EAAAs0B,MAAA,CACAjgC,KAAAA,GACA,GAAAyP,EAAA,CACA,IAAoB7K,WAAAA,CAAA,CAAA07B,cAAAA,CAAA,IAAApmC,EAAA,CAAuCuV,EAC3D4zB,EAAA,CAAoB,GAAAA,CAAA,IAAAnpC,CAAA,IAAAomC,CAAA,CACpB,CACA,OAAA+C,CACA,EAkBA,SAAAC,EAAAC,CAAA,EACA,IAAgBrhB,MAAAA,CAAA,EAAQ9W,EACxBqgB,EAAwB+X,SDhDxBA,EAAAp4B,CAAA,EACA,IAAAA,EACA,OACA,IAAAA,EAAAq4B,qBAAA,EACA,IAAAhY,EAAArgB,EAAAhL,MAAA,EACAojC,EAAAp4B,EAAAhL,MAAA,MAKA,OAHAJ,KAAAA,IAAAoL,EAAA8W,KAAA,CAAAyE,OAAA,EACA8E,CAAAA,EAAA9E,OAAA,CAAAvb,EAAA8W,KAAA,CAAAyE,OAAA,EAEA8E,CACA,CACA,IAAAA,EAAA,GACA,QAAAztB,EAAA,EAAoBA,EAAAikC,GAAqBjkC,IAAA,CACzC,IAAAO,EAAqB2jC,GAAArxB,CAAY,CAAA7S,EAAA,CACjC0lC,EAAAt4B,EAAA8W,KAAA,CAAA3jB,EAAA,CACY,IAAAolC,GAAAp1B,CAAA,EAAcm1B,IAAAA,CAAA,IAAAA,CAAA,GAC1BjY,CAAAA,CAAA,CAAAltB,EAAA,CAAAmlC,CAAA,CAEA,CACA,OAAAjY,CACA,EC2ByCrgB,EAAAhL,MAAA,MAKzC8f,EAAA,GAKA0jB,EAAA,IAAA/7B,IAMAg8B,EAAA,GAKAC,EAAAzlC,IAOA,QAAAL,EAAA,EAAwBA,EAAAokC,GAAuBpkC,IAAA,KA8N/C8hC,EA7NA,IAAA7iC,EAAAklC,EAAA,CAAAnkC,EAAA,CACA+lC,EAAAvvB,CAAA,CAAAvX,EAAA,CACAymC,EAAAxhB,KAAAliB,IAAAkiB,CAAA,CAAAjlB,EAAA,CACAilB,CAAA,CAAAjlB,EAAA,CACAwuB,CAAA,CAAAxuB,EAAA,CACA+mC,EAAkC,GAAAL,GAAAp1B,CAAA,EAAcm1B,GAKhDO,EAAAhnC,IAAAsmC,EAAAQ,EAAAzB,QAAA,KACA,MAAA2B,GACAH,CAAAA,EAAA9lC,CAAAA,EAOA,IAAAkmC,EAAAR,IAAAjY,CAAA,CAAAxuB,EAAA,EACAymC,IAAAxhB,CAAA,CAAAjlB,EAAA,EACA+mC,EAeA,GAXAE,GACAf,GACA/3B,EAAA+4B,sBAAA,EACAD,CAAAA,EAAA,IAMAH,EAAApD,aAAA,EAAwC,GAAAkD,CAAA,EAIxC,CAAAE,EAAAzB,QAAA,EAAA2B,OAAAA,GAEA,CAAAP,GAAA,CAAAK,EAAAK,QAAA,EAEgB,GAAAC,GAAAC,CAAA,EAAmBZ,IACnC,kBAAAA,EACA,SAOA,IAAAa,GA0KAzE,EA1KAiE,EAAAK,QAAA,CA2KA,iBA3KAV,EA4KAjtB,IAAAqpB,IAEAt1B,MAAAgH,OAAA,CA9KAkyB,IA+KA,CAAgB7D,GA/KhB6D,EA+K8B5D,IA9K9B0E,EAAAD,GAEAtnC,IAAAsmC,GACAQ,EAAAzB,QAAA,EACA,CAAA4B,GACAF,GAEAhmC,EAAA8lC,GAAAE,EACAS,EAAA,GAKAC,EAAAl6B,MAAAgH,OAAA,CAAAkyB,GAAAA,EAAA,CAAAA,EAAA,CAKAiB,EAAAD,EAAAE,MAAA,CAAAxB,EAAAnmC,GAAA,GACA,MAAAgnC,GACAU,CAAAA,EAAA,IAUA,IAAoBpC,mBAAAA,EAAA,IAA0BwB,EAC9Cc,EAAA,CACA,GAAAtC,CAAA,CACA,GAAAoC,CAAA,EAEAG,EAAA,IACAN,EAAA,GACAZ,EAAAn/B,GAAA,CAAAI,KACA4/B,EAAA,GACAb,EAAA12B,MAAA,CAAArI,IAEAk/B,EAAAnD,cAAA,CAAA/7B,EAAA,IACA,IAAAyH,EAAAlB,EAAAC,QAAA,CAAAxG,GACAyH,GACAA,CAAAA,EAAAy4B,SAAA,IACA,EACA,QAAAlgC,KAAAggC,EAAA,CACA,IAAApuB,EAAAkuB,CAAA,CAAA9/B,EAAA,CACAi7B,EAAAyC,CAAA,CAAA19B,EAAA,CAEA,IAAAg/B,EAAA1lB,cAAA,CAAAtZ,IAMoB,GAAAmgC,GAAAlqB,CAAA,EAAiBrE,IAAU,GAAAuuB,GAAAlqB,CAAA,EAAiBglB,GACzBD,GAAcppB,EAAAqpB,GAGrDrpB,IAAAqpB,GAYArpB,KAAAzW,IAAAyW,GAAAmtB,EAAAn/B,GAAA,CAAAI,GAKAigC,EAAAjgC,GAOAk/B,EAAApD,aAAA,CAAA97B,EAAA,IArBA4R,MAAAA,EAEAquB,EAAAjgC,GAIA++B,EAAAl3B,GAAA,CAAA7H,EAiBA,CAKAk/B,EAAAK,QAAA,CAAAV,EACAK,EAAAxB,kBAAA,CAAAoC,EAIAZ,EAAAzB,QAAA,EACAuB,CAAAA,EAAA,CAAoC,GAAAA,CAAA,IAAAc,CAAA,GAEpCxB,GAAA/3B,EAAA65B,qBAAA,EACAT,CAAAA,EAAA,IAOA,IAAA5D,EAAA,CADAsD,CAAAA,GAAAK,CAAA,GACAE,EACAD,GAAA5D,GACA1gB,EAAA7jB,IAAA,IAAAqoC,EAAA75B,GAAA,MACAiT,UAAAA,EACA1jB,QAAA,CAA+B6C,KAAAA,CAAA,CAC/B,IAEA,CAMA,GAAA2mC,EAAApC,IAAA,EACA,IAAA0D,EAAA,GACAtB,EAAA34B,OAAA,KACA,IAAAk6B,EAAA/5B,EAAAg6B,aAAA,CAAAvgC,GACAyH,EAAAlB,EAAAC,QAAA,CAAAxG,GACAyH,GACAA,CAAAA,EAAAy4B,SAAA,KAEAG,CAAA,CAAArgC,EAAA,CAAAsgC,MAAAA,EAAAA,EAAA,IACA,GACAjlB,EAAA7jB,IAAA,EAA8ByhB,UAAAonB,CAAA,EAC9B,CACA,IAAAG,EAAA1mB,CAAAA,CAAAuB,EAAAniB,MAAA,CAOA,OANAolC,GACAjhB,CAAAA,CAAA,IAAAA,EAAAyE,OAAA,EAAAzE,EAAAyE,OAAA,GAAAzE,EAAA1E,OAAA,GACA,CAAApS,EAAA+4B,sBAAA,EACAkB,CAAAA,EAAA,IAEAlC,EAAA,GACAkC,EAAA7nB,EAAA0C,GAAA3M,QAAAH,OAAA,EACA,CAkBA,OACAkwB,eAAAA,EACAtf,UAhBA,SAAA/mB,CAAA,CAAAqlC,CAAA,EACA,IAAA32B,EAEA,GAAA6I,CAAA,CAAAvX,EAAA,CAAAqlC,QAAA,GAAAA,EACA,OAAA/uB,QAAAH,OAAA,EAEA,QAAAzH,CAAAA,EAAAP,EAAAm2B,eAAA,GAAA51B,KAAA,IAAAA,GAAAA,EAAAV,OAAA,KAA0G,IAAAU,EAAQ,cAAAA,CAAAA,EAAAulB,EAAAnN,cAAA,GAAApY,KAAA,IAAAA,EAAA,OAAAA,EAAAqY,SAAA,CAAA/mB,EAAAqlC,EAAA,GAClH9tB,CAAA,CAAAvX,EAAA,CAAAqlC,QAAA,CAAAA,EACA,IAAApiB,EAAAojB,EAAArmC,GACA,QAAA4H,KAAA2P,EACAA,CAAA,CAAA3P,EAAA,CAAA87B,aAAA,IAEA,OAAAzgB,CACA,EAIAolB,mBAjQA,SAAAC,CAAA,EACA/nB,EAAA+nB,EAAAn6B,EACA,EAgQAo1B,SAAA,IAAAhsB,EACAgxB,MAAA,KACAhxB,EAAAguB,KACAW,EAAA,EACA,CACA,CACA,ECjS0ErqC,EAAA,CAC1E,CACA2sC,qCAAA,CACA,IAAgBjoB,QAAAA,CAAA,EAAU,KAAA1kB,IAAA,CAAAknB,QAAA,GACd,GAAAqkB,GAAAC,CAAA,EAAmB9mB,IAC/B,MAAAkoB,eAAA,CAAAloB,EAAAwK,SAAA,MAAAlvB,IAAA,EAEA,CAIAgvB,OAAA,CACA,KAAA2d,mCAAA,EACA,CACAzsC,QAAA,CACA,IAAgBwkB,QAAAA,CAAA,EAAU,KAAA1kB,IAAA,CAAAknB,QAAA,GAC1B,CAAgBxC,QAAAmoB,CAAA,EAAuB,KAAA7sC,IAAA,CAAAwxB,SAAA,KACvC9M,IAAAmoB,GACA,KAAAF,mCAAA,EAEA,CACAxd,SAAA,CACA,IAAAtc,EACA,KAAA7S,IAAA,CAAAirB,cAAA,CAAAyhB,KAAA,GACA,OAAA75B,CAAAA,EAAA,KAAA+5B,eAAA,GAAA/5B,KAAA,IAAAA,GAAAA,EAAAyS,IAAA,MACA,CACA,CCpCA,IAAIwnB,GAAE,CACN,OAAAC,WAAmCjtC,EACnCC,aAAA,CACA,SAAAuvB,WACA,KAAAyD,EAAA,CAAkB+Z,IAClB,CACA5sC,QAAA,CACA,SAAAF,IAAA,CAAAmqB,eAAA,CACA,OACA,IAAgBC,UAAAA,CAAA,CAAAkH,eAAAA,CAAA,EAA4B,KAAAtxB,IAAA,CAAAmqB,eAAA,CAC5C,CAAgBC,UAAA4iB,CAAA,EAA2B,KAAAhtC,IAAA,CAAAitC,mBAAA,KAC3C,SAAAjtC,IAAA,CAAAirB,cAAA,EAAAb,IAAA4iB,EACA,OAEA,IAAAE,EAAA,KAAAltC,IAAA,CAAAirB,cAAA,CAAAC,SAAA,SAAAd,GACAkH,GAAA,CAAAlH,GACA8iB,EAAA7yB,IAAA,KAAAiX,EAAA,KAAAyB,EAAA,EAEA,CACA/D,OAAA,CACA,IAAgBkC,SAAAA,CAAA,EAAW,KAAAlxB,IAAA,CAAAmqB,eAAA,KAC3B+G,GACA,MAAA/B,OAAA,CAAA+B,EAAA,KAAA6B,EAAA,EAEA,CACA5D,SAAA,EACA,CEtBA,SAAAge,GAAAntC,CAAA,CAAAwpC,CAAA,EACA,IACA4D,EAAA5D,EAAA,4BAaA,OAAW9nC,EAAe1B,EAAAiM,OAAA,CAd1Bu9B,EAAA,8BAEA,CAAAppC,EAAAsC,KACA,GAAAtC,UAAAA,EAAAC,WAAA,EAA6C4F,IAC7C,OACA,IAAAmjB,EAAAppB,EAAAknB,QAAA,EACAlnB,CAAAA,EAAAirB,cAAA,EAAA7B,EAAAwgB,UAAA,EACA5pC,EAAAirB,cAAA,CAAAC,SAAA,cAAAse,GAEA,IAAA/gC,EAAA2gB,CAAA,CAAAgkB,EAAA,CACA3kC,GACYpF,EAAAO,EAAK,CAAAonB,UAAA,KAAAviB,EAAArI,EAAAsC,GAEjB,EAC0B,CAC1BnB,QAAA,CAAAvB,EAAAknB,QAAA,GAAAkmB,EAAA,EAEA,CACA,MAAAC,WAA2BvtC,EAC3BkvB,OAAA,CACA,KAAAG,OAAA,CAAuB,GAAA5qB,EAAAC,CAAA,EAAI2oC,GAAA,KAAAntC,IAAA,KAAAmtC,GAAA,KAAAntC,IAAA,KAC3B,CACAmvB,SAAA,EACA,CC1BA,MAAAme,WAA2BxtC,EAC3BC,aAAA,CACA,SAAAuvB,WACA,KAAAka,QAAA,GACA,CACA+D,SAAA,CACA,IAAAC,EAAA,GAOA,IACAA,EAAA,KAAAxtC,IAAA,CAAAiM,OAAA,CAAAwhC,OAAA,kBACA,CACA,MAAA/wB,EAAA,CACA8wB,EAAA,EACA,CACAA,GAAA,KAAAxtC,IAAA,CAAAirB,cAAA,GAEA,KAAAjrB,IAAA,CAAAirB,cAAA,CAAAC,SAAA,kBACA,KAAAse,QAAA,IACA,CACAkE,QAAA,CACA,KAAAlE,QAAA,OAAAxpC,IAAA,CAAAirB,cAAA,GAEA,KAAAjrB,IAAA,CAAAirB,cAAA,CAAAC,SAAA,kBACA,KAAAse,QAAA,IACA,CACAxa,OAAA,CACA,KAAAG,OAAA,CAAuB,GAAA5qB,EAAAC,CAAA,EAAKrD,EAAW,KAAAnB,IAAA,CAAAiM,OAAA,kBAAAshC,OAAA,IAAoDpsC,EAAW,KAAAnB,IAAA,CAAAiM,OAAA,iBAAAyhC,MAAA,IACtG,CACAve,SAAA,EACA,CC/BA,IAAAwe,GAAA,CAAArmC,EAAA8wB,IACA,EAAAA,IAGA9wB,IAAA8wB,GAIAuV,GAAArmC,EAAA8wB,EAAAwV,aAAA,GCLA,SAAAC,GAAApoC,CAAA,CAAA3E,CAAA,EACA,IAAAA,EACA,OACA,IAAAgtC,EAAA,IAAAC,aAAA,UAAAtoC,GACA3E,EAAAgtC,EAAmCttC,EAAgBstC,GACnD,CACA,MAAAE,WAA2BluC,EAC3BC,aAAA,CACA,SAAAuvB,WACA,KAAA2e,oBAAA,CAAoC/gC,EAAAC,CAAI,CACxC,KAAA+gC,kBAAA,CAAkChhC,EAAAC,CAAI,CACtC,KAAAghC,yBAAA,CAAyCjhC,EAAAC,CAAI,CAC7C,KAAAihC,iBAAA,EAAA/rC,EAAAgsC,KACA,QAAAC,UAAA,CACA,OACA,KAAAJ,kBAAA,GACA,IAAA9kB,EAAA,KAAAppB,IAAA,CAAAknB,QAAA,GAiBAqnB,EAA4C7sC,EAAec,OAAA,YAhB3D,CAAAgsC,EAAAC,KACA,SAAAC,aAAA,GACA,OACA,IAAwBC,MAAAA,CAAA,CAAAC,YAAAA,CAAA,CAAAC,gBAAAA,CAAA,EAAsC,KAAA7uC,IAAA,CAAAknB,QAAA,GAK9DpmB,EAAA,GACqB6sC,GAAa,KAAA3tC,IAAA,CAAAiM,OAAA,CAAAuiC,EAAAptC,MAAA,EAElCutC,EADAC,EAEA9tC,GACoBuC,EAAAO,EAAK,CAAA1D,MAAA,KAAAY,EAAA0tC,EAAAC,GAEzB,EAC2D,CAC3DltC,QAAA,CAAA6nB,CAAAA,EAAAulB,KAAA,EAAAvlB,EAAA,YACA,GACA0lB,EAAgDptC,EAAec,OAAA,iBAAAusC,EAAAC,IAAA,KAAAC,WAAA,CAAAF,EAAAC,GAAA,CAC/DztC,QAAA,CAAA6nB,CAAAA,EAAAwlB,WAAA,EACAxlB,EAAA,gBACA,EACA,MAAA8kB,kBAAA,CAAsC,GAAA3pC,EAAAC,CAAA,EAAI+pC,EAAAO,GAC1C,KAAAI,UAAA,CAAA7sC,EAAAgsC,EACA,EACA,KAAAc,oBAAA,MAoBA,IAAAC,EAA0CjuC,EAAW,KAAAnB,IAAA,CAAAiM,OAAA,WAnBrD,IACA,UAAAojC,EAAAtjC,GAAA,OAAAuiC,UAAA,GAYA,KAAAJ,kBAAA,GACA,KAAAA,kBAAA,CAA0C/sC,EAAW,KAAAnB,IAAA,CAAAiM,OAAA,SAXrD,IACA,UAAAqjC,EAAAvjC,GAAA,OAAA2iC,aAAA,IAEAb,GAAA,MAAAztC,EAAAsC,KACA,IAAgCisC,MAAAA,CAAA,EAAQ,KAAA3uC,IAAA,CAAAknB,QAAA,GACxCynB,GAC4BtrC,EAAAO,EAAK,CAAAonB,UAAA,KAAA2jB,EAAAvuC,EAAAsC,GAEjC,EACA,GAGAmrC,GAAA,QAAAztC,EAAAsC,KACA,KAAAwsC,UAAA,CAAA9uC,EAAAsC,EACA,GACA,GAOA6sC,EAAuCpuC,EAAW,KAAAnB,IAAA,CAAAiM,OAAA,QALlD,KACA,KAAAqiC,UAAA,EAEAT,GAAA,UAAAkB,EAAAC,IAAA,KAAAC,WAAA,CAAAF,EAAAC,GACA,EAEA,MAAAb,yBAAA,CAA6C,GAAA5pC,EAAAC,CAAA,EAAI4qC,EAAAG,EACjD,CACA,CACAL,WAAA9uC,CAAA,CAAAsC,CAAA,EACA,KAAA4rC,UAAA,IACA,IAAgBkB,WAAAA,CAAA,CAAA3F,SAAAA,CAAA,EAAuB,KAAA7pC,IAAA,CAAAknB,QAAA,GAIvC2iB,GAAA,KAAA7pC,IAAA,CAAAirB,cAAA,EACA,KAAAjrB,IAAA,CAAAirB,cAAA,CAAAC,SAAA,gBAEAskB,GACYnsC,EAAAO,EAAK,CAAAonB,UAAA,KAAAwkB,EAAApvC,EAAAsC,GAEjB,CACAgsC,eAAA,CAOA,OANA,KAAAR,kBAAA,GACA,KAAAI,UAAA,IAEAllB,IADA,CAAAppB,IAAA,CAAAknB,QAAA,GACA2iB,QAAA,OAAA7pC,IAAA,CAAAirB,cAAA,EACA,KAAAjrB,IAAA,CAAAirB,cAAA,CAAAC,SAAA,gBAEA,CAAgBjlB,GAChB,CACAgpC,YAAA7uC,CAAA,CAAAsC,CAAA,EACA,SAAAgsC,aAAA,GACA,OACA,IAAgBE,YAAAA,CAAA,EAAc,KAAA5uC,IAAA,CAAAknB,QAAA,GAC9B0nB,GACYvrC,EAAAO,EAAK,CAAAonB,UAAA,KAAA4jB,EAAAxuC,EAAAsC,GAEjB,CACAssB,OAAA,CACA,IAAA5F,EAAA,KAAAppB,IAAA,CAAAknB,QAAA,GACAuoB,EAAsC/tC,EAAe0nB,EAAAylB,eAAA,CAAArsC,OAAA,KAAAxC,IAAA,CAAAiM,OAAA,oBAAAmiC,iBAAA,EACrD7sC,QAAA,CAAA6nB,CAAAA,EAAAomB,UAAA,EACApmB,EAAA,eACA,GACAsmB,EAAoCvuC,EAAW,KAAAnB,IAAA,CAAAiM,OAAA,cAAAkjC,oBAAA,CAC/C,MAAAlB,oBAAA,CAAoC,GAAA1pC,EAAAC,CAAA,EAAIirC,EAAAC,EACxC,CACAvgB,SAAA,CACA,KAAA8e,oBAAA,GACA,KAAAC,kBAAA,GACA,KAAAC,yBAAA,EACA,CACA,CC1HA,IAAAwB,GAAA,IAAAlmB,QAMAmmB,GAAA,IAAAnmB,QACAomB,GAAA,IACA,IAAApnC,EAAAknC,GAAAn9B,GAAA,CAAAs9B,EAAA1uC,MAAA,CACAqH,CAAAA,GAAAA,EAAAqnC,EACA,EACAC,GAAA,IACAC,EAAA79B,OAAA,CAAA09B,GACA,ECfAI,GAAA,CACA30B,KAAA,EACAkM,IAAA,CACA,CACA,OAAA0oB,WAA4BpwC,EAC5BC,aAAA,CACA,SAAAuvB,WACA,KAAA6gB,cAAA,IACA,KAAAC,QAAA,GACA,CACAC,eAAA,CACA,KAAAlhB,OAAA,GACA,IAAgBmhB,SAAAA,EAAA,IAAgB,KAAAtwC,IAAA,CAAAknB,QAAA,GAChC,CAAgBgG,KAAAA,CAAA,CAAAqjB,OAAAC,CAAA,CAAAC,OAAAA,EAAA,OAAAC,KAAAA,CAAA,EAAkDJ,EAClEhvC,EAAA,CACA4rB,KAAAA,EAAAA,EAAAjhB,OAAA,CAAA/E,KAAAA,EACAspC,WAAAA,EACAG,UAAA,iBAAAF,EAAAA,EAAAR,EAAA,CAAAQ,EAAA,EA+BA,OAAeG,SDbf5+B,CAAA,CAAA1Q,CAAA,CAAAmH,CAAA,EACA,IAAAooC,EAAAC,SApBA,CAAoC5jB,KAAAA,CAAA,IAAA5rB,EAAkB,EACtD,IAAAyvC,EAAA7jB,GAAA1I,SAIAorB,GAAAjkC,GAAA,CAAAolC,IACAnB,GAAAn9B,GAAA,CAAAs+B,EAAA,IAEA,IAAAC,EAAApB,GAAAp9B,GAAA,CAAAu+B,GACAhlC,EAAAklC,KAAAC,SAAA,CAAA5vC,GAQA,OAHA0vC,CAAA,CAAAjlC,EAAA,EACAilC,CAAAA,CAAA,CAAAjlC,EAAA,KAAAolC,qBAAApB,GAAA,CAAkF7iB,KAAAA,EAAA,GAAA5rB,CAAA,EAAkB,EAEpG0vC,CAAA,CAAAjlC,EAAA,EAGAzK,GAGA,OAFAquC,GAAAl9B,GAAA,CAAAT,EAAAvJ,GACAooC,EAAAO,OAAA,CAAAp/B,GACA,KACA29B,GAAAv7B,MAAA,CAAApC,GACA6+B,EAAAQ,SAAA,CAAAr/B,EACA,CACA,ECKkC,KAAAhS,IAAA,CAAAiM,OAAA,CAAA3K,EA7BlC,IACA,IAAoBgwC,eAAAA,CAAA,EAAiBxB,EAIrC,QAAAM,QAAA,GAAAkB,IAEA,KAAAlB,QAAA,CAAAkB,EAKAZ,GAAA,CAAAY,GAAA,KAAAnB,cAAA,EANA,OASAmB,GACA,MAAAnB,cAAA,KAEA,KAAAnwC,IAAA,CAAAirB,cAAA,EACA,KAAAjrB,IAAA,CAAAirB,cAAA,CAAAC,SAAA,eAAAomB,GAMA,IAAoBC,gBAAAA,CAAA,CAAAC,gBAAAA,CAAA,EAAmC,KAAAxxC,IAAA,CAAAknB,QAAA,GACvDze,EAAA6oC,EAAAC,EAAAC,CACA/oC,CAAAA,GAAAA,EAAAqnC,EACA,EAEA,CACA9gB,OAAA,CACA,KAAAqhB,aAAA,EACA,CACAnwC,QAAA,CACA,uBAAAixC,qBACA,OACA,IAAgB/nB,MAAAA,CAAA,CAAAoI,UAAAA,CAAA,EAAmB,KAAAxxB,IAAA,CACnC,2BAAAsb,IAAA,CAAAm2B,SAOA,CAAoCnB,SAAAA,EAAA,GAAe,EAAIA,SAAAoB,EAAA,IAA8B,EAAI,EACzF,UAAApB,CAAA,CAAA7qC,EAAA,GAAAisC,CAAA,CAAAjsC,EAAA,EARA2jB,EAAAoI,KAEA,KAAA6e,aAAA,EAEA,CACAlhB,SAAA,EACA,qDEjEA,IAAAwiB,GAAA,CAA+B1lC,QAAA,MAC/B2lC,GAAA,CAAmC3lC,QAAA,gCGFnC,IAAA4lC,GAAA,IAAApoB,QCQAqoB,GAAA,IAAuBjhC,GAAqB2E,GAAAC,CAAK,CAAET,GAAAC,CAAO,EAI1D88B,GAAA,GAAAD,GAAA1gC,IAAA,CAA6CR,GAAajC,ICU1DqjC,GAAA,CACA,iBACA,oBACA,SACA,sBACA,gBACA,uBACA,0BACA,OAKAC,GAQAC,4BAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,QACA,CACAtyC,YAAA,CAAkBuH,OAAAA,CAAA,CAAA8hB,MAAAA,CAAA,CAAAe,gBAAAA,CAAA,CAAAmoB,oBAAAA,CAAA,CAAAnG,sBAAAA,CAAA,CAAAoG,YAAAA,CAAA,CAA0F,CAAAjxC,EAAA,EAAc,EAK1H,KAAA2nB,eAAA,IAKA,KAAAhd,OAAA,MAIA,KAAAisB,QAAA,KAAAnpB,IAIA,KAAAyjC,aAAA,IACA,KAAA7H,qBAAA,IAQA,KAAArN,kBAAA,MAMA,KAAAl0B,MAAA,KAAA8I,IACA,KAAAmB,gBAAA,CAAgCA,GAIhC,KAAAo/B,QAAA,IAKA,KAAAC,kBAAA,KAAAxgC,IAMA,KAAAygC,gBAAA,IAIA,KAAAC,MAAA,IAMA,KAAAC,sBAAA,IACA,KAAAC,YAAA,UAAAhX,MAAA,eAAAvE,YAAA,EACA,KAAA7kB,MAAA,MACA,KAAAzG,OAAA,GAEA,KAAA8mC,YAAA,GACA,KAAAC,cAAA,MAAA/mC,OAAA,MAAAgnC,WAAA,MAAA7pB,KAAA,CAAAC,KAAA,MAAAsB,UAAA,EACA,EACA,KAAAuoB,iBAAA,GACA,KAAAvc,cAAA,MACA,IAAAvd,EAAwBF,GAAAC,CAAI,CAAAC,GAAA,EAC5B,MAAA85B,iBAAA,CAAA95B,IACA,KAAA85B,iBAAA,CAAA95B,EACgB/V,EAAAO,EAAK,CAAA8O,MAAA,MAAAA,MAAA,QAErB,EACA,IAAgB6kB,aAAAA,CAAA,CAAA0b,YAAAA,CAAA,EAA4BV,CAC5C,MAAAhb,YAAA,CAAAA,EACA,KAAA4b,UAAA,EAA4B,GAAA5b,CAAA,EAC5B,KAAA6b,aAAA,CAAAhqB,EAAAyE,OAAA,EAA+C,GAAA0J,CAAA,EAAkB,GACjE,KAAA0b,WAAA,CAAAA,EACA,KAAA3rC,MAAA,CAAAA,EACA,KAAA8hB,KAAA,CAAAA,EACA,KAAAe,eAAA,CAAAA,EACA,KAAAtT,KAAA,CAAAvP,EAAAA,EAAAuP,KAAA,KACA,KAAAy7B,mBAAA,CAAAA,EACA,KAAAhxC,OAAA,CAAAA,EACA,KAAA6qC,qBAAA,CAAAtmB,CAAAA,CAAAsmB,EACA,KAAAxB,qBAAA,CAAqC,GAAA0I,GAAA3nC,CAAA,EAAqB0d,GAC1D,KAAAopB,aAAA,CAA6B,GAAAa,GAAA7a,CAAA,EAAapP,GAC1C,KAAAopB,aAAA,EACA,MAAA/J,eAAA,KAAA15B,GAAA,EAEA,KAAAs8B,sBAAA,CAAAxlB,CAAAA,CAAAve,CAAAA,GAAAA,EAAA2E,OAAA,EAWA,IAAgBid,WAAAA,CAAA,IAAAoqB,EAAA,CAAqC,KAAApB,2BAAA,CAAA9oB,EAAA,GAA4C,MACjG,QAAArd,KAAAunC,EAAA,CACA,IAAA3pC,EAAA2pC,CAAA,CAAAvnC,EAAA,MACA7E,IAAAqwB,CAAA,CAAAxrB,EAAA,EAAmD,GAAAod,GAAAjkB,CAAA,EAAayE,IAChEA,EAAA8I,GAAA,CAAA8kB,CAAA,CAAAxrB,EAAA,IAEA,CACA,CACAijB,MAAAtkB,CAAA,EACA,KAAAuB,OAAA,CAAAvB,EACQmnC,GAAkBp/B,GAAA,CAAA/H,EAAA,MAC1B,KAAAigB,UAAA,QAAAA,UAAA,CAAAjgB,QAAA,EACA,KAAAigB,UAAA,CAAAqE,KAAA,CAAAtkB,GAEA,KAAApD,MAAA,OAAAkrC,aAAA,QAAA7H,qBAAA,EACA,MAAA4I,qBAAA,MAAAjsC,MAAA,CAAAksC,eAAA,QAEA,KAAApqC,MAAA,CAAA+I,OAAA,EAAAxI,EAAAoC,IAAA,KAAA0nC,iBAAA,CAAA1nC,EAAApC,IACaioC,GAAwB3lC,OAAA,EACzBynC,WJnKZ,GADI9B,GAAwB3lC,OAAA,IACnB0nC,GAAAp+B,CAAS,EAElB,GAAA/S,OAAAoxC,UAAA,EACA,IAAAC,EAAArxC,OAAAoxC,UAAA,6BACAE,EAAA,IAAmDnC,GAAoB1lC,OAAA,CAAA4nC,EAAApG,OAAA,CACvEoG,EAAAE,WAAA,CAAAD,GACAA,GACA,MAEQnC,GAAoB1lC,OAAA,IAE5B,II0JA,KAAAqxB,kBAAA,CACA,eAAAgV,mBAAA,EAEA,iBAAAA,mBAAA,EAEsBX,GAAoB1lC,OAAA,EAI1C,KAAA3E,MAAA,EACA,KAAAA,MAAA,CAAA4wB,QAAA,CAAAtkB,GAAA,OACA,KAAA1T,MAAA,MAAAkpB,KAAA,MAAAe,eAAA,CACA,CACAgF,SAAA,CASA,QAAApjB,KARQ8lC,GAAkBz9B,MAAA,MAAAnI,OAAA,EAC1B,KAAA0e,UAAA,OAAAA,UAAA,CAAAwE,OAAA,GACQ,GAAA9rB,EAAAqB,EAAA,EAAW,KAAAouC,YAAA,EACX,GAAAzvC,EAAAqB,EAAA,EAAW,KAAAgO,MAAA,EACnB,KAAAggC,kBAAA,CAAAvgC,OAAA,IAAAogB,KACA,KAAAmgB,kBAAA,CAAAx/B,KAAA,GACA,KAAAqgC,qBAAA,OAAAA,qBAAA,GACA,KAAAjsC,MAAA,OAAAA,MAAA,CAAA4wB,QAAA,CAAA9jB,MAAA,OACA,KAAAw+B,MAAA,CACA,KAAAA,MAAA,CAAA7mC,EAAA,CAAAmH,KAAA,GAEA,QAAAnH,KAAA,KAAA0mC,QAAA,EACA,IAAAuB,EAAA,KAAAvB,QAAA,CAAA1mC,EAAA,CACAioC,IACAA,EAAA7kB,OAAA,GACA6kB,EAAA/zC,SAAA,IAEA,CACA,KAAAgM,OAAA,KACA,CACAwnC,kBAAA1nC,CAAA,CAAApC,CAAA,MAaAsqC,EAZA,KAAAvB,kBAAA,CAAA/mC,GAAA,CAAAI,IACA,KAAA2mC,kBAAA,CAAAlgC,GAAA,CAAAzG,KAEA,IAAAmoC,EAAiC1pC,GAAAkB,CAAc,CAAAC,GAAA,CAAAI,GAC/CooC,EAAAxqC,EAAAyqC,EAAA,cACA,KAAA7c,YAAA,CAAAxrB,EAAA,CAAAsoC,EACA,KAAAjrB,KAAA,CAAA1P,QAAA,EAAmCrW,EAAAO,EAAK,CAAA+6B,SAAA,MAAAmU,YAAA,EACxCoB,GAAA,KAAAvpB,UAAA,EACA,MAAAA,UAAA,CAAAmP,gBAAA,IAEA,GACAwa,EAAA3qC,EAAAyqC,EAAA,sBAAAzd,cAAA,CAEAn0B,CAAAA,OAAA+xC,qBAAA,EACAN,CAAAA,EAAAzxC,OAAA+xC,qBAAA,MAAAxoC,EAAApC,EAAA,EAEA,KAAA+oC,kBAAA,CAAAjgC,GAAA,CAAA1G,EAAA,KACAooC,IACAG,IACAL,GACAA,IACAtqC,EAAAgc,KAAA,EACAhc,EAAA+W,IAAA,EACA,EACA,CACAwoB,iBAAAsL,CAAA,SAIA,KAAAvoC,OAAA,EACA,KAAAwoC,wBAAA,EACA,KAAAtwC,IAAA,GAAAqwC,EAAArwC,IAAA,CAGA,KAAAswC,wBAAA,MAAAxoC,OAAA,CAAAuoC,EAAAvoC,OAAA,EAFA,CAGA,CACAyoC,gBAAA,CACA,IAAA3oC,EAAA,YACA,IAAAA,KAAoB4oC,GAAAC,kBAAkB,EACtC,IAAAC,EAAsCF,GAAAC,kBAAkB,CAAA7oC,EAAA,CACxD,IAAA8oC,EACA,SACA,IAAoBC,UAAAA,CAAA,CAAAh1C,QAAAi1C,CAAA,EAAyCF,EAY7D,GARA,MAAApC,QAAA,CAAA1mC,EAAA,EACAgpC,GACAD,EAAA,KAAA1rB,KAAA,GACA,MAAAqpB,QAAA,CAAA1mC,EAAA,KAAAgpC,EAAA,OAKA,KAAAtC,QAAA,CAAA1mC,EAAA,EACA,IAAAioC,EAAA,KAAAvB,QAAA,CAAA1mC,EAAA,CACAioC,EAAA/zC,SAAA,CACA+zC,EAAA9zC,MAAA,IAGA8zC,EAAAhlB,KAAA,GACAglB,EAAA/zC,SAAA,IAEA,CACA,CACA,CACA8yC,cAAA,CACA,KAAAiC,KAAA,MAAA/B,WAAA,MAAA1b,YAAA,MAAAnO,KAAA,CACA,CAMA3e,oBAAA,CACA,YAAAwB,OAAA,CACA,KAAAgpC,0BAAA,MAAAhpC,OAAA,MAAAmd,KAAA,EACc7gB,GACd,CACA2sC,eAAAnpC,CAAA,EACA,YAAAwrB,YAAA,CAAAxrB,EAAA,CAEAwd,eAAAxd,CAAA,CAAApC,CAAA,EACA,KAAA4tB,YAAA,CAAAxrB,EAAA,CAAApC,CACA,CAKAzJ,OAAAkpB,CAAA,CAAAe,CAAA,EACAf,CAAAA,EAAA+E,iBAAA,OAAA/E,KAAA,CAAA+E,iBAAA,GACA,KAAAwI,cAAA,GAEA,KAAAnF,SAAA,MAAApI,KAAA,CACA,KAAAA,KAAA,CAAAA,EACA,KAAA6jB,mBAAA,MAAA9iB,eAAA,CACA,KAAAA,eAAA,CAAAA,EAIA,QAAAjlB,EAAA,EAAwBA,EAAA8sC,GAAA/sC,MAAA,CAA8BC,IAAA,CACtD,IAAA6G,EAAAimC,EAAA,CAAA9sC,EAAA,CACA,KAAA2tC,sBAAA,CAAA9mC,EAAA,GACA,KAAA8mC,sBAAA,CAAA9mC,EAAA,GACA,YAAA8mC,sBAAA,CAAA9mC,EAAA,EAGA,IAAAopC,EAAA/rB,CAAA,CADA,KAAArd,EACA,CACAopC,GACA,MAAAtC,sBAAA,CAAA9mC,EAAA,MAAAqoC,EAAA,CAAAroC,EAAAopC,EAAA,CAEA,CACA,KAAAxC,gBAAA,CAAgCyC,SHzThCpjC,CAAA,CAAA2L,CAAA,CAAAqpB,CAAA,EACA,QAAAj7B,KAAA4R,EAAA,CACA,IAAA03B,EAAA13B,CAAA,CAAA5R,EAAA,CACAupC,EAAAtO,CAAA,CAAAj7B,EAAA,CACA,GAAY,GAAAod,GAAAjkB,CAAA,EAAamwC,GAKzBrjC,EAAAo2B,QAAA,CAAAr8B,EAAAspC,QASA,GAAiB,GAAAlsB,GAAAjkB,CAAA,EAAaowC,GAK9BtjC,EAAAo2B,QAAA,CAAAr8B,EAAkC,GAAAq3B,GAAAC,EAAA,EAAWgS,EAAA,CAAc1vB,MAAA3T,CAAA,SAE3D,GAAAsjC,IAAAD,GAMA,GAAArjC,EAAAm2B,QAAA,CAAAp8B,GAAA,CACA,IAAAwpC,EAAAvjC,EAAAO,QAAA,CAAAxG,EACAwpC,EAAA,IAAAA,EAAAtJ,SAAA,CACAsJ,EAAAn9B,IAAA,CAAAi9B,GAEAE,EAAAC,WAAA,EACAD,EAAA9iC,GAAA,CAAA4iC,EAEA,KACA,CACA,IAAAhB,EAAAriC,EAAAkjC,cAAA,CAAAnpC,GACAiG,EAAAo2B,QAAA,CAAAr8B,EAAsC,GAAAq3B,GAAAC,EAAA,EAAWgR,KAAAntC,IAAAmtC,EAAAA,EAAAgB,EAAA,CAAwD1vB,MAAA3T,CAAA,GACzG,EAEA,CAEA,QAAAjG,KAAAi7B,EACA9/B,KAAAA,IAAAyW,CAAA,CAAA5R,EAAA,EACAiG,EAAAyjC,WAAA,CAAA1pC,GAEA,OAAA4R,CACA,EGqQ2D,UAAAu0B,2BAAA,CAAA9oB,EAAA,KAAAoI,SAAA,YAAAmhB,gBAAA,EAC3D,KAAA+C,sBAAA,EACA,KAAAA,sBAAA,EAEA,CACAxuB,UAAA,CACA,YAAAkC,KAAA,CAKAusB,WAAAlwC,CAAA,EACA,YAAA2jB,KAAA,CAAAwsB,QAAA,MAAAxsB,KAAA,CAAAwsB,QAAA,CAAAnwC,EAAA,CAAAyB,KAAAA,CACA,CAIAqE,sBAAA,CACA,YAAA6d,KAAA,CAAAtd,UAAA,CAEA4f,uBAAA,CACA,YAAAtC,KAAA,CAAAlnB,kBAAA,CAEA2zC,uBAAA,CACA,YAAArD,aAAA,CACA,KACA,KAAAlrC,MAAA,CACA,KAAAA,MAAA,CAAAuuC,qBAAA,GACA3uC,KAAAA,CACA,CAIAssC,gBAAApb,CAAA,EACA,IAAA0d,EAAA,KAAAD,qBAAA,GACA,GAAAC,EAGA,OAFAA,EAAArN,eAAA,EACAqN,EAAArN,eAAA,CAAA70B,GAAA,CAAAwkB,GACA,IAAA0d,EAAArN,eAAA,CAAAr0B,MAAA,CAAAgkB,EAEA,CAIAgQ,SAAAr8B,CAAA,CAAApC,CAAA,EAEA,IAAA4rC,EAAA,KAAAnsC,MAAA,CAAAoJ,GAAA,CAAAzG,GACApC,IAAA4rC,IACAA,GACA,KAAAE,WAAA,CAAA1pC,GACA,KAAA0nC,iBAAA,CAAA1nC,EAAApC,GACA,KAAAP,MAAA,CAAAqJ,GAAA,CAAA1G,EAAApC,GACA,KAAA4tB,YAAA,CAAAxrB,EAAA,CAAApC,EAAA6I,GAAA,GAEA,CAIAijC,YAAA1pC,CAAA,EACA,KAAA3C,MAAA,CAAAgL,MAAA,CAAArI,GACA,IAAAgqC,EAAA,KAAArD,kBAAA,CAAAlgC,GAAA,CAAAzG,GACAgqC,IACAA,IACA,KAAArD,kBAAA,CAAAt+B,MAAA,CAAArI,IAEA,YAAAwrB,YAAA,CAAAxrB,EAAA,CACA,KAAAiqC,0BAAA,CAAAjqC,EAAA,KAAAknC,WAAA,CACA,CAIA9K,SAAAp8B,CAAA,EACA,YAAA3C,MAAA,CAAAuC,GAAA,CAAAI,EACA,CACAwG,SAAAxG,CAAA,CAAA+I,CAAA,EACA,QAAAsU,KAAA,CAAAhgB,MAAA,OAAAggB,KAAA,CAAAhgB,MAAA,CAAA2C,EAAA,CACA,YAAAqd,KAAA,CAAAhgB,MAAA,CAAA2C,EAAA,CAEA,IAAApC,EAAA,KAAAP,MAAA,CAAAoJ,GAAA,CAAAzG,GAKA,OAJA7E,KAAAA,IAAAyC,GAAAmL,KAAA5N,IAAA4N,IACAnL,EAAoB,GAAAy5B,GAAAC,EAAA,EAAWvuB,OAAAA,EAAA5N,KAAAA,EAAA4N,EAAA,CAAqD6Q,MAAA,OACpF,KAAAyiB,QAAA,CAAAr8B,EAAApC,IAEAA,CACA,CAMAsK,UAAAlI,CAAA,CAAA3K,CAAA,EACA,IAAAyR,EACA,IAAAlJ,EAAA,KAAAzC,IAAA,KAAAqwB,YAAA,CAAAxrB,EAAA,OAAAE,OAAA,CAEA,OAAA4G,CAAAA,EAAA,KAAAojC,sBAAA,MAAA7sB,KAAA,CAAArd,EAAA,GAAA8G,KAAA,IAAAA,EAAAA,EAAA,KAAAqjC,qBAAA,MAAAjqC,OAAA,CAAAF,EAAA,KAAAzK,OAAA,EADA,KAAAi2B,YAAA,CAAAxrB,EAAA,CAaA,aAXApC,IACA,iBAAAA,GACiBiF,CAAAA,GAAiBjF,IAAW8E,GAAiB9E,EAAA,EAE9DA,EAAA6F,WAAA7F,GAEA,CAAsBooC,GAAapoC,IAAWqL,GAAAC,CAAO,CAAAvG,IAAA,CAAAtN,IACrDuI,CAAAA,EAAwBuL,GAAiBnJ,EAAA3K,EAAA,EAEzC,KAAA+0C,aAAA,CAAApqC,EAAoC,GAAAod,GAAAjkB,CAAA,EAAayE,GAAAA,EAAA6I,GAAA,GAAA7I,IAElC,GAAAwf,GAAAjkB,CAAA,EAAayE,GAAAA,EAAA6I,GAAA,GAAA7I,CAC5B,CAKAwsC,cAAApqC,CAAA,CAAApC,CAAA,EACA,KAAAwpC,UAAA,CAAApnC,EAAA,CAAApC,CACA,CAKA2iC,cAAAvgC,CAAA,MACA8G,MAEAujC,EADA,IAAgBvoB,QAAAA,CAAA,EAAU,KAAAzE,KAAA,CAE1B,oBAAAyE,GAAA,iBAAAA,EAAA,CACA,IAAAya,EAA4B,GAAAlB,GAAAlnB,CAAA,EAAuB,KAAAkJ,KAAA,CAAAyE,EAAA,OAAAhb,CAAAA,EAAA,KAAAsX,eAAA,GAAAtX,KAAA,IAAAA,EAAA,OAAAA,EAAAs0B,MAAA,EACnDmB,GACA8N,CAAAA,EAAA9N,CAAA,CAAAv8B,EAAA,CAEA,CAIA,GAAA8hB,GAAAuoB,KAAAlvC,IAAAkvC,EACA,OAAAA,EAMA,IAAAh1C,EAAA,KAAA60C,sBAAA,MAAA7sB,KAAA,CAAArd,UACA,KAAA7E,IAAA9F,GAAqC,GAAA+nB,GAAAjkB,CAAA,EAAa9D,GAMlD,KAAA8F,IAAA,KAAAksC,aAAA,CAAArnC,EAAA,EACAqqC,KAAAlvC,IAAAkvC,EACAlvC,KAAAA,EACA,KAAAisC,UAAA,CAAApnC,EAAA,CARA3K,CASA,CACAgzC,GAAA/yC,CAAA,CAAAoH,CAAA,EAIA,OAHA,KAAAmqC,MAAA,CAAAvxC,EAAA,EACA,MAAAuxC,MAAA,CAAAvxC,EAAA,KAAyCo6B,GAAAC,CAAmB,EAE5D,KAAAkX,MAAA,CAAAvxC,EAAA,CAAAuS,GAAA,CAAAnL,EACA,CACAqzB,OAAAz6B,CAAA,IAAAu6B,CAAA,EACA,KAAAgX,MAAA,CAAAvxC,EAAA,EACA,KAAAuxC,MAAA,CAAAvxC,EAAA,CAAAy6B,MAAA,IAAAF,EAEA,CACA,CC5dA,MAAAya,WAA+BpE,GAC/BlyC,aAAA,CACA,SAAAuvB,WACA,KAAAjc,gBAAA,CAAgCkD,EAChC,CACAk+B,yBAAA7yC,CAAA,CAAAC,CAAA,EAMA,OAAAD,EAAAA,EAAA00C,uBAAA,CAAAz0C,GAAA,IACA,CACAo0C,uBAAA7sB,CAAA,CAAArd,CAAA,EACA,OAAAqd,EAAAC,KAAA,CACAD,EAAAC,KAAA,CAAAtd,EAAA,CACA7E,KAAAA,CACA,CACA8uC,2BAAAjqC,CAAA,EAAsCwqC,KAAAA,CAAA,CAAAltB,MAAAA,CAAA,CAAa,EACnD,OAAAktB,CAAA,CAAAxqC,EAAA,CACA,OAAAsd,CAAA,CAAAtd,EAAA,CAEA,CCZA,MAAAyqC,WAAgCH,GAChCt2C,aAAA,CACA,SAAAuvB,WACA,KAAAnrB,IAAA,QACA,KAAA8kB,eAAA,IACA,KAAA+pB,cAAA,CAA8BtgC,GAAA+jC,CAAU,CAExCP,sBAAAxrC,CAAA,CAAAqB,CAAA,EACA,GAAYvB,GAAAkB,CAAc,CAAAC,GAAA,CAAAI,GAAA,CAC1B,IAAA2qC,EAAgCtgC,GAAmBrK,GACnD,OAAA2qC,GAAAA,EAAAC,OAAA,GACA,CACA,CACA,IAAAC,EAfAp0C,OAAA8U,gBAAA,CAeA5M,GACAf,EAAA,CAA2B,GAAA+M,GAAAmgC,CAAA,EAAiB9qC,GAC5C6qC,EAAAr/B,gBAAA,CAAAxL,GACA6qC,CAAA,CAAA7qC,EAAA,KACA,uBAAApC,EAAAA,EAAA8M,IAAA,GAAA9M,CACA,CACA,CACAsrC,2BAAAvqC,CAAA,EAA2CxI,mBAAAA,CAAA,CAAoB,EAC/D,OAAeuI,GAAkBC,EAAAxI,EACjC,CACA8yC,MAAA/B,CAAA,CAAA1b,CAAA,CAAAnO,CAAA,EACQ,GAAA0tB,GAAAC,CAAA,EAAe9D,EAAA1b,EAAAnO,EAAA+E,iBAAA,CACvB,CACA+jB,4BAAA9oB,CAAA,CAAAoI,CAAA,CAAAlf,CAAA,EACA,MAAe,GAAA0kC,GAAAC,CAAA,EAA2B7tB,EAAAoI,EAAAlf,EAC1C,CACAojC,wBAAA,CACA,KAAAwB,iBAAA,GACA,KAAAA,iBAAA,GACA,YAAAA,iBAAA,EAEA,IAAgBhf,SAAAA,CAAA,EAAW,KAAA9O,KAAA,CACf,GAAAD,GAAAjkB,CAAA,EAAagzB,IACzB,MAAAgf,iBAAA,CAAAhf,EAAAkc,EAAA,cACA,KAAAnoC,OAAA,EACA,MAAAA,OAAA,CAAAkrC,WAAA,IAAkDt4B,EAAO,EACzD,EAAa,CAEb,CACA,4EC5CA,OAAAu4B,WAA+Bf,GAC/Bt2C,aAAA,CACA,SAAAuvB,WACA,KAAAnrB,IAAA,OACA,KAAAkzC,QAAA,IACA,KAAApC,0BAAA,CAA0C1sC,CAC1C,CACA0tC,uBAAA7sB,CAAA,CAAArd,CAAA,EACA,OAAAqd,CAAA,CAAArd,EAAA,CAEAmqC,sBAAAxrC,CAAA,CAAAqB,CAAA,EACA,GAAYvB,GAAAkB,CAAc,CAAAC,GAAA,CAAAI,GAAA,CAC1B,IAAA2qC,EAAgCtgC,GAAmBrK,GACnD,OAAA2qC,GAAAA,EAAAC,OAAA,GACA,CAEA,OADA5qC,EAAA,GAAesU,CAAmB,CAAA1U,GAAA,CAAAI,GAAuBA,EAAX,GAAAurC,GAAAC,CAAA,EAAWxrC,GACzDrB,EAAA8sC,YAAA,CAAAzrC,EACA,CACAmmC,4BAAA9oB,CAAA,CAAAoI,CAAA,CAAAlf,CAAA,EACA,MAAe,GAAAmlC,GAAAR,CAAA,EAA2B7tB,EAAAoI,EAAAlf,EAC1C,CACA0iC,MAAA/B,CAAA,CAAA1b,CAAA,CAAAnO,CAAA,EACQ,GAAAsuB,GAAAxyC,CAAA,EAAa+tC,EAAA1b,EAAA,KAAA8f,QAAA,CAAAjuB,EAAA+E,iBAAA,CACrB,CACA6kB,eAAAtoC,CAAA,CAAAuoC,CAAA,CAAA7O,CAAA,CAAAzZ,CAAA,EACQ,GAAAgtB,GAAAhjC,CAAA,EAASjK,EAAAuoC,EAAA7O,EAAAzZ,EACjB,CACAqE,MAAAtkB,CAAA,EACA,KAAA2sC,QAAA,CAAwB,GAAAO,GAAAh2C,CAAA,EAAQ8I,EAAAuxB,OAAA,EAChC,MAAAjN,MAAAtkB,EACA,CACA,gBGnCA,IAAAmtC,GAAA,CDCAC,SDHA,CAAArnB,EAAAnvB,IACW,GAAAy2C,GAAAC,CAAA,EAAcvnB,GACzB,IAAc2mB,GAAgB91C,GAC9B,IAAck1C,GAAiBl1C,EAAA,CAC/B22C,gBAAAxnB,IAA2CD,GAAA0nB,QAAQ,GjBLnDlzB,UAAA,CACAllB,QAAiBmqC,EACjB,EACAD,KAAA,CACAlqC,QAAiBitC,EACjB,EOHAoL,OAAA,CACAr4C,QAAiBowC,EACjB,EACAkI,IAAA,CACAt4C,QAAiBkuC,EACjB,EACAqK,MAAA,CACAv4C,QAAiBwtC,EACjB,EACAgL,MAAA,CACAx4C,QAAiButC,EACjB,EnBXAkL,IAAA,CACAz4C,QAAiBuvB,EACjB,EACAvpB,KAAA,CACAhG,QAAiBgvB,GACjB0pB,eAAwB5R,GACxBnU,cAAqBA,EACrB,ECTAjrB,OAAA,CACAgxC,eAAwB5R,GACxBnU,cAAqBA,EACrB,C8BIA","sources":["webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/motion/features/Feature.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/events/event-info.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/utils/time-conversion.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/events/add-dom-event.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/events/add-pointer-event.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/utils/distance.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/gestures/drag/utils/lock.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/models.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/projection/utils/measure.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/utils/get-value-transition.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/easing/back.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/easing/anticipate.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/easing/circ.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/utils/is-none.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/utils/KeyframesResolver.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/value/types/complex/filter.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/html/utils/make-none-animatable.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/DOMKeyframesResolver.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/utils/is-generator.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/utils/can-animate.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/BaseAnimation.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/inertia.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/easing/ease.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/easing/utils/map.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/utils/offsets/time.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/drivers/driver-frameloop.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/MainThreadAnimation.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/linear.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/supports-flags.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/memo-supports.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/supports-linear-easing.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/easing.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/attach-timeline.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/supports-waapi.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/animators/AcceleratedAnimation.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/GroupPlaybackControls.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/utils/is-transition-defined.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/utils/get-context-window.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/value/use-will-change/is.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/value/use-will-change/add-will-change.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/gestures/drag/index.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/gestures/pan/index.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/projection/node/state.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/projection/shared/stack.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/projection/styles/transform.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/utils/delay.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/animate/single-value.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/optimized-appear/get-appear-id.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/motion/features/drag.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/motion/features/layout.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/utils/shallow-compare.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/utils/setters.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/utils/get-variant-context.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/utils/animation-state.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/motion/features/animation/index.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/motion/features/animations.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/gestures/hover.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/gestures/focus.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/gestures/press.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/motion/features/gestures.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/utils/motion-values.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/store.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/VisualElement.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/features-animation.mjs","webpack://_N_E/../../node_modules/.pnpm/framer-motion@11.11.1_@emotion+is-prop-valid@1.3.1_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/framer-motion/dist/es/render/dom/features-max.mjs"],"sourcesContent":["class Feature {\n    constructor(node) {\n        this.isMounted = false;\n        this.node = node;\n    }\n    update() { }\n}\n\nexport { Feature };\n","const isPrimaryPointer = (event) => {\n    if (event.pointerType === \"mouse\") {\n        return typeof event.button !== \"number\" || event.button <= 0;\n    }\n    else {\n        /**\n         * isPrimary is true for all mice buttons, whereas every touch point\n         * is regarded as its own input. So subsequent concurrent touch points\n         * will be false.\n         *\n         * Specifically match against false here as incomplete versions of\n         * PointerEvents in very old browser might have it set as undefined.\n         */\n        return event.isPrimary !== false;\n    }\n};\n\nexport { isPrimaryPointer };\n","import { isPrimaryPointer } from './utils/is-primary-pointer.mjs';\n\nfunction extractEventInfo(event, pointType = \"page\") {\n    return {\n        point: {\n            x: event[`${pointType}X`],\n            y: event[`${pointType}Y`],\n        },\n    };\n}\nconst addPointerInfo = (handler) => {\n    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));\n};\n\nexport { addPointerInfo, extractEventInfo };\n","/**\n * Converts seconds to milliseconds\n *\n * @param seconds - Time in seconds.\n * @return milliseconds - Converted time in milliseconds.\n */\nconst secondsToMilliseconds = (seconds) => seconds * 1000;\nconst millisecondsToSeconds = (milliseconds) => milliseconds / 1000;\n\nexport { millisecondsToSeconds, secondsToMilliseconds };\n","function addDomEvent(target, eventName, handler, options = { passive: true }) {\n    target.addEventListener(eventName, handler, options);\n    return () => target.removeEventListener(eventName, handler);\n}\n\nexport { addDomEvent };\n","import { addDomEvent } from './add-dom-event.mjs';\nimport { addPointerInfo } from './event-info.mjs';\n\nfunction addPointerEvent(target, eventName, handler, options) {\n    return addDomEvent(target, eventName, addPointerInfo(handler), options);\n}\n\nexport { addPointerEvent };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { extractEventInfo } from '../../events/event-info.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { isPrimaryPointer } from '../../events/utils/is-primary-pointer.mjs';\nimport { frame, cancelFrame, frameData } from '../../frameloop/frame.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint, contextWindow, dragSnapToOrigin = false } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        /**\n         * @internal\n         */\n        this.contextWindow = window;\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;\n            if (this.dragSnapToOrigin)\n                resumeAnimation && resumeAnimation();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.dragSnapToOrigin = dragSnapToOrigin;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        this.contextWindow = contextWindow || window;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","function createLock(name) {\n    let lock = null;\n    return () => {\n        const openLock = () => {\n            lock = null;\n        };\n        if (lock === null) {\n            lock = name;\n            return openLock;\n        }\n        return false;\n    };\n}\nconst globalHorizontalLock = createLock(\"dragHorizontal\");\nconst globalVerticalLock = createLock(\"dragVertical\");\nfunction getGlobalLock(drag) {\n    let lock = false;\n    if (drag === \"y\") {\n        lock = globalVerticalLock();\n    }\n    else if (drag === \"x\") {\n        lock = globalHorizontalLock();\n    }\n    else {\n        const openHorizontal = globalHorizontalLock();\n        const openVertical = globalVerticalLock();\n        if (openHorizontal && openVertical) {\n            lock = () => {\n                openHorizontal();\n                openVertical();\n            };\n        }\n        else {\n            // Release the locks because we don't use them\n            if (openHorizontal)\n                openHorizontal();\n            if (openVertical)\n                openVertical();\n        }\n    }\n    return lock;\n}\nfunction isDragActive() {\n    // Check the gesture lock - if we get it, it means no drag gesture is active\n    // and we can safely fire the tap gesture.\n    const openGestureLock = getGlobalLock(true);\n    if (!openGestureLock)\n        return true;\n    openGestureLock();\n    return false;\n}\n\nexport { createLock, getGlobalLock, isDragActive };\n","import { mixNumber } from '../../utils/mix/number.mjs';\n\nconst SCALE_PRECISION = 0.0001;\nconst SCALE_MIN = 1 - SCALE_PRECISION;\nconst SCALE_MAX = 1 + SCALE_PRECISION;\nconst TRANSLATE_PRECISION = 0.01;\nconst TRANSLATE_MIN = 0 - TRANSLATE_PRECISION;\nconst TRANSLATE_MAX = 0 + TRANSLATE_PRECISION;\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target, maxDistance) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mixNumber(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    delta.translate =\n        mixNumber(target.min, target.max, delta.origin) - delta.originPoint;\n    if ((delta.scale >= SCALE_MIN && delta.scale <= SCALE_MAX) ||\n        isNaN(delta.scale)) {\n        delta.scale = 1.0;\n    }\n    if ((delta.translate >= TRANSLATE_MIN &&\n        delta.translate <= TRANSLATE_MAX) ||\n        isNaN(delta.translate)) {\n        delta.translate = 0.0;\n    }\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mixNumber } from '../../../utils/mix/number.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(min, point, elastic.min)\n            : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic\n            ? mixNumber(max, point, elastic.max)\n            : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","const createAxisDelta = () => ({\n    translate: 0,\n    scale: 1,\n    origin: 0,\n    originPoint: 0,\n});\nconst createDelta = () => ({\n    x: createAxisDelta(),\n    y: createAxisDelta(),\n});\nconst createAxis = () => ({ min: 0, max: 0 });\nconst createBox = () => ({\n    x: createAxis(),\n    y: createAxis(),\n});\n\nexport { createAxis, createAxisDelta, createBox, createDelta };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","/**\n * Bounding boxes tend to be defined as top, left, right, bottom. For various operations\n * it's easier to consider each axis individually. This function returns a bounding box\n * as a map of single-axis min/max values.\n */\nfunction convertBoundingBoxToBox({ top, left, right, bottom, }) {\n    return {\n        x: { min: left, max: right },\n        y: { min: top, max: bottom },\n    };\n}\nfunction convertBoxToBoundingBox({ x, y }) {\n    return { top: y.min, right: x.max, bottom: y.max, left: x.min };\n}\n/**\n * Applies a TransformPoint function to a bounding box. TransformPoint is usually a function\n * provided by Framer to allow measured points to be corrected for device scaling. This is used\n * when measuring DOM elements and DOM event points.\n */\nfunction transformBoxPoints(point, transformPoint) {\n    if (!transformPoint)\n        return point;\n    const topLeft = transformPoint({ x: point.left, y: point.top });\n    const bottomRight = transformPoint({ x: point.right, y: point.bottom });\n    return {\n        top: topLeft.y,\n        left: topLeft.x,\n        bottom: bottomRight.y,\n        right: bottomRight.x,\n    };\n}\n\nexport { convertBoundingBoxToBox, convertBoxToBoundingBox, transformBoxPoints };\n","function isIdentityScale(scale) {\n    return scale === undefined || scale === 1;\n}\nfunction hasScale({ scale, scaleX, scaleY }) {\n    return (!isIdentityScale(scale) ||\n        !isIdentityScale(scaleX) ||\n        !isIdentityScale(scaleY));\n}\nfunction hasTransform(values) {\n    return (hasScale(values) ||\n        has2DTranslate(values) ||\n        values.z ||\n        values.rotate ||\n        values.rotateX ||\n        values.rotateY ||\n        values.skewX ||\n        values.skewY);\n}\nfunction has2DTranslate(values) {\n    return is2DTranslate(values.x) || is2DTranslate(values.y);\n}\nfunction is2DTranslate(value) {\n    return value && value !== \"0%\";\n}\n\nexport { has2DTranslate, hasScale, hasTransform };\n","import { mixNumber } from '../../utils/mix/number.mjs';\nimport { hasTransform } from '../utils/has-transform.mjs';\n\n/**\n * Scales a point based on a factor and an originPoint\n */\nfunction scalePoint(point, scale, originPoint) {\n    const distanceFromOrigin = point - originPoint;\n    const scaled = scale * distanceFromOrigin;\n    return originPoint + scaled;\n}\n/**\n * Applies a translate/scale delta to a point\n */\nfunction applyPointDelta(point, translate, scale, originPoint, boxScale) {\n    if (boxScale !== undefined) {\n        point = scalePoint(point, boxScale, originPoint);\n    }\n    return scalePoint(point, scale, originPoint) + translate;\n}\n/**\n * Applies a translate/scale delta to an axis\n */\nfunction applyAxisDelta(axis, translate = 0, scale = 1, originPoint, boxScale) {\n    axis.min = applyPointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = applyPointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Applies a translate/scale delta to a box\n */\nfunction applyBoxDelta(box, { x, y }) {\n    applyAxisDelta(box.x, x.translate, x.scale, x.originPoint);\n    applyAxisDelta(box.y, y.translate, y.scale, y.originPoint);\n}\nconst TREE_SCALE_SNAP_MIN = 0.999999999999;\nconst TREE_SCALE_SNAP_MAX = 1.0000000000001;\n/**\n * Apply a tree of deltas to a box. We do this to calculate the effect of all the transforms\n * in a tree upon our box before then calculating how to project it into our desired viewport-relative box\n *\n * This is the final nested loop within updateLayoutDelta for future refactoring\n */\nfunction applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {\n    const treeLength = treePath.length;\n    if (!treeLength)\n        return;\n    // Reset the treeScale\n    treeScale.x = treeScale.y = 1;\n    let node;\n    let delta;\n    for (let i = 0; i < treeLength; i++) {\n        node = treePath[i];\n        delta = node.projectionDelta;\n        /**\n         * TODO: Prefer to remove this, but currently we have motion components with\n         * display: contents in Framer.\n         */\n        const { visualElement } = node.options;\n        if (visualElement &&\n            visualElement.props.style &&\n            visualElement.props.style.display === \"contents\") {\n            continue;\n        }\n        if (isSharedTransition &&\n            node.options.layoutScroll &&\n            node.scroll &&\n            node !== node.root) {\n            transformBox(box, {\n                x: -node.scroll.offset.x,\n                y: -node.scroll.offset.y,\n            });\n        }\n        if (delta) {\n            // Incoporate each ancestor's scale into a culmulative treeScale for this component\n            treeScale.x *= delta.x.scale;\n            treeScale.y *= delta.y.scale;\n            // Apply each ancestor's calculated delta into this component's recorded layout box\n            applyBoxDelta(box, delta);\n        }\n        if (isSharedTransition && hasTransform(node.latestValues)) {\n            transformBox(box, node.latestValues);\n        }\n    }\n    /**\n     * Snap tree scale back to 1 if it's within a non-perceivable threshold.\n     * This will help reduce useless scales getting rendered.\n     */\n    if (treeScale.x < TREE_SCALE_SNAP_MAX &&\n        treeScale.x > TREE_SCALE_SNAP_MIN) {\n        treeScale.x = 1.0;\n    }\n    if (treeScale.y < TREE_SCALE_SNAP_MAX &&\n        treeScale.y > TREE_SCALE_SNAP_MIN) {\n        treeScale.y = 1.0;\n    }\n}\nfunction translateAxis(axis, distance) {\n    axis.min = axis.min + distance;\n    axis.max = axis.max + distance;\n}\n/**\n * Apply a transform to an axis from the latest resolved motion values.\n * This function basically acts as a bridge between a flat motion value map\n * and applyAxisDelta\n */\nfunction transformAxis(axis, axisTranslate, axisScale, boxScale, axisOrigin = 0.5) {\n    const originPoint = mixNumber(axis.min, axis.max, axisOrigin);\n    // Apply the axis delta to the final axis\n    applyAxisDelta(axis, axisTranslate, axisScale, originPoint, boxScale);\n}\n/**\n * Apply a transform to a box from the latest resolved motion values.\n */\nfunction transformBox(box, transform) {\n    transformAxis(box.x, transform.x, transform.scaleX, transform.scale, transform.originX);\n    transformAxis(box.y, transform.y, transform.scaleY, transform.scale, transform.originY);\n}\n\nexport { applyAxisDelta, applyBoxDelta, applyPointDelta, applyTreeDeltas, scalePoint, transformAxis, transformBox, translateAxis };\n","import { convertBoundingBoxToBox, transformBoxPoints } from '../geometry/conversion.mjs';\nimport { translateAxis } from '../geometry/delta-apply.mjs';\n\nfunction measureViewportBox(instance, transformPoint) {\n    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint));\n}\nfunction measurePageBox(element, rootProjectionNode, transformPagePoint) {\n    const viewportBox = measureViewportBox(element, transformPagePoint);\n    const { scroll } = rootProjectionNode;\n    if (scroll) {\n        translateAxis(viewportBox.x, scroll.offset.x);\n        translateAxis(viewportBox.y, scroll.offset.y);\n    }\n    return viewportBox;\n}\n\nexport { measurePageBox, measureViewportBox };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\n\nconst underDampedSpring = {\n    type: \"spring\",\n    stiffness: 500,\n    damping: 25,\n    restSpeed: 10,\n};\nconst criticallyDampedSpring = (target) => ({\n    type: \"spring\",\n    stiffness: 550,\n    damping: target === 0 ? 2 * Math.sqrt(550) : 30,\n    restSpeed: 10,\n});\nconst keyframesTransition = {\n    type: \"keyframes\",\n    duration: 0.8,\n};\n/**\n * Default easing curve is a slightly shallower version of\n * the default browser easing curve.\n */\nconst ease = {\n    type: \"keyframes\",\n    ease: [0.25, 0.1, 0.35, 1],\n    duration: 0.3,\n};\nconst getDefaultTransition = (valueKey, { keyframes }) => {\n    if (keyframes.length > 2) {\n        return keyframesTransition;\n    }\n    else if (transformProps.has(valueKey)) {\n        return valueKey.startsWith(\"scale\")\n            ? criticallyDampedSpring(keyframes[1])\n            : underDampedSpring;\n    }\n    return ease;\n};\n\nexport { getDefaultTransition };\n","function getValueTransition(transition, key) {\n    return (transition[key] ||\n        transition[\"default\"] ||\n        transition);\n}\n\nexport { getValueTransition };\n","const instantAnimationState = {\n    current: false,\n};\n\nexport { instantAnimationState };\n","const isNotNull = (value) => value !== null;\nfunction getFinalKeyframe(keyframes, { repeat, repeatType = \"loop\" }, finalKeyframe) {\n    const resolvedKeyframes = keyframes.filter(isNotNull);\n    const index = repeat && repeatType !== \"loop\" && repeat % 2 === 1\n        ? 0\n        : resolvedKeyframes.length - 1;\n    return !index || finalKeyframe === undefined\n        ? resolvedKeyframes[index]\n        : finalKeyframe;\n}\n\nexport { getFinalKeyframe };\n","import { noop } from '../utils/noop.mjs';\n\n/*\n  Bezier function generator\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) *\n    t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        }\n        else {\n            lowerBound = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2)\n        return noop;\n    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nexport { cubicBezier };\n","// Accepts an easing function and returns a new one that outputs mirrored values for\n// the second half of the animation. Turns easeIn into easeInOut.\nconst mirrorEasing = (easing) => (p) => p <= 0.5 ? easing(2 * p) / 2 : (2 - easing(2 * (1 - p))) / 2;\n\nexport { mirrorEasing };\n","// Accepts an easing function and returns a new one that outputs reversed values.\n// Turns easeIn into easeOut.\nconst reverseEasing = (easing) => (p) => 1 - easing(1 - p);\n\nexport { reverseEasing };\n","import { cubicBezier } from './cubic-bezier.mjs';\nimport { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst backOut = /*@__PURE__*/ cubicBezier(0.33, 1.53, 0.69, 0.99);\nconst backIn = /*@__PURE__*/ reverseEasing(backOut);\nconst backInOut = /*@__PURE__*/ mirrorEasing(backIn);\n\nexport { backIn, backInOut, backOut };\n","import { backIn } from './back.mjs';\n\nconst anticipate = (p) => (p *= 2) < 1 ? 0.5 * backIn(p) : 0.5 * (2 - Math.pow(2, -10 * (p - 1)));\n\nexport { anticipate };\n","import { mirrorEasing } from './modifiers/mirror.mjs';\nimport { reverseEasing } from './modifiers/reverse.mjs';\n\nconst circIn = (p) => 1 - Math.sin(Math.acos(p));\nconst circOut = reverseEasing(circIn);\nconst circInOut = mirrorEasing(circIn);\n\nexport { circIn, circInOut, circOut };\n","/**\n * Check if the value is a zero value string like \"0px\" or \"0%\"\n */\nconst isZeroValueString = (v) => /^0[^.\\s]+$/u.test(v);\n\nexport { isZeroValueString };\n","import { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\n\nfunction isNone(value) {\n    if (typeof value === \"number\") {\n        return value === 0;\n    }\n    else if (value !== null) {\n        return value === \"none\" || value === \"0\" || isZeroValueString(value);\n    }\n    else {\n        return true;\n    }\n}\n\nexport { isNone };\n","/**\n * Check if value is a numerical string, ie a string that is purely a number eg \"100\" or \"-100.1\"\n */\nconst isNumericalString = (v) => /^-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)$/u.test(v);\n\nexport { isNumericalString };\n","import { invariant } from '../../../utils/errors.mjs';\nimport { isNumericalString } from '../../../utils/is-numerical-string.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst splitCSSVariableRegex = \n// eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words\n/^var\\(--(?:([\\w-]+)|([\\w-]+), ?([a-zA-Z\\d ()%#.,-]+))\\)/u;\nfunction parseCSSVariable(current) {\n    const match = splitCSSVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token1, token2, fallback] = match;\n    return [`--${token1 !== null && token1 !== void 0 ? token1 : token2}`, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        const trimmed = resolved.trim();\n        return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n    }\n    return isCSSVariableToken(fallback)\n        ? getVariableValue(fallback, element, depth + 1)\n        : fallback;\n}\n\nexport { getVariableValue, parseCSSVariable };\n","import { transformPropOrder } from '../../html/utils/transform.mjs';\nimport { number } from '../../../value/types/numbers/index.mjs';\nimport { px } from '../../../value/types/numbers/units.mjs';\n\nconst positionalKeys = new Set([\n    \"width\",\n    \"height\",\n    \"top\",\n    \"left\",\n    \"right\",\n    \"bottom\",\n    \"x\",\n    \"y\",\n    \"translateX\",\n    \"translateY\",\n]);\nconst isNumOrPxType = (v) => v === number || v === px;\nconst getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(\", \")[pos]);\nconst getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {\n    if (transform === \"none\" || !transform)\n        return 0;\n    const matrix3d = transform.match(/^matrix3d\\((.+)\\)$/u);\n    if (matrix3d) {\n        return getPosFromMatrix(matrix3d[1], pos3);\n    }\n    else {\n        const matrix = transform.match(/^matrix\\((.+)\\)$/u);\n        if (matrix) {\n            return getPosFromMatrix(matrix[1], pos2);\n        }\n        else {\n            return 0;\n        }\n    }\n};\nconst transformKeys = new Set([\"x\", \"y\", \"z\"]);\nconst nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));\nfunction removeNonTranslationalTransform(visualElement) {\n    const removedTransforms = [];\n    nonTranslationalTransformKeys.forEach((key) => {\n        const value = visualElement.getValue(key);\n        if (value !== undefined) {\n            removedTransforms.push([key, value.get()]);\n            value.set(key.startsWith(\"scale\") ? 1 : 0);\n        }\n    });\n    return removedTransforms;\n}\nconst positionalValues = {\n    // Dimensions\n    width: ({ x }, { paddingLeft = \"0\", paddingRight = \"0\" }) => x.max - x.min - parseFloat(paddingLeft) - parseFloat(paddingRight),\n    height: ({ y }, { paddingTop = \"0\", paddingBottom = \"0\" }) => y.max - y.min - parseFloat(paddingTop) - parseFloat(paddingBottom),\n    top: (_bbox, { top }) => parseFloat(top),\n    left: (_bbox, { left }) => parseFloat(left),\n    bottom: ({ y }, { top }) => parseFloat(top) + (y.max - y.min),\n    right: ({ x }, { left }) => parseFloat(left) + (x.max - x.min),\n    // Transform\n    x: getTranslateFromMatrix(4, 13),\n    y: getTranslateFromMatrix(5, 14),\n};\n// Alias translate longform names\npositionalValues.translateX = positionalValues.x;\npositionalValues.translateY = positionalValues.y;\n\nexport { isNumOrPxType, positionalKeys, positionalValues, removeNonTranslationalTransform };\n","/**\n * Tests a provided value against a ValueType\n */\nconst testValueType = (v) => (type) => type.test(v);\n\nexport { testValueType };\n","/**\n * ValueType for \"auto\"\n */\nconst auto = {\n    test: (v) => v === \"auto\",\n    parse: (v) => v,\n};\n\nexport { auto };\n","import { number } from '../../../value/types/numbers/index.mjs';\nimport { px, percent, degrees, vw, vh } from '../../../value/types/numbers/units.mjs';\nimport { testValueType } from './test.mjs';\nimport { auto } from './type-auto.mjs';\n\n/**\n * A list of value types commonly used for dimensions\n */\nconst dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];\n/**\n * Tests a dimensional value against the list of dimension ValueTypes\n */\nconst findDimensionValueType = (v) => dimensionValueTypes.find(testValueType(v));\n\nexport { dimensionValueTypes, findDimensionValueType };\n","import { removeNonTranslationalTransform } from '../dom/utils/unit-conversion.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst toResolve = new Set();\nlet isScheduled = false;\nlet anyNeedsMeasurement = false;\nfunction measureAllKeyframes() {\n    if (anyNeedsMeasurement) {\n        const resolversToMeasure = Array.from(toResolve).filter((resolver) => resolver.needsMeasurement);\n        const elementsToMeasure = new Set(resolversToMeasure.map((resolver) => resolver.element));\n        const transformsToRestore = new Map();\n        /**\n         * Write pass\n         * If we're measuring elements we want to remove bounding box-changing transforms.\n         */\n        elementsToMeasure.forEach((element) => {\n            const removedTransforms = removeNonTranslationalTransform(element);\n            if (!removedTransforms.length)\n                return;\n            transformsToRestore.set(element, removedTransforms);\n            element.render();\n        });\n        // Read\n        resolversToMeasure.forEach((resolver) => resolver.measureInitialState());\n        // Write\n        elementsToMeasure.forEach((element) => {\n            element.render();\n            const restore = transformsToRestore.get(element);\n            if (restore) {\n                restore.forEach(([key, value]) => {\n                    var _a;\n                    (_a = element.getValue(key)) === null || _a === void 0 ? void 0 : _a.set(value);\n                });\n            }\n        });\n        // Read\n        resolversToMeasure.forEach((resolver) => resolver.measureEndState());\n        // Write\n        resolversToMeasure.forEach((resolver) => {\n            if (resolver.suspendedScrollY !== undefined) {\n                window.scrollTo(0, resolver.suspendedScrollY);\n            }\n        });\n    }\n    anyNeedsMeasurement = false;\n    isScheduled = false;\n    toResolve.forEach((resolver) => resolver.complete());\n    toResolve.clear();\n}\nfunction readAllKeyframes() {\n    toResolve.forEach((resolver) => {\n        resolver.readKeyframes();\n        if (resolver.needsMeasurement) {\n            anyNeedsMeasurement = true;\n        }\n    });\n}\nfunction flushKeyframeResolvers() {\n    readAllKeyframes();\n    measureAllKeyframes();\n}\nclass KeyframeResolver {\n    constructor(unresolvedKeyframes, onComplete, name, motionValue, element, isAsync = false) {\n        /**\n         * Track whether this resolver has completed. Once complete, it never\n         * needs to attempt keyframe resolution again.\n         */\n        this.isComplete = false;\n        /**\n         * Track whether this resolver is async. If it is, it'll be added to the\n         * resolver queue and flushed in the next frame. Resolvers that aren't going\n         * to trigger read/write thrashing don't need to be async.\n         */\n        this.isAsync = false;\n        /**\n         * Track whether this resolver needs to perform a measurement\n         * to resolve its keyframes.\n         */\n        this.needsMeasurement = false;\n        /**\n         * Track whether this resolver is currently scheduled to resolve\n         * to allow it to be cancelled and resumed externally.\n         */\n        this.isScheduled = false;\n        this.unresolvedKeyframes = [...unresolvedKeyframes];\n        this.onComplete = onComplete;\n        this.name = name;\n        this.motionValue = motionValue;\n        this.element = element;\n        this.isAsync = isAsync;\n    }\n    scheduleResolve() {\n        this.isScheduled = true;\n        if (this.isAsync) {\n            toResolve.add(this);\n            if (!isScheduled) {\n                isScheduled = true;\n                frame.read(readAllKeyframes);\n                frame.resolveKeyframes(measureAllKeyframes);\n            }\n        }\n        else {\n            this.readKeyframes();\n            this.complete();\n        }\n    }\n    readKeyframes() {\n        const { unresolvedKeyframes, name, element, motionValue } = this;\n        /**\n         * If a keyframe is null, we hydrate it either by reading it from\n         * the instance, or propagating from previous keyframes.\n         */\n        for (let i = 0; i < unresolvedKeyframes.length; i++) {\n            if (unresolvedKeyframes[i] === null) {\n                /**\n                 * If the first keyframe is null, we need to find its value by sampling the element\n                 */\n                if (i === 0) {\n                    const currentValue = motionValue === null || motionValue === void 0 ? void 0 : motionValue.get();\n                    const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\n                    if (currentValue !== undefined) {\n                        unresolvedKeyframes[0] = currentValue;\n                    }\n                    else if (element && name) {\n                        const valueAsRead = element.readValue(name, finalKeyframe);\n                        if (valueAsRead !== undefined && valueAsRead !== null) {\n                            unresolvedKeyframes[0] = valueAsRead;\n                        }\n                    }\n                    if (unresolvedKeyframes[0] === undefined) {\n                        unresolvedKeyframes[0] = finalKeyframe;\n                    }\n                    if (motionValue && currentValue === undefined) {\n                        motionValue.set(unresolvedKeyframes[0]);\n                    }\n                }\n                else {\n                    unresolvedKeyframes[i] = unresolvedKeyframes[i - 1];\n                }\n            }\n        }\n    }\n    setFinalKeyframe() { }\n    measureInitialState() { }\n    renderEndStyles() { }\n    measureEndState() { }\n    complete() {\n        this.isComplete = true;\n        this.onComplete(this.unresolvedKeyframes, this.finalKeyframe);\n        toResolve.delete(this);\n    }\n    cancel() {\n        if (!this.isComplete) {\n            this.isScheduled = false;\n            toResolve.delete(this);\n        }\n    }\n    resume() {\n        if (!this.isComplete)\n            this.scheduleResolve();\n    }\n}\n\nexport { KeyframeResolver, flushKeyframeResolvers };\n","import { complex } from './index.mjs';\nimport { floatRegex } from '../utils/float-regex.mjs';\n\n/**\n * Properties that should default to 1 or 100%\n */\nconst maxDefaults = new Set([\"brightness\", \"contrast\", \"saturate\", \"opacity\"]);\nfunction applyDefaultFilter(v) {\n    const [name, value] = v.slice(0, -1).split(\"(\");\n    if (name === \"drop-shadow\")\n        return v;\n    const [number] = value.match(floatRegex) || [];\n    if (!number)\n        return v;\n    const unit = value.replace(number, \"\");\n    let defaultValue = maxDefaults.has(name) ? 1 : 0;\n    if (number !== value)\n        defaultValue *= 100;\n    return name + \"(\" + defaultValue + unit + \")\";\n}\nconst functionRegex = /\\b([a-z-]*)\\(.*?\\)/gu;\nconst filter = {\n    ...complex,\n    getAnimatableNone: (v) => {\n        const functions = v.match(functionRegex);\n        return functions ? functions.map(applyDefaultFilter).join(\" \") : v;\n    },\n};\n\nexport { filter };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { numberValueTypes } from './number.mjs';\n\n/**\n * A map of default value types for common values\n */\nconst defaultValueTypes = {\n    ...numberValueTypes,\n    // Color props\n    color,\n    backgroundColor: color,\n    outlineColor: color,\n    fill: color,\n    stroke: color,\n    // Border props\n    borderColor: color,\n    borderTopColor: color,\n    borderRightColor: color,\n    borderBottomColor: color,\n    borderLeftColor: color,\n    filter,\n    WebkitFilter: filter,\n};\n/**\n * Gets the default ValueType for the provided value key\n */\nconst getDefaultValueType = (key) => defaultValueTypes[key];\n\nexport { defaultValueTypes, getDefaultValueType };\n","import { complex } from '../../../value/types/complex/index.mjs';\nimport { filter } from '../../../value/types/complex/filter.mjs';\nimport { getDefaultValueType } from './defaults.mjs';\n\nfunction getAnimatableNone(key, value) {\n    let defaultValueType = getDefaultValueType(key);\n    if (defaultValueType !== filter)\n        defaultValueType = complex;\n    // If value is not recognised as animatable, ie \"none\", create an animatable version origin based on the target\n    return defaultValueType.getAnimatableNone\n        ? defaultValueType.getAnimatableNone(value)\n        : undefined;\n}\n\nexport { getAnimatableNone };\n","import { analyseComplexValue } from '../../../value/types/complex/index.mjs';\nimport { getAnimatableNone } from '../../dom/value-types/animatable-none.mjs';\n\n/**\n * If we encounter keyframes like \"none\" or \"0\" and we also have keyframes like\n * \"#fff\" or \"200px 200px\" we want to find a keyframe to serve as a template for\n * the \"none\" keyframes. In this case \"#fff\" or \"200px 200px\" - then these get turned into\n * zero equivalents, i.e. \"#fff0\" or \"0px 0px\".\n */\nconst invalidTemplates = new Set([\"auto\", \"none\", \"0\"]);\nfunction makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name) {\n    let i = 0;\n    let animatableTemplate = undefined;\n    while (i < unresolvedKeyframes.length && !animatableTemplate) {\n        const keyframe = unresolvedKeyframes[i];\n        if (typeof keyframe === \"string\" &&\n            !invalidTemplates.has(keyframe) &&\n            analyseComplexValue(keyframe).values.length) {\n            animatableTemplate = unresolvedKeyframes[i];\n        }\n        i++;\n    }\n    if (animatableTemplate && name) {\n        for (const noneIndex of noneKeyframeIndexes) {\n            unresolvedKeyframes[noneIndex] = getAnimatableNone(name, animatableTemplate);\n        }\n    }\n}\n\nexport { makeNoneKeyframesAnimatable };\n","import { isNone } from '../../animation/utils/is-none.mjs';\nimport { getVariableValue } from './utils/css-variables-conversion.mjs';\nimport { isCSSVariableToken } from './utils/is-css-variable.mjs';\nimport { positionalKeys, isNumOrPxType, positionalValues } from './utils/unit-conversion.mjs';\nimport { findDimensionValueType } from './value-types/dimensions.mjs';\nimport { KeyframeResolver } from '../utils/KeyframesResolver.mjs';\nimport { makeNoneKeyframesAnimatable } from '../html/utils/make-none-animatable.mjs';\n\nclass DOMKeyframesResolver extends KeyframeResolver {\n    constructor(unresolvedKeyframes, onComplete, name, motionValue, element) {\n        super(unresolvedKeyframes, onComplete, name, motionValue, element, true);\n    }\n    readKeyframes() {\n        const { unresolvedKeyframes, element, name } = this;\n        if (!element || !element.current)\n            return;\n        super.readKeyframes();\n        /**\n         * If any keyframe is a CSS variable, we need to find its value by sampling the element\n         */\n        for (let i = 0; i < unresolvedKeyframes.length; i++) {\n            let keyframe = unresolvedKeyframes[i];\n            if (typeof keyframe === \"string\") {\n                keyframe = keyframe.trim();\n                if (isCSSVariableToken(keyframe)) {\n                    const resolved = getVariableValue(keyframe, element.current);\n                    if (resolved !== undefined) {\n                        unresolvedKeyframes[i] = resolved;\n                    }\n                    if (i === unresolvedKeyframes.length - 1) {\n                        this.finalKeyframe = keyframe;\n                    }\n                }\n            }\n        }\n        /**\n         * Resolve \"none\" values. We do this potentially twice - once before and once after measuring keyframes.\n         * This could be seen as inefficient but it's a trade-off to avoid measurements in more situations, which\n         * have a far bigger performance impact.\n         */\n        this.resolveNoneKeyframes();\n        /**\n         * Check to see if unit type has changed. If so schedule jobs that will\n         * temporarily set styles to the destination keyframes.\n         * Skip if we have more than two keyframes or this isn't a positional value.\n         * TODO: We can throw if there are multiple keyframes and the value type changes.\n         */\n        if (!positionalKeys.has(name) || unresolvedKeyframes.length !== 2) {\n            return;\n        }\n        const [origin, target] = unresolvedKeyframes;\n        const originType = findDimensionValueType(origin);\n        const targetType = findDimensionValueType(target);\n        /**\n         * Either we don't recognise these value types or we can animate between them.\n         */\n        if (originType === targetType)\n            return;\n        /**\n         * If both values are numbers or pixels, we can animate between them by\n         * converting them to numbers.\n         */\n        if (isNumOrPxType(originType) && isNumOrPxType(targetType)) {\n            for (let i = 0; i < unresolvedKeyframes.length; i++) {\n                const value = unresolvedKeyframes[i];\n                if (typeof value === \"string\") {\n                    unresolvedKeyframes[i] = parseFloat(value);\n                }\n            }\n        }\n        else {\n            /**\n             * Else, the only way to resolve this is by measuring the element.\n             */\n            this.needsMeasurement = true;\n        }\n    }\n    resolveNoneKeyframes() {\n        const { unresolvedKeyframes, name } = this;\n        const noneKeyframeIndexes = [];\n        for (let i = 0; i < unresolvedKeyframes.length; i++) {\n            if (isNone(unresolvedKeyframes[i])) {\n                noneKeyframeIndexes.push(i);\n            }\n        }\n        if (noneKeyframeIndexes.length) {\n            makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name);\n        }\n    }\n    measureInitialState() {\n        const { element, unresolvedKeyframes, name } = this;\n        if (!element || !element.current)\n            return;\n        if (name === \"height\") {\n            this.suspendedScrollY = window.pageYOffset;\n        }\n        this.measuredOrigin = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));\n        unresolvedKeyframes[0] = this.measuredOrigin;\n        // Set final key frame to measure after next render\n        const measureKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];\n        if (measureKeyframe !== undefined) {\n            element.getValue(name, measureKeyframe).jump(measureKeyframe, false);\n        }\n    }\n    measureEndState() {\n        var _a;\n        const { element, name, unresolvedKeyframes } = this;\n        if (!element || !element.current)\n            return;\n        const value = element.getValue(name);\n        value && value.jump(this.measuredOrigin, false);\n        const finalKeyframeIndex = unresolvedKeyframes.length - 1;\n        const finalKeyframe = unresolvedKeyframes[finalKeyframeIndex];\n        unresolvedKeyframes[finalKeyframeIndex] = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));\n        if (finalKeyframe !== null && this.finalKeyframe === undefined) {\n            this.finalKeyframe = finalKeyframe;\n        }\n        // If we removed transform values, reapply them before the next render\n        if ((_a = this.removedTransforms) === null || _a === void 0 ? void 0 : _a.length) {\n            this.removedTransforms.forEach(([unsetTransformName, unsetTransformValue]) => {\n                element\n                    .getValue(unsetTransformName)\n                    .set(unsetTransformValue);\n            });\n        }\n        this.resolveNoneKeyframes();\n    }\n}\n\nexport { DOMKeyframesResolver };\n","function isGenerator(type) {\n    return typeof type === \"function\";\n}\n\nexport { isGenerator };\n","import { complex } from '../../value/types/complex/index.mjs';\n\n/**\n * Check if a value is animatable. Examples:\n *\n * ✅: 100, \"100px\", \"#fff\"\n * ❌: \"block\", \"url(2.jpg)\"\n * @param value\n *\n * @internal\n */\nconst isAnimatable = (value, name) => {\n    // If the list of keys tat might be non-animatable grows, replace with Set\n    if (name === \"zIndex\")\n        return false;\n    // If it's a number or a keyframes array, we can animate it. We might at some point\n    // need to do a deep isAnimatable check of keyframes, or let Popmotion handle this,\n    // but for now lets leave it like this for performance reasons\n    if (typeof value === \"number\" || Array.isArray(value))\n        return true;\n    if (typeof value === \"string\" && // It's animatable if we have a string\n        (complex.test(value) || value === \"0\") && // And it contains numbers and/or colors\n        !value.startsWith(\"url(\") // Unless it starts with \"url(\"\n    ) {\n        return true;\n    }\n    return false;\n};\n\nexport { isAnimatable };\n","import { warning } from '../../../utils/errors.mjs';\nimport { isGenerator } from '../../generators/utils/is-generator.mjs';\nimport { isAnimatable } from '../../utils/is-animatable.mjs';\n\nfunction hasKeyframesChanged(keyframes) {\n    const current = keyframes[0];\n    if (keyframes.length === 1)\n        return true;\n    for (let i = 0; i < keyframes.length; i++) {\n        if (keyframes[i] !== current)\n            return true;\n    }\n}\nfunction canAnimate(keyframes, name, type, velocity) {\n    /**\n     * Check if we're able to animate between the start and end keyframes,\n     * and throw a warning if we're attempting to animate between one that's\n     * animatable and another that isn't.\n     */\n    const originKeyframe = keyframes[0];\n    if (originKeyframe === null)\n        return false;\n    /**\n     * These aren't traditionally animatable but we do support them.\n     * In future we could look into making this more generic or replacing\n     * this function with mix() === mixImmediate\n     */\n    if (name === \"display\" || name === \"visibility\")\n        return true;\n    const targetKeyframe = keyframes[keyframes.length - 1];\n    const isOriginAnimatable = isAnimatable(originKeyframe, name);\n    const isTargetAnimatable = isAnimatable(targetKeyframe, name);\n    warning(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${name} from \"${originKeyframe}\" to \"${targetKeyframe}\". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \\`style\\` property.`);\n    // Always skip if any of these are true\n    if (!isOriginAnimatable || !isTargetAnimatable) {\n        return false;\n    }\n    return (hasKeyframesChanged(keyframes) ||\n        ((type === \"spring\" || isGenerator(type)) && velocity));\n}\n\nexport { canAnimate };\n","import { time } from '../../frameloop/sync-time.mjs';\nimport { flushKeyframeResolvers } from '../../render/utils/KeyframesResolver.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { canAnimate } from './utils/can-animate.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\n\n/**\n * Maximum time allowed between an animation being created and it being\n * resolved for us to use the latter as the start time.\n *\n * This is to ensure that while we prefer to \"start\" an animation as soon\n * as it's triggered, we also want to avoid a visual jump if there's a big delay\n * between these two moments.\n */\nconst MAX_RESOLVE_DELAY = 40;\nclass BaseAnimation {\n    constructor({ autoplay = true, delay = 0, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", ...options }) {\n        // Track whether the animation has been stopped. Stopped animations won't restart.\n        this.isStopped = false;\n        this.hasAttemptedResolve = false;\n        this.createdAt = time.now();\n        this.options = {\n            autoplay,\n            delay,\n            type,\n            repeat,\n            repeatDelay,\n            repeatType,\n            ...options,\n        };\n        this.updateFinishedPromise();\n    }\n    /**\n     * This method uses the createdAt and resolvedAt to calculate the\n     * animation startTime. *Ideally*, we would use the createdAt time as t=0\n     * as the following frame would then be the first frame of the animation in\n     * progress, which would feel snappier.\n     *\n     * However, if there's a delay (main thread work) between the creation of\n     * the animation and the first commited frame, we prefer to use resolvedAt\n     * to avoid a sudden jump into the animation.\n     */\n    calcStartTime() {\n        if (!this.resolvedAt)\n            return this.createdAt;\n        return this.resolvedAt - this.createdAt > MAX_RESOLVE_DELAY\n            ? this.resolvedAt\n            : this.createdAt;\n    }\n    /**\n     * A getter for resolved data. If keyframes are not yet resolved, accessing\n     * this.resolved will synchronously flush all pending keyframe resolvers.\n     * This is a deoptimisation, but at its worst still batches read/writes.\n     */\n    get resolved() {\n        if (!this._resolved && !this.hasAttemptedResolve) {\n            flushKeyframeResolvers();\n        }\n        return this._resolved;\n    }\n    /**\n     * A method to be called when the keyframes resolver completes. This method\n     * will check if its possible to run the animation and, if not, skip it.\n     * Otherwise, it will call initPlayback on the implementing class.\n     */\n    onKeyframesResolved(keyframes, finalKeyframe) {\n        this.resolvedAt = time.now();\n        this.hasAttemptedResolve = true;\n        const { name, type, velocity, delay, onComplete, onUpdate, isGenerator, } = this.options;\n        /**\n         * If we can't animate this value with the resolved keyframes\n         * then we should complete it immediately.\n         */\n        if (!isGenerator && !canAnimate(keyframes, name, type, velocity)) {\n            // Finish immediately\n            if (instantAnimationState.current || !delay) {\n                onUpdate === null || onUpdate === void 0 ? void 0 : onUpdate(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n                onComplete === null || onComplete === void 0 ? void 0 : onComplete();\n                this.resolveFinishedPromise();\n                return;\n            }\n            // Finish after a delay\n            else {\n                this.options.duration = 0;\n            }\n        }\n        const resolvedAnimation = this.initPlayback(keyframes, finalKeyframe);\n        if (resolvedAnimation === false)\n            return;\n        this._resolved = {\n            keyframes,\n            finalKeyframe,\n            ...resolvedAnimation,\n        };\n        this.onPostResolved();\n    }\n    onPostResolved() { }\n    /**\n     * Allows the returned animation to be awaited or promise-chained. Currently\n     * resolves when the animation finishes at all but in a future update could/should\n     * reject if its cancels.\n     */\n    then(resolve, reject) {\n        return this.currentFinishedPromise.then(resolve, reject);\n    }\n    updateFinishedPromise() {\n        this.currentFinishedPromise = new Promise((resolve) => {\n            this.resolveFinishedPromise = resolve;\n        });\n    }\n}\n\nexport { BaseAnimation };\n","import { velocityPerSecond } from '../../../utils/velocity-per-second.mjs';\n\nconst velocitySampleDuration = 5; // ms\nfunction calcGeneratorVelocity(resolveValue, t, current) {\n    const prevT = Math.max(t - velocitySampleDuration, 0);\n    return velocityPerSecond(current - resolveValue(prevT), t - prevT);\n}\n\nexport { calcGeneratorVelocity };\n","import { warning } from '../../../utils/errors.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../../utils/time-conversion.mjs';\n\nconst safeMin = 0.001;\nconst minDuration = 0.01;\nconst maxDuration = 10.0;\nconst minDamping = 0.05;\nconst maxDamping = 1;\nfunction findSpring({ duration = 800, bounce = 0.25, velocity = 0, mass = 1, }) {\n    let envelope;\n    let derivative;\n    warning(duration <= secondsToMilliseconds(maxDuration), \"Spring duration must be 10 seconds or less\");\n    let dampingRatio = 1 - bounce;\n    /**\n     * Restrict dampingRatio and duration to within acceptable ranges.\n     */\n    dampingRatio = clamp(minDamping, maxDamping, dampingRatio);\n    duration = clamp(minDuration, maxDuration, millisecondsToSeconds(duration));\n    if (dampingRatio < 1) {\n        /**\n         * Underdamped spring\n         */\n        envelope = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const a = exponentialDecay - velocity;\n            const b = calcAngularFreq(undampedFreq, dampingRatio);\n            const c = Math.exp(-delta);\n            return safeMin - (a / b) * c;\n        };\n        derivative = (undampedFreq) => {\n            const exponentialDecay = undampedFreq * dampingRatio;\n            const delta = exponentialDecay * duration;\n            const d = delta * velocity + velocity;\n            const e = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq, 2) * duration;\n            const f = Math.exp(-delta);\n            const g = calcAngularFreq(Math.pow(undampedFreq, 2), dampingRatio);\n            const factor = -envelope(undampedFreq) + safeMin > 0 ? -1 : 1;\n            return (factor * ((d - e) * f)) / g;\n        };\n    }\n    else {\n        /**\n         * Critically-damped spring\n         */\n        envelope = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (undampedFreq - velocity) * duration + 1;\n            return -safeMin + a * b;\n        };\n        derivative = (undampedFreq) => {\n            const a = Math.exp(-undampedFreq * duration);\n            const b = (velocity - undampedFreq) * (duration * duration);\n            return a * b;\n        };\n    }\n    const initialGuess = 5 / duration;\n    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);\n    duration = secondsToMilliseconds(duration);\n    if (isNaN(undampedFreq)) {\n        return {\n            stiffness: 100,\n            damping: 10,\n            duration,\n        };\n    }\n    else {\n        const stiffness = Math.pow(undampedFreq, 2) * mass;\n        return {\n            stiffness,\n            damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),\n            duration,\n        };\n    }\n}\nconst rootIterations = 12;\nfunction approximateRoot(envelope, derivative, initialGuess) {\n    let result = initialGuess;\n    for (let i = 1; i < rootIterations; i++) {\n        result = result - envelope(result) / derivative(result);\n    }\n    return result;\n}\nfunction calcAngularFreq(undampedFreq, dampingRatio) {\n    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n}\n\nexport { calcAngularFreq, findSpring, maxDamping, maxDuration, minDamping, minDuration };\n","import { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorVelocity } from '../utils/velocity.mjs';\nimport { findSpring, calcAngularFreq } from './find.mjs';\n\nconst durationKeys = [\"duration\", \"bounce\"];\nconst physicsKeys = [\"stiffness\", \"damping\", \"mass\"];\nfunction isSpringType(options, keys) {\n    return keys.some((key) => options[key] !== undefined);\n}\nfunction getSpringOptions(options) {\n    let springOptions = {\n        velocity: 0.0,\n        stiffness: 100,\n        damping: 10,\n        mass: 1.0,\n        isResolvedFromDuration: false,\n        ...options,\n    };\n    // stiffness/damping/mass overrides duration/bounce\n    if (!isSpringType(options, physicsKeys) &&\n        isSpringType(options, durationKeys)) {\n        const derived = findSpring(options);\n        springOptions = {\n            ...springOptions,\n            ...derived,\n            mass: 1.0,\n        };\n        springOptions.isResolvedFromDuration = true;\n    }\n    return springOptions;\n}\nfunction spring({ keyframes, restDelta, restSpeed, ...options }) {\n    const origin = keyframes[0];\n    const target = keyframes[keyframes.length - 1];\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = { done: false, value: origin };\n    const { stiffness, damping, mass, duration, velocity, isResolvedFromDuration, } = getSpringOptions({\n        ...options,\n        velocity: -millisecondsToSeconds(options.velocity || 0),\n    });\n    const initialVelocity = velocity || 0.0;\n    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));\n    const initialDelta = target - origin;\n    const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));\n    /**\n     * If we're working on a granular scale, use smaller defaults for determining\n     * when the spring is finished.\n     *\n     * These defaults have been selected emprically based on what strikes a good\n     * ratio between feeling good and finishing as soon as changes are imperceptible.\n     */\n    const isGranularScale = Math.abs(initialDelta) < 5;\n    restSpeed || (restSpeed = isGranularScale ? 0.01 : 2);\n    restDelta || (restDelta = isGranularScale ? 0.005 : 0.5);\n    let resolveSpring;\n    if (dampingRatio < 1) {\n        const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);\n        // Underdamped spring\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            return (target -\n                envelope *\n                    (((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) /\n                        angularFreq) *\n                        Math.sin(angularFreq * t) +\n                        initialDelta * Math.cos(angularFreq * t)));\n        };\n    }\n    else if (dampingRatio === 1) {\n        // Critically damped spring\n        resolveSpring = (t) => target -\n            Math.exp(-undampedAngularFreq * t) *\n                (initialDelta +\n                    (initialVelocity + undampedAngularFreq * initialDelta) * t);\n    }\n    else {\n        // Overdamped spring\n        const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);\n        resolveSpring = (t) => {\n            const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t);\n            // When performing sinh or cosh values can hit Infinity so we cap them here\n            const freqForT = Math.min(dampedAngularFreq * t, 300);\n            return (target -\n                (envelope *\n                    ((initialVelocity +\n                        dampingRatio * undampedAngularFreq * initialDelta) *\n                        Math.sinh(freqForT) +\n                        dampedAngularFreq *\n                            initialDelta *\n                            Math.cosh(freqForT))) /\n                    dampedAngularFreq);\n        };\n    }\n    return {\n        calculatedDuration: isResolvedFromDuration ? duration || null : null,\n        next: (t) => {\n            const current = resolveSpring(t);\n            if (!isResolvedFromDuration) {\n                let currentVelocity = 0.0;\n                /**\n                 * We only need to calculate velocity for under-damped springs\n                 * as over- and critically-damped springs can't overshoot, so\n                 * checking only for displacement is enough.\n                 */\n                if (dampingRatio < 1) {\n                    currentVelocity =\n                        t === 0\n                            ? secondsToMilliseconds(initialVelocity)\n                            : calcGeneratorVelocity(resolveSpring, t, current);\n                }\n                const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n                const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;\n                state.done =\n                    isBelowVelocityThreshold && isBelowDisplacementThreshold;\n            }\n            else {\n                state.done = t >= duration;\n            }\n            state.value = state.done ? target : current;\n            return state;\n        },\n    };\n}\n\nexport { spring };\n","import { spring } from './spring/index.mjs';\nimport { calcGeneratorVelocity } from './utils/velocity.mjs';\n\nfunction inertia({ keyframes, velocity = 0.0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min, max, restDelta = 0.5, restSpeed, }) {\n    const origin = keyframes[0];\n    const state = {\n        done: false,\n        value: origin,\n    };\n    const isOutOfBounds = (v) => (min !== undefined && v < min) || (max !== undefined && v > max);\n    const nearestBoundary = (v) => {\n        if (min === undefined)\n            return max;\n        if (max === undefined)\n            return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    let amplitude = power * velocity;\n    const ideal = origin + amplitude;\n    const target = modifyTarget === undefined ? ideal : modifyTarget(ideal);\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal)\n        amplitude = target - origin;\n    const calcDelta = (t) => -amplitude * Math.exp(-t / timeConstant);\n    const calcLatest = (t) => target + calcDelta(t);\n    const applyFriction = (t) => {\n        const delta = calcDelta(t);\n        const latest = calcLatest(t);\n        state.done = Math.abs(delta) <= restDelta;\n        state.value = state.done ? target : latest;\n    };\n    /**\n     * Ideally this would resolve for t in a stateless way, we could\n     * do that by always precalculating the animation but as we know\n     * this will be done anyway we can assume that spring will\n     * be discovered during that.\n     */\n    let timeReachedBoundary;\n    let spring$1;\n    const checkCatchBoundary = (t) => {\n        if (!isOutOfBounds(state.value))\n            return;\n        timeReachedBoundary = t;\n        spring$1 = spring({\n            keyframes: [state.value, nearestBoundary(state.value)],\n            velocity: calcGeneratorVelocity(calcLatest, t, state.value), // TODO: This should be passing * 1000\n            damping: bounceDamping,\n            stiffness: bounceStiffness,\n            restDelta,\n            restSpeed,\n        });\n    };\n    checkCatchBoundary(0);\n    return {\n        calculatedDuration: null,\n        next: (t) => {\n            /**\n             * We need to resolve the friction to figure out if we need a\n             * spring but we don't want to do this twice per frame. So here\n             * we flag if we updated for this frame and later if we did\n             * we can skip doing it again.\n             */\n            let hasUpdatedFrame = false;\n            if (!spring$1 && timeReachedBoundary === undefined) {\n                hasUpdatedFrame = true;\n                applyFriction(t);\n                checkCatchBoundary(t);\n            }\n            /**\n             * If we have a spring and the provided t is beyond the moment the friction\n             * animation crossed the min/max boundary, use the spring.\n             */\n            if (timeReachedBoundary !== undefined && t >= timeReachedBoundary) {\n                return spring$1.next(t - timeReachedBoundary);\n            }\n            else {\n                !hasUpdatedFrame && applyFriction(t);\n                return state;\n            }\n        },\n    };\n}\n\nexport { inertia };\n","import { cubicBezier } from './cubic-bezier.mjs';\n\nconst easeIn = /*@__PURE__*/ cubicBezier(0.42, 0, 1, 1);\nconst easeOut = /*@__PURE__*/ cubicBezier(0, 0, 0.58, 1);\nconst easeInOut = /*@__PURE__*/ cubicBezier(0.42, 0, 0.58, 1);\n\nexport { easeIn, easeInOut, easeOut };\n","const isEasingArray = (ease) => {\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\nexport { isEasingArray };\n","import { invariant } from '../../utils/errors.mjs';\nimport { cubicBezier } from '../cubic-bezier.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { easeIn, easeInOut, easeOut } from '../ease.mjs';\nimport { circIn, circInOut, circOut } from '../circ.mjs';\nimport { backIn, backInOut, backOut } from '../back.mjs';\nimport { anticipate } from '../anticipate.mjs';\n\nconst easingLookup = {\n    linear: noop,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate,\n};\nconst easingDefinitionToFunction = (definition) => {\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    }\n    else if (typeof definition === \"string\") {\n        // Else lookup from table\n        invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\n\nexport { easingDefinitionToFunction };\n","function convertOffsetToTimes(offset, duration) {\n    return offset.map((o) => o * duration);\n}\n\nexport { convertOffsetToTimes };\n","import { easeInOut } from '../../easing/ease.mjs';\nimport { isEasingArray } from '../../easing/utils/is-easing-array.mjs';\nimport { easingDefinitionToFunction } from '../../easing/utils/map.mjs';\nimport { interpolate } from '../../utils/interpolate.mjs';\nimport { defaultOffset } from '../../utils/offsets/default.mjs';\nimport { convertOffsetToTimes } from '../../utils/offsets/time.mjs';\n\nfunction defaultEasing(values, easing) {\n    return values.map(() => easing || easeInOut).splice(0, values.length - 1);\n}\nfunction keyframes({ duration = 300, keyframes: keyframeValues, times, ease = \"easeInOut\", }) {\n    /**\n     * Easing functions can be externally defined as strings. Here we convert them\n     * into actual functions.\n     */\n    const easingFunctions = isEasingArray(ease)\n        ? ease.map(easingDefinitionToFunction)\n        : easingDefinitionToFunction(ease);\n    /**\n     * This is the Iterator-spec return value. We ensure it's mutable rather than using a generator\n     * to reduce GC during animation.\n     */\n    const state = {\n        done: false,\n        value: keyframeValues[0],\n    };\n    /**\n     * Create a times array based on the provided 0-1 offsets\n     */\n    const absoluteTimes = convertOffsetToTimes(\n    // Only use the provided offsets if they're the correct length\n    // TODO Maybe we should warn here if there's a length mismatch\n    times && times.length === keyframeValues.length\n        ? times\n        : defaultOffset(keyframeValues), duration);\n    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {\n        ease: Array.isArray(easingFunctions)\n            ? easingFunctions\n            : defaultEasing(keyframeValues, easingFunctions),\n    });\n    return {\n        calculatedDuration: duration,\n        next: (t) => {\n            state.value = mapTimeToKeyframe(t);\n            state.done = t >= duration;\n            return state;\n        },\n    };\n}\n\nexport { defaultEasing, keyframes };\n","/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxGeneratorDuration = 20000;\nfunction calcGeneratorDuration(generator) {\n    let duration = 0;\n    const timeStep = 50;\n    let state = generator.next(duration);\n    while (!state.done && duration < maxGeneratorDuration) {\n        duration += timeStep;\n        state = generator.next(duration);\n    }\n    return duration >= maxGeneratorDuration ? Infinity : duration;\n}\n\nexport { calcGeneratorDuration, maxGeneratorDuration };\n","import { time } from '../../../frameloop/sync-time.mjs';\nimport { frame, cancelFrame, frameData } from '../../../frameloop/frame.mjs';\n\nconst frameloopDriver = (update) => {\n    const passTimestamp = ({ timestamp }) => update(timestamp);\n    return {\n        start: () => frame.update(passTimestamp, true),\n        stop: () => cancelFrame(passTimestamp),\n        /**\n         * If we're processing this frame we can use the\n         * framelocked timestamp to keep things in sync.\n         */\n        now: () => (frameData.isProcessing ? frameData.timestamp : time.now()),\n    };\n};\n\nexport { frameloopDriver };\n","import { KeyframeResolver } from '../../render/utils/KeyframesResolver.mjs';\nimport { spring } from '../generators/spring/index.mjs';\nimport { inertia } from '../generators/inertia.mjs';\nimport { keyframes } from '../generators/keyframes.mjs';\nimport { BaseAnimation } from './BaseAnimation.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { mix } from '../../utils/mix/index.mjs';\nimport { calcGeneratorDuration } from '../generators/utils/calc-duration.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { invariant } from '../../utils/errors.mjs';\nimport { frameloopDriver } from './drivers/driver-frameloop.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\nimport { isGenerator } from '../generators/utils/is-generator.mjs';\n\nconst generators = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring,\n};\nconst percentToProgress = (percent) => percent / 100;\n/**\n * Animation that runs on the main thread. Designed to be WAAPI-spec in the subset of\n * features we expose publically. Mostly the compatibility is to ensure visual identity\n * between both WAAPI and main thread animations.\n */\nclass MainThreadAnimation extends BaseAnimation {\n    constructor(options) {\n        super(options);\n        /**\n         * The time at which the animation was paused.\n         */\n        this.holdTime = null;\n        /**\n         * The time at which the animation was cancelled.\n         */\n        this.cancelTime = null;\n        /**\n         * The current time of the animation.\n         */\n        this.currentTime = 0;\n        /**\n         * Playback speed as a factor. 0 would be stopped, -1 reverse and 2 double speed.\n         */\n        this.playbackSpeed = 1;\n        /**\n         * The state of the animation to apply when the animation is resolved. This\n         * allows calls to the public API to control the animation before it is resolved,\n         * without us having to resolve it first.\n         */\n        this.pendingPlayState = \"running\";\n        /**\n         * The time at which the animation was started.\n         */\n        this.startTime = null;\n        this.state = \"idle\";\n        /**\n         * This method is bound to the instance to fix a pattern where\n         * animation.stop is returned as a reference from a useEffect.\n         */\n        this.stop = () => {\n            this.resolver.cancel();\n            this.isStopped = true;\n            if (this.state === \"idle\")\n                return;\n            this.teardown();\n            const { onStop } = this.options;\n            onStop && onStop();\n        };\n        const { name, motionValue, element, keyframes } = this.options;\n        const KeyframeResolver$1 = (element === null || element === void 0 ? void 0 : element.KeyframeResolver) || KeyframeResolver;\n        const onResolved = (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe);\n        this.resolver = new KeyframeResolver$1(keyframes, onResolved, name, motionValue, element);\n        this.resolver.scheduleResolve();\n    }\n    initPlayback(keyframes$1) {\n        const { type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType, velocity = 0, } = this.options;\n        const generatorFactory = isGenerator(type)\n            ? type\n            : generators[type] || keyframes;\n        /**\n         * If our generator doesn't support mixing numbers, we need to replace keyframes with\n         * [0, 100] and then make a function that maps that to the actual keyframes.\n         *\n         * 100 is chosen instead of 1 as it works nicer with spring animations.\n         */\n        let mapPercentToKeyframes;\n        let mirroredGenerator;\n        if (generatorFactory !== keyframes &&\n            typeof keyframes$1[0] !== \"number\") {\n            if (process.env.NODE_ENV !== \"production\") {\n                invariant(keyframes$1.length === 2, `Only two keyframes currently supported with spring and inertia animations. Trying to animate ${keyframes$1}`);\n            }\n            mapPercentToKeyframes = pipe(percentToProgress, mix(keyframes$1[0], keyframes$1[1]));\n            keyframes$1 = [0, 100];\n        }\n        const generator = generatorFactory({ ...this.options, keyframes: keyframes$1 });\n        /**\n         * If we have a mirror repeat type we need to create a second generator that outputs the\n         * mirrored (not reversed) animation and later ping pong between the two generators.\n         */\n        if (repeatType === \"mirror\") {\n            mirroredGenerator = generatorFactory({\n                ...this.options,\n                keyframes: [...keyframes$1].reverse(),\n                velocity: -velocity,\n            });\n        }\n        /**\n         * If duration is undefined and we have repeat options,\n         * we need to calculate a duration from the generator.\n         *\n         * We set it to the generator itself to cache the duration.\n         * Any timeline resolver will need to have already precalculated\n         * the duration by this step.\n         */\n        if (generator.calculatedDuration === null) {\n            generator.calculatedDuration = calcGeneratorDuration(generator);\n        }\n        const { calculatedDuration } = generator;\n        const resolvedDuration = calculatedDuration + repeatDelay;\n        const totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n        return {\n            generator,\n            mirroredGenerator,\n            mapPercentToKeyframes,\n            calculatedDuration,\n            resolvedDuration,\n            totalDuration,\n        };\n    }\n    onPostResolved() {\n        const { autoplay = true } = this.options;\n        this.play();\n        if (this.pendingPlayState === \"paused\" || !autoplay) {\n            this.pause();\n        }\n        else {\n            this.state = this.pendingPlayState;\n        }\n    }\n    tick(timestamp, sample = false) {\n        const { resolved } = this;\n        // If the animations has failed to resolve, return the final keyframe.\n        if (!resolved) {\n            const { keyframes } = this.options;\n            return { done: true, value: keyframes[keyframes.length - 1] };\n        }\n        const { finalKeyframe, generator, mirroredGenerator, mapPercentToKeyframes, keyframes, calculatedDuration, totalDuration, resolvedDuration, } = resolved;\n        if (this.startTime === null)\n            return generator.next(0);\n        const { delay, repeat, repeatType, repeatDelay, onUpdate } = this.options;\n        /**\n         * requestAnimationFrame timestamps can come through as lower than\n         * the startTime as set by performance.now(). Here we prevent this,\n         * though in the future it could be possible to make setting startTime\n         * a pending operation that gets resolved here.\n         */\n        if (this.speed > 0) {\n            this.startTime = Math.min(this.startTime, timestamp);\n        }\n        else if (this.speed < 0) {\n            this.startTime = Math.min(timestamp - totalDuration / this.speed, this.startTime);\n        }\n        // Update currentTime\n        if (sample) {\n            this.currentTime = timestamp;\n        }\n        else if (this.holdTime !== null) {\n            this.currentTime = this.holdTime;\n        }\n        else {\n            // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =\n            // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for\n            // example.\n            this.currentTime =\n                Math.round(timestamp - this.startTime) * this.speed;\n        }\n        // Rebase on delay\n        const timeWithoutDelay = this.currentTime - delay * (this.speed >= 0 ? 1 : -1);\n        const isInDelayPhase = this.speed >= 0\n            ? timeWithoutDelay < 0\n            : timeWithoutDelay > totalDuration;\n        this.currentTime = Math.max(timeWithoutDelay, 0);\n        // If this animation has finished, set the current time  to the total duration.\n        if (this.state === \"finished\" && this.holdTime === null) {\n            this.currentTime = totalDuration;\n        }\n        let elapsed = this.currentTime;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */\n            const progress = Math.min(this.currentTime, totalDuration) / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */\n            let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */\n            let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */\n            if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */\n            const isOddIteration = Boolean(currentIteration % 2);\n            if (isOddIteration) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                }\n                else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            elapsed = clamp(0, 1, iterationProgress) * resolvedDuration;\n        }\n        /**\n         * If we're in negative time, set state as the initial keyframe.\n         * This prevents delay: x, duration: 0 animations from finishing\n         * instantly.\n         */\n        const state = isInDelayPhase\n            ? { done: false, value: keyframes[0] }\n            : frameGenerator.next(elapsed);\n        if (mapPercentToKeyframes) {\n            state.value = mapPercentToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (!isInDelayPhase && calculatedDuration !== null) {\n            done =\n                this.speed >= 0\n                    ? this.currentTime >= totalDuration\n                    : this.currentTime <= 0;\n        }\n        const isAnimationFinished = this.holdTime === null &&\n            (this.state === \"finished\" || (this.state === \"running\" && done));\n        if (isAnimationFinished && finalKeyframe !== undefined) {\n            state.value = getFinalKeyframe(keyframes, this.options, finalKeyframe);\n        }\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            this.finish();\n        }\n        return state;\n    }\n    get duration() {\n        const { resolved } = this;\n        return resolved ? millisecondsToSeconds(resolved.calculatedDuration) : 0;\n    }\n    get time() {\n        return millisecondsToSeconds(this.currentTime);\n    }\n    set time(newTime) {\n        newTime = secondsToMilliseconds(newTime);\n        this.currentTime = newTime;\n        if (this.holdTime !== null || this.speed === 0) {\n            this.holdTime = newTime;\n        }\n        else if (this.driver) {\n            this.startTime = this.driver.now() - newTime / this.speed;\n        }\n    }\n    get speed() {\n        return this.playbackSpeed;\n    }\n    set speed(newSpeed) {\n        const hasChanged = this.playbackSpeed !== newSpeed;\n        this.playbackSpeed = newSpeed;\n        if (hasChanged) {\n            this.time = millisecondsToSeconds(this.currentTime);\n        }\n    }\n    play() {\n        if (!this.resolver.isScheduled) {\n            this.resolver.resume();\n        }\n        if (!this._resolved) {\n            this.pendingPlayState = \"running\";\n            return;\n        }\n        if (this.isStopped)\n            return;\n        const { driver = frameloopDriver, onPlay, startTime } = this.options;\n        if (!this.driver) {\n            this.driver = driver((timestamp) => this.tick(timestamp));\n        }\n        onPlay && onPlay();\n        const now = this.driver.now();\n        if (this.holdTime !== null) {\n            this.startTime = now - this.holdTime;\n        }\n        else if (!this.startTime) {\n            this.startTime = startTime !== null && startTime !== void 0 ? startTime : this.calcStartTime();\n        }\n        else if (this.state === \"finished\") {\n            this.startTime = now;\n        }\n        if (this.state === \"finished\") {\n            this.updateFinishedPromise();\n        }\n        this.cancelTime = this.startTime;\n        this.holdTime = null;\n        /**\n         * Set playState to running only after we've used it in\n         * the previous logic.\n         */\n        this.state = \"running\";\n        this.driver.start();\n    }\n    pause() {\n        var _a;\n        if (!this._resolved) {\n            this.pendingPlayState = \"paused\";\n            return;\n        }\n        this.state = \"paused\";\n        this.holdTime = (_a = this.currentTime) !== null && _a !== void 0 ? _a : 0;\n    }\n    complete() {\n        if (this.state !== \"running\") {\n            this.play();\n        }\n        this.pendingPlayState = this.state = \"finished\";\n        this.holdTime = null;\n    }\n    finish() {\n        this.teardown();\n        this.state = \"finished\";\n        const { onComplete } = this.options;\n        onComplete && onComplete();\n    }\n    cancel() {\n        if (this.cancelTime !== null) {\n            this.tick(this.cancelTime);\n        }\n        this.teardown();\n        this.updateFinishedPromise();\n    }\n    teardown() {\n        this.state = \"idle\";\n        this.stopDriver();\n        this.resolveFinishedPromise();\n        this.updateFinishedPromise();\n        this.startTime = this.cancelTime = null;\n        this.resolver.cancel();\n    }\n    stopDriver() {\n        if (!this.driver)\n            return;\n        this.driver.stop();\n        this.driver = undefined;\n    }\n    sample(time) {\n        this.startTime = 0;\n        return this.tick(time, true);\n    }\n}\n// Legacy interface\nfunction animateValue(options) {\n    return new MainThreadAnimation(options);\n}\n\nexport { MainThreadAnimation, animateValue };\n","const isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === \"number\";\n\nexport { isBezierDefinition };\n","import { progress } from '../../../../utils/progress.mjs';\n\n// Create a linear easing point for every 10 ms\nconst resolution = 10;\nconst generateLinearEasing = (easing, duration // as milliseconds\n) => {\n    let points = \"\";\n    const numPoints = Math.max(Math.round(duration / resolution), 2);\n    for (let i = 0; i < numPoints; i++) {\n        points += easing(progress(0, numPoints - 1, i)) + \", \";\n    }\n    return `linear(${points.substring(0, points.length - 2)})`;\n};\n\nexport { generateLinearEasing };\n","/**\n * Add the ability for test suites to manually set support flags\n * to better test more environments.\n */\nconst supportsFlags = {\n    linearEasing: undefined,\n};\n\nexport { supportsFlags };\n","import { memo } from '../../../../utils/memo.mjs';\nimport { supportsFlags } from './supports-flags.mjs';\n\nfunction memoSupports(callback, supportsFlag) {\n    const memoized = memo(callback);\n    return () => { var _a; return (_a = supportsFlags[supportsFlag]) !== null && _a !== void 0 ? _a : memoized(); };\n}\n\nexport { memoSupports };\n","import { memoSupports } from './memo-supports.mjs';\n\nconst supportsLinearEasing = /*@__PURE__*/ memoSupports(() => {\n    try {\n        document\n            .createElement(\"div\")\n            .animate({ opacity: 0 }, { easing: \"linear(0, 1)\" });\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}, \"linearEasing\");\n\nexport { supportsLinearEasing };\n","import { isBezierDefinition } from '../../../easing/utils/is-bezier-definition.mjs';\nimport { generateLinearEasing } from './utils/linear.mjs';\nimport { supportsLinearEasing } from './utils/supports-linear-easing.mjs';\n\nfunction isWaapiSupportedEasing(easing) {\n    return Boolean((typeof easing === \"function\" && supportsLinearEasing()) ||\n        !easing ||\n        (typeof easing === \"string\" &&\n            (easing in supportedWaapiEasing || supportsLinearEasing())) ||\n        isBezierDefinition(easing) ||\n        (Array.isArray(easing) && easing.every(isWaapiSupportedEasing)));\n}\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\nconst supportedWaapiEasing = {\n    linear: \"linear\",\n    ease: \"ease\",\n    easeIn: \"ease-in\",\n    easeOut: \"ease-out\",\n    easeInOut: \"ease-in-out\",\n    circIn: /*@__PURE__*/ cubicBezierAsString([0, 0.65, 0.55, 1]),\n    circOut: /*@__PURE__*/ cubicBezierAsString([0.55, 0, 1, 0.45]),\n    backIn: /*@__PURE__*/ cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),\n    backOut: /*@__PURE__*/ cubicBezierAsString([0.33, 1.53, 0.69, 0.99]),\n};\nfunction mapEasingToNativeEasing(easing, duration) {\n    if (!easing) {\n        return undefined;\n    }\n    else if (typeof easing === \"function\" && supportsLinearEasing()) {\n        return generateLinearEasing(easing, duration);\n    }\n    else if (isBezierDefinition(easing)) {\n        return cubicBezierAsString(easing);\n    }\n    else if (Array.isArray(easing)) {\n        return easing.map((segmentEasing) => mapEasingToNativeEasing(segmentEasing, duration) ||\n            supportedWaapiEasing.easeOut);\n    }\n    else {\n        return supportedWaapiEasing[easing];\n    }\n}\n\nexport { cubicBezierAsString, isWaapiSupportedEasing, mapEasingToNativeEasing, supportedWaapiEasing };\n","import { mapEasingToNativeEasing } from './easing.mjs';\n\nfunction startWaapiAnimation(element, valueName, keyframes, { delay = 0, duration = 300, repeat = 0, repeatType = \"loop\", ease, times, } = {}) {\n    const keyframeOptions = { [valueName]: keyframes };\n    if (times)\n        keyframeOptions.offset = times;\n    const easing = mapEasingToNativeEasing(ease, duration);\n    /**\n     * If this is an easing array, apply to keyframes, not animation as a whole\n     */\n    if (Array.isArray(easing))\n        keyframeOptions.easing = easing;\n    return element.animate(keyframeOptions, {\n        delay,\n        duration,\n        easing: !Array.isArray(easing) ? easing : \"linear\",\n        fill: \"both\",\n        iterations: repeat + 1,\n        direction: repeatType === \"reverse\" ? \"alternate\" : \"normal\",\n    });\n}\n\nexport { startWaapiAnimation };\n","function attachTimeline(animation, timeline) {\n    animation.timeline = timeline;\n    animation.onfinish = null;\n}\n\nexport { attachTimeline };\n","import { memo } from '../../../../utils/memo.mjs';\n\nconst supportsWaapi = /*@__PURE__*/ memo(() => Object.hasOwnProperty.call(Element.prototype, \"animate\"));\n\nexport { supportsWaapi };\n","import { anticipate } from '../../easing/anticipate.mjs';\nimport { backInOut } from '../../easing/back.mjs';\nimport { circInOut } from '../../easing/circ.mjs';\nimport { DOMKeyframesResolver } from '../../render/dom/DOMKeyframesResolver.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { isGenerator } from '../generators/utils/is-generator.mjs';\nimport { BaseAnimation } from './BaseAnimation.mjs';\nimport { MainThreadAnimation } from './MainThreadAnimation.mjs';\nimport { acceleratedValues } from './utils/accelerated-values.mjs';\nimport { startWaapiAnimation } from './waapi/index.mjs';\nimport { isWaapiSupportedEasing } from './waapi/easing.mjs';\nimport { attachTimeline } from './waapi/utils/attach-timeline.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\nimport { supportsLinearEasing } from './waapi/utils/supports-linear-easing.mjs';\nimport { supportsWaapi } from './waapi/utils/supports-waapi.mjs';\n\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\n/**\n * Implement a practical max duration for keyframe generation\n * to prevent infinite loops\n */\nconst maxDuration = 20000;\n/**\n * Check if an animation can run natively via WAAPI or requires pregenerated keyframes.\n * WAAPI doesn't support spring or function easings so we run these as JS animation before\n * handing off.\n */\nfunction requiresPregeneratedKeyframes(options) {\n    return (isGenerator(options.type) ||\n        options.type === \"spring\" ||\n        !isWaapiSupportedEasing(options.ease));\n}\nfunction pregenerateKeyframes(keyframes, options) {\n    /**\n     * Create a main-thread animation to pregenerate keyframes.\n     * We sample this at regular intervals to generate keyframes that we then\n     * linearly interpolate between.\n     */\n    const sampleAnimation = new MainThreadAnimation({\n        ...options,\n        keyframes,\n        repeat: 0,\n        delay: 0,\n        isGenerator: true,\n    });\n    let state = { done: false, value: keyframes[0] };\n    const pregeneratedKeyframes = [];\n    /**\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\n     * we're heading for an infinite loop.\n     */\n    let t = 0;\n    while (!state.done && t < maxDuration) {\n        state = sampleAnimation.sample(t);\n        pregeneratedKeyframes.push(state.value);\n        t += sampleDelta;\n    }\n    return {\n        times: undefined,\n        keyframes: pregeneratedKeyframes,\n        duration: t - sampleDelta,\n        ease: \"linear\",\n    };\n}\nconst unsupportedEasingFunctions = {\n    anticipate,\n    backInOut,\n    circInOut,\n};\nfunction isUnsupportedEase(key) {\n    return key in unsupportedEasingFunctions;\n}\nclass AcceleratedAnimation extends BaseAnimation {\n    constructor(options) {\n        super(options);\n        const { name, motionValue, element, keyframes } = this.options;\n        this.resolver = new DOMKeyframesResolver(keyframes, (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe), name, motionValue, element);\n        this.resolver.scheduleResolve();\n    }\n    initPlayback(keyframes, finalKeyframe) {\n        var _a;\n        let { duration = 300, times, ease, type, motionValue, name, startTime, } = this.options;\n        /**\n         * If element has since been unmounted, return false to indicate\n         * the animation failed to initialised.\n         */\n        if (!((_a = motionValue.owner) === null || _a === void 0 ? void 0 : _a.current)) {\n            return false;\n        }\n        /**\n         * If the user has provided an easing function name that isn't supported\n         * by WAAPI (like \"anticipate\"), we need to provide the corressponding\n         * function. This will later get converted to a linear() easing function.\n         */\n        if (typeof ease === \"string\" &&\n            supportsLinearEasing() &&\n            isUnsupportedEase(ease)) {\n            ease = unsupportedEasingFunctions[ease];\n        }\n        /**\n         * If this animation needs pre-generated keyframes then generate.\n         */\n        if (requiresPregeneratedKeyframes(this.options)) {\n            const { onComplete, onUpdate, motionValue, element, ...options } = this.options;\n            const pregeneratedAnimation = pregenerateKeyframes(keyframes, options);\n            keyframes = pregeneratedAnimation.keyframes;\n            // If this is a very short animation, ensure we have\n            // at least two keyframes to animate between as older browsers\n            // can't animate between a single keyframe.\n            if (keyframes.length === 1) {\n                keyframes[1] = keyframes[0];\n            }\n            duration = pregeneratedAnimation.duration;\n            times = pregeneratedAnimation.times;\n            ease = pregeneratedAnimation.ease;\n            type = \"keyframes\";\n        }\n        const animation = startWaapiAnimation(motionValue.owner.current, name, keyframes, { ...this.options, duration, times, ease });\n        // Override the browser calculated startTime with one synchronised to other JS\n        // and WAAPI animations starting this event loop.\n        animation.startTime = startTime !== null && startTime !== void 0 ? startTime : this.calcStartTime();\n        if (this.pendingTimeline) {\n            attachTimeline(animation, this.pendingTimeline);\n            this.pendingTimeline = undefined;\n        }\n        else {\n            /**\n             * Prefer the `onfinish` prop as it's more widely supported than\n             * the `finished` promise.\n             *\n             * Here, we synchronously set the provided MotionValue to the end\n             * keyframe. If we didn't, when the WAAPI animation is finished it would\n             * be removed from the element which would then revert to its old styles.\n             */\n            animation.onfinish = () => {\n                const { onComplete } = this.options;\n                motionValue.set(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n                onComplete && onComplete();\n                this.cancel();\n                this.resolveFinishedPromise();\n            };\n        }\n        return {\n            animation,\n            duration,\n            times,\n            type,\n            ease,\n            keyframes: keyframes,\n        };\n    }\n    get duration() {\n        const { resolved } = this;\n        if (!resolved)\n            return 0;\n        const { duration } = resolved;\n        return millisecondsToSeconds(duration);\n    }\n    get time() {\n        const { resolved } = this;\n        if (!resolved)\n            return 0;\n        const { animation } = resolved;\n        return millisecondsToSeconds(animation.currentTime || 0);\n    }\n    set time(newTime) {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.currentTime = secondsToMilliseconds(newTime);\n    }\n    get speed() {\n        const { resolved } = this;\n        if (!resolved)\n            return 1;\n        const { animation } = resolved;\n        return animation.playbackRate;\n    }\n    set speed(newSpeed) {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.playbackRate = newSpeed;\n    }\n    get state() {\n        const { resolved } = this;\n        if (!resolved)\n            return \"idle\";\n        const { animation } = resolved;\n        return animation.playState;\n    }\n    get startTime() {\n        const { resolved } = this;\n        if (!resolved)\n            return null;\n        const { animation } = resolved;\n        // Coerce to number as TypeScript incorrectly types this\n        // as CSSNumberish\n        return animation.startTime;\n    }\n    /**\n     * Replace the default DocumentTimeline with another AnimationTimeline.\n     * Currently used for scroll animations.\n     */\n    attachTimeline(timeline) {\n        if (!this._resolved) {\n            this.pendingTimeline = timeline;\n        }\n        else {\n            const { resolved } = this;\n            if (!resolved)\n                return noop;\n            const { animation } = resolved;\n            attachTimeline(animation, timeline);\n        }\n        return noop;\n    }\n    play() {\n        if (this.isStopped)\n            return;\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        if (animation.playState === \"finished\") {\n            this.updateFinishedPromise();\n        }\n        animation.play();\n    }\n    pause() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation } = resolved;\n        animation.pause();\n    }\n    stop() {\n        this.resolver.cancel();\n        this.isStopped = true;\n        if (this.state === \"idle\")\n            return;\n        this.resolveFinishedPromise();\n        this.updateFinishedPromise();\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        const { animation, keyframes, duration, type, ease, times } = resolved;\n        if (animation.playState === \"idle\" ||\n            animation.playState === \"finished\") {\n            return;\n        }\n        /**\n         * WAAPI doesn't natively have any interruption capabilities.\n         *\n         * Rather than read commited styles back out of the DOM, we can\n         * create a renderless JS animation and sample it twice to calculate\n         * its current value, \"previous\" value, and therefore allow\n         * Motion to calculate velocity for any subsequent animation.\n         */\n        if (this.time) {\n            const { motionValue, onUpdate, onComplete, element, ...options } = this.options;\n            const sampleAnimation = new MainThreadAnimation({\n                ...options,\n                keyframes,\n                duration,\n                type,\n                ease,\n                times,\n                isGenerator: true,\n            });\n            const sampleTime = secondsToMilliseconds(this.time);\n            motionValue.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);\n        }\n        const { onStop } = this.options;\n        onStop && onStop();\n        this.cancel();\n    }\n    complete() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        resolved.animation.finish();\n    }\n    cancel() {\n        const { resolved } = this;\n        if (!resolved)\n            return;\n        resolved.animation.cancel();\n    }\n    static supports(options) {\n        const { motionValue, name, repeatDelay, repeatType, damping, type } = options;\n        return (supportsWaapi() &&\n            name &&\n            acceleratedValues.has(name) &&\n            motionValue &&\n            motionValue.owner &&\n            motionValue.owner.current instanceof HTMLElement &&\n            /**\n             * If we're outputting values to onUpdate then we can't use WAAPI as there's\n             * no way to read the value from WAAPI every frame.\n             */\n            !motionValue.owner.getProps().onUpdate &&\n            !repeatDelay &&\n            repeatType !== \"mirror\" &&\n            damping !== 0 &&\n            type !== \"inertia\");\n    }\n}\n\nexport { AcceleratedAnimation };\n","import { supportsScrollTimeline } from '../render/dom/scroll/supports.mjs';\n\nclass GroupPlaybackControls {\n    constructor(animations) {\n        // Bound to accomodate common `return animation.stop` pattern\n        this.stop = () => this.runAll(\"stop\");\n        this.animations = animations.filter(Boolean);\n    }\n    then(onResolve, onReject) {\n        return Promise.all(this.animations).then(onResolve).catch(onReject);\n    }\n    /**\n     * TODO: Filter out cancelled or stopped animations before returning\n     */\n    getAll(propName) {\n        return this.animations[0][propName];\n    }\n    setAll(propName, newValue) {\n        for (let i = 0; i < this.animations.length; i++) {\n            this.animations[i][propName] = newValue;\n        }\n    }\n    attachTimeline(timeline, fallback) {\n        const subscriptions = this.animations.map((animation) => {\n            if (supportsScrollTimeline() && animation.attachTimeline) {\n                return animation.attachTimeline(timeline);\n            }\n            else {\n                return fallback(animation);\n            }\n        });\n        return () => {\n            subscriptions.forEach((cancel, i) => {\n                cancel && cancel();\n                this.animations[i].stop();\n            });\n        };\n    }\n    get time() {\n        return this.getAll(\"time\");\n    }\n    set time(time) {\n        this.setAll(\"time\", time);\n    }\n    get speed() {\n        return this.getAll(\"speed\");\n    }\n    set speed(speed) {\n        this.setAll(\"speed\", speed);\n    }\n    get startTime() {\n        return this.getAll(\"startTime\");\n    }\n    get duration() {\n        let max = 0;\n        for (let i = 0; i < this.animations.length; i++) {\n            max = Math.max(max, this.animations[i].duration);\n        }\n        return max;\n    }\n    runAll(methodName) {\n        this.animations.forEach((controls) => controls[methodName]());\n    }\n    play() {\n        this.runAll(\"play\");\n    }\n    pause() {\n        this.runAll(\"pause\");\n    }\n    cancel() {\n        this.runAll(\"cancel\");\n    }\n    complete() {\n        this.runAll(\"complete\");\n    }\n}\n\nexport { GroupPlaybackControls };\n","/**\n * Decide whether a transition is defined on a given Transition.\n * This filters out orchestration options and returns true\n * if any options are left.\n */\nfunction isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from, elapsed, ...transition }) {\n    return !!Object.keys(transition).length;\n}\n\nexport { isTransitionDefined };\n","import { secondsToMilliseconds } from '../../utils/time-conversion.mjs';\nimport { getDefaultTransition } from '../utils/default-transitions.mjs';\nimport { getValueTransition } from '../utils/get-value-transition.mjs';\nimport { MotionGlobalConfig } from '../../utils/GlobalConfig.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { getFinalKeyframe } from '../animators/waapi/utils/get-final-keyframe.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\nimport { AcceleratedAnimation } from '../animators/AcceleratedAnimation.mjs';\nimport { MainThreadAnimation } from '../animators/MainThreadAnimation.mjs';\nimport { GroupPlaybackControls } from '../GroupPlaybackControls.mjs';\nimport { isTransitionDefined } from '../utils/is-transition-defined.mjs';\n\nconst animateMotionValue = (name, value, target, transition = {}, element, isHandoff) => (onComplete) => {\n    const valueTransition = getValueTransition(transition, name) || {};\n    /**\n     * Most transition values are currently completely overwritten by value-specific\n     * transitions. In the future it'd be nicer to blend these transitions. But for now\n     * delay actually does inherit from the root transition if not value-specific.\n     */\n    const delay = valueTransition.delay || transition.delay || 0;\n    /**\n     * Elapsed isn't a public transition option but can be passed through from\n     * optimized appear effects in milliseconds.\n     */\n    let { elapsed = 0 } = transition;\n    elapsed = elapsed - secondsToMilliseconds(delay);\n    let options = {\n        keyframes: Array.isArray(target) ? target : [null, target],\n        ease: \"easeOut\",\n        velocity: value.getVelocity(),\n        ...valueTransition,\n        delay: -elapsed,\n        onUpdate: (v) => {\n            value.set(v);\n            valueTransition.onUpdate && valueTransition.onUpdate(v);\n        },\n        onComplete: () => {\n            onComplete();\n            valueTransition.onComplete && valueTransition.onComplete();\n        },\n        name,\n        motionValue: value,\n        element: isHandoff ? undefined : element,\n    };\n    /**\n     * If there's no transition defined for this value, we can generate\n     * unqiue transition settings for this value.\n     */\n    if (!isTransitionDefined(valueTransition)) {\n        options = {\n            ...options,\n            ...getDefaultTransition(name, options),\n        };\n    }\n    /**\n     * Both WAAPI and our internal animation functions use durations\n     * as defined by milliseconds, while our external API defines them\n     * as seconds.\n     */\n    if (options.duration) {\n        options.duration = secondsToMilliseconds(options.duration);\n    }\n    if (options.repeatDelay) {\n        options.repeatDelay = secondsToMilliseconds(options.repeatDelay);\n    }\n    if (options.from !== undefined) {\n        options.keyframes[0] = options.from;\n    }\n    let shouldSkip = false;\n    if (options.type === false ||\n        (options.duration === 0 && !options.repeatDelay)) {\n        options.duration = 0;\n        if (options.delay === 0) {\n            shouldSkip = true;\n        }\n    }\n    if (instantAnimationState.current ||\n        MotionGlobalConfig.skipAnimations) {\n        shouldSkip = true;\n        options.duration = 0;\n        options.delay = 0;\n    }\n    /**\n     * If we can or must skip creating the animation, and apply only\n     * the final keyframe, do so. We also check once keyframes are resolved but\n     * this early check prevents the need to create an animation at all.\n     */\n    if (shouldSkip && !isHandoff && value.get() !== undefined) {\n        const finalKeyframe = getFinalKeyframe(options.keyframes, valueTransition);\n        if (finalKeyframe !== undefined) {\n            frame.update(() => {\n                options.onUpdate(finalKeyframe);\n                options.onComplete();\n            });\n            // We still want to return some animation controls here rather\n            // than returning undefined\n            return new GroupPlaybackControls([]);\n        }\n    }\n    /**\n     * Animate via WAAPI if possible. If this is a handoff animation, the optimised animation will be running via\n     * WAAPI. Therefore, this animation must be JS to ensure it runs \"under\" the\n     * optimised animation.\n     */\n    if (!isHandoff && AcceleratedAnimation.supports(options)) {\n        return new AcceleratedAnimation(options);\n    }\n    else {\n        return new MainThreadAnimation(options);\n    }\n};\n\nexport { animateMotionValue };\n","// Fixes https://github.com/framer/motion/issues/2270\nconst getContextWindow = ({ current }) => {\n    return current ? current.ownerDocument.defaultView : null;\n};\n\nexport { getContextWindow };\n","import { isMotionValue } from '../utils/is-motion-value.mjs';\n\nfunction isWillChangeMotionValue(value) {\n    return Boolean(isMotionValue(value) && value.add);\n}\n\nexport { isWillChangeMotionValue };\n","import { isWillChangeMotionValue } from './is.mjs';\nimport { getWillChangeName } from './get-will-change-name.mjs';\n\nfunction addValueToWillChange(visualElement, key) {\n    var _a;\n    if (!visualElement.applyWillChange)\n        return;\n    const willChange = visualElement.getValue(\"willChange\");\n    if (isWillChangeMotionValue(willChange)) {\n        return willChange.add(key);\n    }\n    else if (!((_a = visualElement.props.style) === null || _a === void 0 ? void 0 : _a.willChange) &&\n        getWillChangeName(key)) {\n        visualElement.setStaticValue(\"willChange\", \"transform\");\n    }\n}\n\nexport { addValueToWillChange };\n","import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            const { dragSnapToOrigin } = this.getProps();\n            // Stop or pause any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            dragSnapToOrigin ? this.pauseAnimation() : this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.postRender(() => onDragStart(event, info));\n            }\n            addValueToWillChange(this.visualElement, \"transform\");\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        const resumeAnimation = () => eachAxis((axis) => {\n            var _a;\n            return this.getAnimationState(axis) === \"paused\" &&\n                ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());\n        });\n        const { dragSnapToOrigin } = this.getProps();\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n            resumeAnimation,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            dragSnapToOrigin,\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.postRender(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        var _a;\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.constraints !== false &&\n                    this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        addValueToWillChange(this.visualElement, axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    pauseAnimation() {\n        eachAxis((axis) => { var _a; return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause(); });\n    }\n    getAnimationState(axis) {\n        var _a;\n        return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = `_drag${axis.toUpperCase()}`;\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial\n                ? props.initial[axis]\n                : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mixNumber(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue && this.constraints !== false) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mixNumber(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints) && dragConstraints.current) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        frame.read(measureDragConstraints);\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.postRender(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n            transformPagePoint: this.node.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.node),\n        });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.postRender(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","import { useContext, useId, useEffect, useCallback } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = useCallback(() => onExitComplete && onExitComplete(id), [id, onExitComplete]);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { mixNumber } from '../../utils/mix/number.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mixNumber(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport { useContext, Component } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\nimport { microtask } from '../../../frameloop/microtask.mjs';\nimport { frame } from '../../../frameloop/frame.mjs';\n\nclass MeasureLayoutWithContext extends Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            microtask.postRender(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (jsx(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mixNumber(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mixNumber(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mixNumber(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mixNumber(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mixNumber(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = /*@__PURE__*/ compress(0, 0.5, circOut);\nconst easeCrossfadeOut = /*@__PURE__*/ compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n/**\n * Reset a delta to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisDeltaInto(delta, originDelta) {\n    delta.translate = originDelta.translate;\n    delta.scale = originDelta.scale;\n    delta.originPoint = originDelta.originPoint;\n    delta.origin = originDelta.origin;\n}\n\nexport { copyAxisDeltaInto, copyAxisInto, copyBoxInto };\n","import { mixNumber } from '../../utils/mix/number.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mixNumber(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mixNumber(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction axisEquals(a, b) {\n    return a.min === b.min && a.max === b.max;\n}\nfunction boxEquals(a, b) {\n    return axisEquals(a.x, b.x) && axisEquals(a.y, b.y);\n}\nfunction axisEqualsRounded(a, b) {\n    return (Math.round(a.min) === Math.round(b.min) &&\n        Math.round(a.max) === Math.round(b.max));\n}\nfunction boxEqualsRounded(a, b) {\n    return axisEqualsRounded(a.x, b.x) && axisEqualsRounded(a.y, b.y);\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\nfunction axisDeltaEquals(a, b) {\n    return (a.translate === b.translate &&\n        a.scale === b.scale &&\n        a.originPoint === b.originPoint);\n}\n\nexport { aspectRatio, axisDeltaEquals, axisEquals, axisEqualsRounded, boxEquals, boxEqualsRounded, isDeltaZero };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    const zTranslate = (latestTransform === null || latestTransform === void 0 ? void 0 : latestTransform.z) || 0;\n    if (xTranslate || yTranslate || zTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, ${zTranslate}px) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { transformPerspective, rotate, rotateX, rotateY, skewX, skewY } = latestTransform;\n        if (transformPerspective)\n            transform = `perspective(${transformPerspective}px) ${transform}`;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n        if (skewX)\n            transform += `skewX(${skewX}deg) `;\n        if (skewY)\n            transform += `skewY(${skewY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { time } from '../frameloop/sync-time.mjs';\nimport { secondsToMilliseconds } from './time-conversion.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = time.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.read(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\nfunction delayInSeconds(callback, timeout) {\n    return delay(callback, secondsToMilliseconds(timeout));\n}\n\nexport { delay, delayInSeconds };\n","function isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\n\nexport { isSVGElement };\n","import { animateMotionValue } from '../interfaces/motion-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","import { optimizedAppearDataAttribute } from './data-id.mjs';\n\nfunction getOptimisedAppearId(visualElement) {\n    return visualElement.props[optimizedAppearDataAttribute];\n}\n\nexport { getOptimisedAppearId };\n","import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto, copyAxisDeltaInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { getValueTransition } from '../../animation/utils/get-value-transition.mjs';\nimport { boxEqualsRounded, isDeltaZero, axisDeltaEquals, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mixNumber } from '../../utils/mix/number.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/animate/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, frameSteps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { microtask } from '../../frameloop/microtask.mjs';\nimport { getOptimisedAppearId } from '../../animation/optimized-appear/get-appear-id.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\n\nconst metrics = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nconst isDebug = typeof window !== \"undefined\" && window.MotionDebug !== undefined;\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\nfunction resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {\n    const { latestValues } = visualElement;\n    // Record the distorting transform and then temporarily set it to 0\n    if (latestValues[key]) {\n        values[key] = latestValues[key];\n        visualElement.setStaticValue(key, 0);\n        if (sharedAnimationValues) {\n            sharedAnimationValues[key] = 0;\n        }\n    }\n}\nfunction cancelTreeOptimisedTransformAnimations(projectionNode) {\n    projectionNode.hasCheckedOptimisedAppear = true;\n    if (projectionNode.root === projectionNode)\n        return;\n    const { visualElement } = projectionNode.options;\n    if (!visualElement)\n        return;\n    const appearId = getOptimisedAppearId(visualElement);\n    if (window.MotionHasOptimisedAnimation(appearId, \"transform\")) {\n        const { layout, layoutId } = projectionNode.options;\n        window.MotionCancelOptimisedAnimation(appearId, \"transform\", frame, !(layout || layoutId));\n    }\n    const { parent } = projectionNode;\n    if (parent && !parent.hasCheckedOptimisedAppear) {\n        cancelTreeOptimisedTransformAnimations(parent);\n    }\n}\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * Store whether this node has been checked for optimised appear animations. As\n             * effects fire bottom-up, and we want to look up the tree for appear animations,\n             * this makes sure we only check each path once, stopping at nodes that\n             * have already been checked.\n             */\n            this.hasCheckedOptimisedAppear = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.scheduleUpdate = () => this.update();\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                if (isDebug) {\n                    metrics.totalNodes =\n                        metrics.resolvedTargetDeltas =\n                            metrics.recalculatedProjection =\n                                0;\n                }\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                if (isDebug) {\n                    window.MotionDebug.record(metrics);\n                }\n            };\n            /**\n             * Frame calculations\n             */\n            this.resolvedRelativeTargetAt = 0.0;\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetSkewAndRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            /**\n             * If we're running optimised appear animations then these must be\n             * cancelled before measuring the DOM. This is so we can measure\n             * the true layout of the element rather than the WAAPI animation\n             * which will be unaffected by the resetSkewAndRotate step.\n             *\n             * Note: This is a DOM write. Worst case scenario is this is sandwiched\n             * between other snapshot reads which will cause unnecessary style recalculations.\n             * This has to happen here though, as we don't yet know which nodes will need\n             * snapshots in startUpdate(), but we only want to cancel optimised animations\n             * if a layout animation measurement is actually going to be affected by them.\n             */\n            if (window.MotionCancelOptimisedAnimation &&\n                !this.hasCheckedOptimisedAppear) {\n                cancelTreeOptimisedTransformAnimations(this);\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = time.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            frameSteps.update.process(frameData);\n            frameSteps.preRender.process(frameData);\n            frameSteps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                microtask.read(this.scheduleUpdate);\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                const isRoot = checkIsScrollRoot(this.instance);\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot,\n                    offset: measureScroll(this.instance),\n                    wasRoot: this.scroll ? this.scroll.isRoot : isRoot,\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty ||\n                this.shouldResetTransform ||\n                this.options.alwaysMeasureLayout;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            var _a;\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            const wasInScrollRoot = ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) || this.path.some(checkNodeWasScrollRoot);\n            if (!wasInScrollRoot) {\n                // Remove viewport scroll to give page-relative coordinates\n                const { scroll } = this.root;\n                if (scroll) {\n                    translateAxis(box.x, scroll.offset.x);\n                    translateAxis(box.y, scroll.offset.y);\n                }\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            var _a;\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            if ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) {\n                return boxWithoutScroll;\n            }\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.wasRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget ||\n                this.root.updateBlockedByResize);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            if (!this.targetDelta && !this.relativeTarget) {\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            if (isDebug) {\n                metrics.resolvedTargetDeltas++;\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n                lead.targetWithTransforms = createBox();\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.prevProjectionDelta) {\n                    this.createProjectionDeltas();\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta || !this.prevProjectionDelta) {\n                this.createProjectionDeltas();\n            }\n            else {\n                copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);\n                copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);\n            }\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            if (this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY ||\n                !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) ||\n                !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            if (isDebug) {\n                metrics.recalculatedProjection++;\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            var _a;\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        createProjectionDeltas() {\n            this.prevProjectionDelta = createDelta();\n            this.projectionDelta = createDelta();\n            this.projectionDeltaWithTransform = createDelta();\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetSkewAndRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected skew or rotation values, we can early return without a forced render.\n            let hasDistortingTransform = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.z ||\n                latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ ||\n                latestValues.skewX ||\n                latestValues.skewY) {\n                hasDistortingTransform = true;\n            }\n            // If there's no distorting values, we don't need to do any more.\n            if (!hasDistortingTransform)\n                return;\n            const resetValues = {};\n            if (latestValues.z) {\n                resetDistortingTransform(\"z\", visualElement, resetValues, this.animationValues);\n            }\n            // Check the skew and rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                resetDistortingTransform(`rotate${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n                resetDistortingTransform(`skew${transformAxes[i]}`, visualElement, resetValues, this.animationValues);\n            }\n            // Force a render of this element to apply the transform with all skews and rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n                if (this.animationValues) {\n                    this.animationValues[key] = resetValues[key];\n                }\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    if (isDebug) {\n        metrics.totalNodes++;\n    }\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetSkewAndRotation(node) {\n    node.resetSkewAndRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mixNumber(delta.translate, 0, p);\n    output.scale = mixNumber(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mixNumber(from.min, to.min, p);\n    output.max = mixNumber(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\nfunction checkNodeWasScrollRoot(node) {\n    var _a;\n    return node !== node.root && ((_a = node.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot);\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","function shallowCompare(next, prev) {\n    if (!Array.isArray(prev))\n        return false;\n    const prevLength = prev.length;\n    if (prevLength !== next.length)\n        return false;\n    for (let i = 0; i < prevLength; i++) {\n        if (prev[i] !== next[i])\n            return false;\n    }\n    return true;\n}\n\nexport { shallowCompare };\n","import { resolveVariantFromProps } from './resolve-variants.mjs';\n\nfunction resolveVariant(visualElement, definition, custom) {\n    const props = visualElement.getProps();\n    return resolveVariantFromProps(props, definition, custom !== undefined ? custom : props.custom, visualElement);\n}\n\nexport { resolveVariant };\n","import { resolveFinalValueInKeyframes } from '../../utils/resolve-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved || {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\n\nexport { setTarget };\n","import { transformProps } from '../../render/html/utils/transform.mjs';\nimport { animateMotionValue } from './motion-value.mjs';\nimport { setTarget } from '../../render/utils/setters.mjs';\nimport { getValueTransition } from '../utils/get-value-transition.mjs';\nimport { getOptimisedAppearId } from '../optimized-appear/get-appear-id.mjs';\nimport { addValueToWillChange } from '../../value/use-will-change/add-will-change.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\n/**\n * Decide whether we should block this animation. Previously, we achieved this\n * just by checking whether the key was listed in protectedKeys, but this\n * posed problems if an animation was triggered by afterChildren and protectedKeys\n * had been set to true in the meantime.\n */\nfunction shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {\n    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;\n    needsAnimating[key] = false;\n    return shouldBlock;\n}\nfunction animateTarget(visualElement, targetAndTransition, { delay = 0, transitionOverride, type } = {}) {\n    var _a;\n    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;\n    if (transitionOverride)\n        transition = transitionOverride;\n    const animations = [];\n    const animationTypeState = type &&\n        visualElement.animationState &&\n        visualElement.animationState.getState()[type];\n    for (const key in target) {\n        const value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);\n        const valueTarget = target[key];\n        if (valueTarget === undefined ||\n            (animationTypeState &&\n                shouldBlockAnimation(animationTypeState, key))) {\n            continue;\n        }\n        const valueTransition = {\n            delay,\n            ...getValueTransition(transition || {}, key),\n        };\n        /**\n         * If this is the first time a value is being animated, check\n         * to see if we're handling off from an existing animation.\n         */\n        let isHandoff = false;\n        if (window.MotionHandoffAnimation) {\n            const appearId = getOptimisedAppearId(visualElement);\n            if (appearId) {\n                const startTime = window.MotionHandoffAnimation(appearId, key, frame);\n                if (startTime !== null) {\n                    valueTransition.startTime = startTime;\n                    isHandoff = true;\n                }\n            }\n        }\n        addValueToWillChange(visualElement, key);\n        value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && transformProps.has(key)\n            ? { type: false }\n            : valueTransition, visualElement, isHandoff));\n        const animation = value.animation;\n        if (animation) {\n            animations.push(animation);\n        }\n    }\n    if (transitionEnd) {\n        Promise.all(animations).then(() => {\n            frame.update(() => {\n                transitionEnd && setTarget(visualElement, transitionEnd);\n            });\n        });\n    }\n    return animations;\n}\n\nexport { animateTarget };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\n\nfunction animateVariant(visualElement, variant, options = {}) {\n    var _a;\n    const resolved = resolveVariant(visualElement, variant, options.type === \"exit\"\n        ? (_a = visualElement.presenceContext) === null || _a === void 0 ? void 0 : _a.custom\n        : undefined);\n    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};\n    if (options.transitionOverride) {\n        transition = options.transitionOverride;\n    }\n    /**\n     * If we have a variant, create a callback that runs it as an animation.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getAnimation = resolved\n        ? () => Promise.all(animateTarget(visualElement, resolved, options))\n        : () => Promise.resolve();\n    /**\n     * If we have children, create a callback that runs all their animations.\n     * Otherwise, we resolve a Promise immediately for a composable no-op.\n     */\n    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size\n        ? (forwardDelay = 0) => {\n            const { delayChildren = 0, staggerChildren, staggerDirection, } = transition;\n            return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);\n        }\n        : () => Promise.resolve();\n    /**\n     * If the transition explicitly defines a \"when\" option, we need to resolve either\n     * this animation or all children animations before playing the other.\n     */\n    const { when } = transition;\n    if (when) {\n        const [first, last] = when === \"beforeChildren\"\n            ? [getAnimation, getChildAnimations]\n            : [getChildAnimations, getAnimation];\n        return first().then(() => last());\n    }\n    else {\n        return Promise.all([getAnimation(), getChildAnimations(options.delay)]);\n    }\n}\nfunction animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {\n    const animations = [];\n    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;\n    const generateStaggerDuration = staggerDirection === 1\n        ? (i = 0) => i * staggerChildren\n        : (i = 0) => maxStaggerDuration - i * staggerChildren;\n    Array.from(visualElement.variantChildren)\n        .sort(sortByTreeOrder)\n        .forEach((child, i) => {\n        child.notify(\"AnimationStart\", variant);\n        animations.push(animateVariant(child, variant, {\n            ...options,\n            delay: delayChildren + generateStaggerDuration(i),\n        }).then(() => child.notify(\"AnimationComplete\", variant)));\n    });\n    return Promise.all(animations);\n}\nfunction sortByTreeOrder(a, b) {\n    return a.sortNodePosition(b);\n}\n\nexport { animateVariant, sortByTreeOrder };\n","import { resolveVariant } from '../../render/utils/resolve-dynamic-variants.mjs';\nimport { animateTarget } from './visual-element-target.mjs';\nimport { animateVariant } from './visual-element-variant.mjs';\n\nfunction animateVisualElement(visualElement, definition, options = {}) {\n    visualElement.notify(\"AnimationStart\", definition);\n    let animation;\n    if (Array.isArray(definition)) {\n        const animations = definition.map((variant) => animateVariant(visualElement, variant, options));\n        animation = Promise.all(animations);\n    }\n    else if (typeof definition === \"string\") {\n        animation = animateVariant(visualElement, definition, options);\n    }\n    else {\n        const resolvedDefinition = typeof definition === \"function\"\n            ? resolveVariant(visualElement, definition, options.custom)\n            : definition;\n        animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));\n    }\n    return animation.then(() => {\n        visualElement.notify(\"AnimationComplete\", definition);\n    });\n}\n\nexport { animateVisualElement };\n","import { isVariantLabel } from './is-variant-label.mjs';\nimport { variantProps } from './variant-props.mjs';\n\nconst numVariantProps = variantProps.length;\nfunction getVariantContext(visualElement) {\n    if (!visualElement)\n        return undefined;\n    if (!visualElement.isControllingVariants) {\n        const context = visualElement.parent\n            ? getVariantContext(visualElement.parent) || {}\n            : {};\n        if (visualElement.props.initial !== undefined) {\n            context.initial = visualElement.props.initial;\n        }\n        return context;\n    }\n    const context = {};\n    for (let i = 0; i < numVariantProps; i++) {\n        const name = variantProps[i];\n        const prop = visualElement.props[name];\n        if (isVariantLabel(prop) || prop === false) {\n            context[name] = prop;\n        }\n    }\n    return context;\n}\n\nexport { getVariantContext };\n","import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nimport { variantPriorityOrder } from './variant-props.mjs';\nimport { animateVisualElement } from '../../animation/interfaces/visual-element.mjs';\nimport { getVariantContext } from './get-variant-context.mjs';\n\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    let state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (type) => (acc, definition) => {\n        var _a;\n        const resolved = resolveVariant(visualElement, definition, type === \"exit\"\n            ? (_a = visualElement.presenceContext) === null || _a === void 0 ? void 0 : _a.custom\n            : undefined);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(changedActiveType) {\n        const { props } = visualElement;\n        const context = getVariantContext(visualElement.parent) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = props[type] !== undefined\n                ? props[type]\n                : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] &&\n                prop !== props[type] &&\n                propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            let handledRemovedValues = false;\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues(type), {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                if (removedKeys.has(key)) {\n                    handledRemovedValues = true;\n                    removedKeys.delete(key);\n                }\n                typeState.needsAnimating[key] = true;\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = false;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                let valueHasChanged = false;\n                if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                    valueHasChanged = !shallowCompare(next, prev);\n                }\n                else {\n                    valueHasChanged = next !== prev;\n                }\n                if (valueHasChanged) {\n                    if (next !== undefined && next !== null) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to skip this animation\n             * unless the inherited variants haven't changed on this render.\n             */\n            const willAnimateViaParent = isInherited && variantDidChange;\n            const needsAnimating = !willAnimateViaParent || handledRemovedValues;\n            if (shouldAnimateType && needsAnimating) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                const motionValue = visualElement.getValue(key);\n                if (motionValue)\n                    motionValue.liveStyle = true;\n                // @ts-expect-error - @mattgperry to figure if we should do something here\n                fallbackAnimation[key] = fallbackTarget !== null && fallbackTarget !== void 0 ? fallbackTarget : null;\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            (props.initial === false || props.initial === props.animate) &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n        reset: () => {\n            state = createState();\n            isInitialRender = true;\n        },\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        animate: createTypeState(true),\n        whileInView: createTypeState(),\n        whileHover: createTypeState(),\n        whileTap: createTypeState(),\n        whileDrag: createTypeState(),\n        whileFocus: createTypeState(),\n        exit: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState };\n","import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        if (isAnimationControls(animate)) {\n            this.unmountControls = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() {\n        var _a;\n        this.node.animationState.reset();\n        (_a = this.unmountControls) === null || _a === void 0 ? void 0 : _a.call(this);\n    }\n}\n\nexport { AnimationFeature };\n","import { Feature } from '../Feature.mjs';\n\nlet id = 0;\nclass ExitAnimationFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.id = id++;\n    }\n    update() {\n        if (!this.node.presenceContext)\n            return;\n        const { isPresent, onExitComplete } = this.node.presenceContext;\n        const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};\n        if (!this.node.animationState || isPresent === prevIsPresent) {\n            return;\n        }\n        const exitAnimation = this.node.animationState.setActive(\"exit\", !isPresent);\n        if (onExitComplete && !isPresent) {\n            exitAnimation.then(() => onExitComplete(this.id));\n        }\n    }\n    mount() {\n        const { register } = this.node.presenceContext || {};\n        if (register) {\n            this.unmount = register(this.id);\n        }\n    }\n    unmount() { }\n}\n\nexport { ExitAnimationFeature };\n","import { AnimationFeature } from './animation/index.mjs';\nimport { ExitAnimationFeature } from './animation/exit.mjs';\n\nconst animations = {\n    animation: {\n        Feature: AnimationFeature,\n    },\n    exit: {\n        Feature: ExitAnimationFeature,\n    },\n};\n\nexport { animations };\n","import { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction addHoverEvent(node, isActive) {\n    const eventName = isActive ? \"pointerenter\" : \"pointerleave\";\n    const callbackName = isActive ? \"onHoverStart\" : \"onHoverEnd\";\n    const handleEvent = (event, info) => {\n        if (event.pointerType === \"touch\" || isDragActive())\n            return;\n        const props = node.getProps();\n        if (node.animationState && props.whileHover) {\n            node.animationState.setActive(\"whileHover\", isActive);\n        }\n        const callback = props[callbackName];\n        if (callback) {\n            frame.postRender(() => callback(event, info));\n        }\n    };\n    return addPointerEvent(node.current, eventName, handleEvent, {\n        passive: !node.getProps()[callbackName],\n    });\n}\nclass HoverGesture extends Feature {\n    mount() {\n        this.unmount = pipe(addHoverEvent(this.node, true), addHoverEvent(this.node, false));\n    }\n    unmount() { }\n}\n\nexport { HoverGesture };\n","import { addDomEvent } from '../events/add-dom-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\n\nclass FocusGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.isActive = false;\n    }\n    onFocus() {\n        let isFocusVisible = false;\n        /**\n         * If this element doesn't match focus-visible then don't\n         * apply whileHover. But, if matches throws that focus-visible\n         * is not a valid selector then in that browser outline styles will be applied\n         * to the element by default and we want to match that behaviour with whileFocus.\n         */\n        try {\n            isFocusVisible = this.node.current.matches(\":focus-visible\");\n        }\n        catch (e) {\n            isFocusVisible = true;\n        }\n        if (!isFocusVisible || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", true);\n        this.isActive = true;\n    }\n    onBlur() {\n        if (!this.isActive || !this.node.animationState)\n            return;\n        this.node.animationState.setActive(\"whileFocus\", false);\n        this.isActive = false;\n    }\n    mount() {\n        this.unmount = pipe(addDomEvent(this.node.current, \"focus\", () => this.onFocus()), addDomEvent(this.node.current, \"blur\", () => this.onBlur()));\n    }\n    unmount() { }\n}\n\nexport { FocusGesture };\n","/**\n * Recursively traverse up the tree to check whether the provided child node\n * is the parent or a descendant of it.\n *\n * @param parent - Element to find\n * @param child - Element to test against parent\n */\nconst isNodeOrChild = (parent, child) => {\n    if (!child) {\n        return false;\n    }\n    else if (parent === child) {\n        return true;\n    }\n    else {\n        return isNodeOrChild(parent, child.parentElement);\n    }\n};\n\nexport { isNodeOrChild };\n","import { extractEventInfo } from '../events/event-info.mjs';\nimport { addDomEvent } from '../events/add-dom-event.mjs';\nimport { addPointerEvent } from '../events/add-pointer-event.mjs';\nimport { Feature } from '../motion/features/Feature.mjs';\nimport { pipe } from '../utils/pipe.mjs';\nimport { isDragActive } from './drag/utils/lock.mjs';\nimport { isNodeOrChild } from './utils/is-node-or-child.mjs';\nimport { noop } from '../utils/noop.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction fireSyntheticPointerEvent(name, handler) {\n    if (!handler)\n        return;\n    const syntheticPointerEvent = new PointerEvent(\"pointer\" + name);\n    handler(syntheticPointerEvent, extractEventInfo(syntheticPointerEvent));\n}\nclass PressGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removeStartListeners = noop;\n        this.removeEndListeners = noop;\n        this.removeAccessibleListeners = noop;\n        this.startPointerPress = (startEvent, startInfo) => {\n            if (this.isPressing)\n                return;\n            this.removeEndListeners();\n            const props = this.node.getProps();\n            const endPointerPress = (endEvent, endInfo) => {\n                if (!this.checkPressEnd())\n                    return;\n                const { onTap, onTapCancel, globalTapTarget } = this.node.getProps();\n                /**\n                 * We only count this as a tap gesture if the event.target is the same\n                 * as, or a child of, this component's element\n                 */\n                const handler = !globalTapTarget &&\n                    !isNodeOrChild(this.node.current, endEvent.target)\n                    ? onTapCancel\n                    : onTap;\n                if (handler) {\n                    frame.update(() => handler(endEvent, endInfo));\n                }\n            };\n            const removePointerUpListener = addPointerEvent(window, \"pointerup\", endPointerPress, {\n                passive: !(props.onTap || props[\"onPointerUp\"]),\n            });\n            const removePointerCancelListener = addPointerEvent(window, \"pointercancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo), {\n                passive: !(props.onTapCancel ||\n                    props[\"onPointerCancel\"]),\n            });\n            this.removeEndListeners = pipe(removePointerUpListener, removePointerCancelListener);\n            this.startPress(startEvent, startInfo);\n        };\n        this.startAccessiblePress = () => {\n            const handleKeydown = (keydownEvent) => {\n                if (keydownEvent.key !== \"Enter\" || this.isPressing)\n                    return;\n                const handleKeyup = (keyupEvent) => {\n                    if (keyupEvent.key !== \"Enter\" || !this.checkPressEnd())\n                        return;\n                    fireSyntheticPointerEvent(\"up\", (event, info) => {\n                        const { onTap } = this.node.getProps();\n                        if (onTap) {\n                            frame.postRender(() => onTap(event, info));\n                        }\n                    });\n                };\n                this.removeEndListeners();\n                this.removeEndListeners = addDomEvent(this.node.current, \"keyup\", handleKeyup);\n                fireSyntheticPointerEvent(\"down\", (event, info) => {\n                    this.startPress(event, info);\n                });\n            };\n            const removeKeydownListener = addDomEvent(this.node.current, \"keydown\", handleKeydown);\n            const handleBlur = () => {\n                if (!this.isPressing)\n                    return;\n                fireSyntheticPointerEvent(\"cancel\", (cancelEvent, cancelInfo) => this.cancelPress(cancelEvent, cancelInfo));\n            };\n            const removeBlurListener = addDomEvent(this.node.current, \"blur\", handleBlur);\n            this.removeAccessibleListeners = pipe(removeKeydownListener, removeBlurListener);\n        };\n    }\n    startPress(event, info) {\n        this.isPressing = true;\n        const { onTapStart, whileTap } = this.node.getProps();\n        /**\n         * Ensure we trigger animations before firing event callback\n         */\n        if (whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", true);\n        }\n        if (onTapStart) {\n            frame.postRender(() => onTapStart(event, info));\n        }\n    }\n    checkPressEnd() {\n        this.removeEndListeners();\n        this.isPressing = false;\n        const props = this.node.getProps();\n        if (props.whileTap && this.node.animationState) {\n            this.node.animationState.setActive(\"whileTap\", false);\n        }\n        return !isDragActive();\n    }\n    cancelPress(event, info) {\n        if (!this.checkPressEnd())\n            return;\n        const { onTapCancel } = this.node.getProps();\n        if (onTapCancel) {\n            frame.postRender(() => onTapCancel(event, info));\n        }\n    }\n    mount() {\n        const props = this.node.getProps();\n        const removePointerListener = addPointerEvent(props.globalTapTarget ? window : this.node.current, \"pointerdown\", this.startPointerPress, {\n            passive: !(props.onTapStart ||\n                props[\"onPointerStart\"]),\n        });\n        const removeFocusListener = addDomEvent(this.node.current, \"focus\", this.startAccessiblePress);\n        this.removeStartListeners = pipe(removePointerListener, removeFocusListener);\n    }\n    unmount() {\n        this.removeStartListeners();\n        this.removeEndListeners();\n        this.removeAccessibleListeners();\n    }\n}\n\nexport { PressGesture };\n","/**\n * Map an IntersectionHandler callback to an element. We only ever make one handler for one\n * element, so even though these handlers might all be triggered by different\n * observers, we can keep them in the same map.\n */\nconst observerCallbacks = new WeakMap();\n/**\n * Multiple observers can be created for multiple element/document roots. Each with\n * different settings. So here we store dictionaries of observers to each root,\n * using serialised settings (threshold/margin) as lookup keys.\n */\nconst observers = new WeakMap();\nconst fireObserverCallback = (entry) => {\n    const callback = observerCallbacks.get(entry.target);\n    callback && callback(entry);\n};\nconst fireAllObserverCallbacks = (entries) => {\n    entries.forEach(fireObserverCallback);\n};\nfunction initIntersectionObserver({ root, ...options }) {\n    const lookupRoot = root || document;\n    /**\n     * If we don't have an observer lookup map for this root, create one.\n     */\n    if (!observers.has(lookupRoot)) {\n        observers.set(lookupRoot, {});\n    }\n    const rootObservers = observers.get(lookupRoot);\n    const key = JSON.stringify(options);\n    /**\n     * If we don't have an observer for this combination of root and settings,\n     * create one.\n     */\n    if (!rootObservers[key]) {\n        rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });\n    }\n    return rootObservers[key];\n}\nfunction observeIntersection(element, options, callback) {\n    const rootInteresectionObserver = initIntersectionObserver(options);\n    observerCallbacks.set(element, callback);\n    rootInteresectionObserver.observe(element);\n    return () => {\n        observerCallbacks.delete(element);\n        rootInteresectionObserver.unobserve(element);\n    };\n}\n\nexport { observeIntersection };\n","import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n","import { HoverGesture } from '../../gestures/hover.mjs';\nimport { FocusGesture } from '../../gestures/focus.mjs';\nimport { PressGesture } from '../../gestures/press.mjs';\nimport { InViewFeature } from './viewport/index.mjs';\n\nconst gestureAnimations = {\n    inView: {\n        Feature: InViewFeature,\n    },\n    tap: {\n        Feature: PressGesture,\n    },\n    focus: {\n        Feature: FocusGesture,\n    },\n    hover: {\n        Feature: HoverGesture,\n    },\n};\n\nexport { gestureAnimations };\n","// Does this device prefer reduced motion? Returns `null` server-side.\nconst prefersReducedMotion = { current: null };\nconst hasReducedMotionListener = { current: false };\n\nexport { hasReducedMotionListener, prefersReducedMotion };\n","import { isBrowser } from '../is-browser.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from './state.mjs';\n\nfunction initPrefersReducedMotion() {\n    hasReducedMotionListener.current = true;\n    if (!isBrowser)\n        return;\n    if (window.matchMedia) {\n        const motionMediaQuery = window.matchMedia(\"(prefers-reduced-motion)\");\n        const setReducedMotionPreferences = () => (prefersReducedMotion.current = motionMediaQuery.matches);\n        motionMediaQuery.addListener(setReducedMotionPreferences);\n        setReducedMotionPreferences();\n    }\n    else {\n        prefersReducedMotion.current = false;\n    }\n}\n\nexport { initPrefersReducedMotion };\n","import { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"11.11.1\", `Attempting to mix Framer Motion versions ${nextValue.version} with 11.11.1 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue, { owner: element }));\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                if (existingValue.liveStyle === true) {\n                    existingValue.jump(nextValue);\n                }\n                else if (!existingValue.hasAnimated) {\n                    existingValue.set(nextValue);\n                }\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue, { owner: element }));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n","const visualElementStore = new WeakMap();\n\nexport { visualElementStore };\n","import { color } from '../../../value/types/color/index.mjs';\nimport { complex } from '../../../value/types/complex/index.mjs';\nimport { dimensionValueTypes } from './dimensions.mjs';\nimport { testValueType } from './test.mjs';\n\n/**\n * A list of all ValueTypes\n */\nconst valueTypes = [...dimensionValueTypes, color, complex];\n/**\n * Tests a value against the list of ValueTypes\n */\nconst findValueType = (v) => valueTypes.find(testValueType(v));\n\nexport { findValueType };\n","import { initPrefersReducedMotion } from '../utils/reduced-motion/index.mjs';\nimport { hasReducedMotionListener, prefersReducedMotion } from '../utils/reduced-motion/state.mjs';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\nimport { motionValue } from '../value/index.mjs';\nimport { isMotionValue } from '../value/utils/is-motion-value.mjs';\nimport { transformProps } from './html/utils/transform.mjs';\nimport { isControllingVariants, isVariantNode } from './utils/is-controlling-variants.mjs';\nimport { updateMotionValuesFromProps } from './utils/motion-values.mjs';\nimport { resolveVariantFromProps } from './utils/resolve-variants.mjs';\nimport { warnOnce } from '../utils/warn-once.mjs';\nimport { featureDefinitions } from '../motion/features/definitions.mjs';\nimport { visualElementStore } from './store.mjs';\nimport { KeyframeResolver } from './utils/KeyframesResolver.mjs';\nimport { isNumericalString } from '../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../utils/is-zero-value-string.mjs';\nimport { findValueType } from './dom/value-types/find.mjs';\nimport { complex } from '../value/types/complex/index.mjs';\nimport { getAnimatableNone } from './dom/value-types/animatable-none.mjs';\nimport { createBox } from '../projection/geometry/models.mjs';\nimport { time } from '../frameloop/sync-time.mjs';\nimport { frame, cancelFrame } from '../frameloop/frame.mjs';\n\nconst propEventHandlers = [\n    \"AnimationStart\",\n    \"AnimationComplete\",\n    \"Update\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutMeasure\",\n    \"LayoutAnimationStart\",\n    \"LayoutAnimationComplete\",\n];\n/**\n * A VisualElement is an imperative abstraction around UI elements such as\n * HTMLElement, SVGElement, Three.Object3D etc.\n */\nclass VisualElement {\n    /**\n     * This method takes React props and returns found MotionValues. For example, HTML\n     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.\n     *\n     * This isn't an abstract method as it needs calling in the constructor, but it is\n     * intended to be one.\n     */\n    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {\n        return {};\n    }\n    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState, }, options = {}) {\n        /**\n         * If true, will-change will be applied to the element. Only HTMLVisualElements\n         * currently support this.\n         */\n        this.applyWillChange = false;\n        /**\n         * A reference to the current underlying Instance, e.g. a HTMLElement\n         * or Three.Mesh etc.\n         */\n        this.current = null;\n        /**\n         * A set containing references to this VisualElement's children.\n         */\n        this.children = new Set();\n        /**\n         * Determine what role this visual element should take in the variant tree.\n         */\n        this.isVariantNode = false;\n        this.isControllingVariants = false;\n        /**\n         * Decides whether this VisualElement should animate in reduced motion\n         * mode.\n         *\n         * TODO: This is currently set on every individual VisualElement but feels\n         * like it could be set globally.\n         */\n        this.shouldReduceMotion = null;\n        /**\n         * A map of all motion values attached to this visual element. Motion\n         * values are source of truth for any given animated value. A motion\n         * value might be provided externally by the component via props.\n         */\n        this.values = new Map();\n        this.KeyframeResolver = KeyframeResolver;\n        /**\n         * Cleanup functions for active features (hover/tap/exit etc)\n         */\n        this.features = {};\n        /**\n         * A map of every subscription that binds the provided or generated\n         * motion values onChange listeners to this visual element.\n         */\n        this.valueSubscriptions = new Map();\n        /**\n         * A reference to the previously-provided motion values as returned\n         * from scrapeMotionValuesFromProps. We use the keys in here to determine\n         * if any motion values need to be removed after props are updated.\n         */\n        this.prevMotionValues = {};\n        /**\n         * An object containing a SubscriptionManager for each active event.\n         */\n        this.events = {};\n        /**\n         * An object containing an unsubscribe function for each prop event subscription.\n         * For example, every \"Update\" event can have multiple subscribers via\n         * VisualElement.on(), but only one of those can be defined via the onUpdate prop.\n         */\n        this.propEventSubscriptions = {};\n        this.notifyUpdate = () => this.notify(\"Update\", this.latestValues);\n        this.render = () => {\n            if (!this.current)\n                return;\n            this.triggerBuild();\n            this.renderInstance(this.current, this.renderState, this.props.style, this.projection);\n        };\n        this.renderScheduledAt = 0.0;\n        this.scheduleRender = () => {\n            const now = time.now();\n            if (this.renderScheduledAt < now) {\n                this.renderScheduledAt = now;\n                frame.render(this.render, false, true);\n            }\n        };\n        const { latestValues, renderState } = visualState;\n        this.latestValues = latestValues;\n        this.baseTarget = { ...latestValues };\n        this.initialValues = props.initial ? { ...latestValues } : {};\n        this.renderState = renderState;\n        this.parent = parent;\n        this.props = props;\n        this.presenceContext = presenceContext;\n        this.depth = parent ? parent.depth + 1 : 0;\n        this.reducedMotionConfig = reducedMotionConfig;\n        this.options = options;\n        this.blockInitialAnimation = Boolean(blockInitialAnimation);\n        this.isControllingVariants = isControllingVariants(props);\n        this.isVariantNode = isVariantNode(props);\n        if (this.isVariantNode) {\n            this.variantChildren = new Set();\n        }\n        this.manuallyAnimateOnMount = Boolean(parent && parent.current);\n        /**\n         * Any motion values that are provided to the element when created\n         * aren't yet bound to the element, as this would technically be impure.\n         * However, we iterate through the motion values and set them to the\n         * initial values for this component.\n         *\n         * TODO: This is impure and we should look at changing this to run on mount.\n         * Doing so will break some tests but this isn't necessarily a breaking change,\n         * more a reflection of the test.\n         */\n        const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);\n        for (const key in initialMotionValues) {\n            const value = initialMotionValues[key];\n            if (latestValues[key] !== undefined && isMotionValue(value)) {\n                value.set(latestValues[key], false);\n            }\n        }\n    }\n    mount(instance) {\n        this.current = instance;\n        visualElementStore.set(instance, this);\n        if (this.projection && !this.projection.instance) {\n            this.projection.mount(instance);\n        }\n        if (this.parent && this.isVariantNode && !this.isControllingVariants) {\n            this.removeFromVariantTree = this.parent.addVariantChild(this);\n        }\n        this.values.forEach((value, key) => this.bindToMotionValue(key, value));\n        if (!hasReducedMotionListener.current) {\n            initPrefersReducedMotion();\n        }\n        this.shouldReduceMotion =\n            this.reducedMotionConfig === \"never\"\n                ? false\n                : this.reducedMotionConfig === \"always\"\n                    ? true\n                    : prefersReducedMotion.current;\n        if (process.env.NODE_ENV !== \"production\") {\n            warnOnce(this.shouldReduceMotion !== true, \"You have Reduced Motion enabled on your device. Animations may not appear as expected.\");\n        }\n        if (this.parent)\n            this.parent.children.add(this);\n        this.update(this.props, this.presenceContext);\n    }\n    unmount() {\n        visualElementStore.delete(this.current);\n        this.projection && this.projection.unmount();\n        cancelFrame(this.notifyUpdate);\n        cancelFrame(this.render);\n        this.valueSubscriptions.forEach((remove) => remove());\n        this.valueSubscriptions.clear();\n        this.removeFromVariantTree && this.removeFromVariantTree();\n        this.parent && this.parent.children.delete(this);\n        for (const key in this.events) {\n            this.events[key].clear();\n        }\n        for (const key in this.features) {\n            const feature = this.features[key];\n            if (feature) {\n                feature.unmount();\n                feature.isMounted = false;\n            }\n        }\n        this.current = null;\n    }\n    bindToMotionValue(key, value) {\n        if (this.valueSubscriptions.has(key)) {\n            this.valueSubscriptions.get(key)();\n        }\n        const valueIsTransform = transformProps.has(key);\n        const removeOnChange = value.on(\"change\", (latestValue) => {\n            this.latestValues[key] = latestValue;\n            this.props.onUpdate && frame.preRender(this.notifyUpdate);\n            if (valueIsTransform && this.projection) {\n                this.projection.isTransformDirty = true;\n            }\n        });\n        const removeOnRenderRequest = value.on(\"renderRequest\", this.scheduleRender);\n        let removeSyncCheck;\n        if (window.MotionCheckAppearSync) {\n            removeSyncCheck = window.MotionCheckAppearSync(this, key, value);\n        }\n        this.valueSubscriptions.set(key, () => {\n            removeOnChange();\n            removeOnRenderRequest();\n            if (removeSyncCheck)\n                removeSyncCheck();\n            if (value.owner)\n                value.stop();\n        });\n    }\n    sortNodePosition(other) {\n        /**\n         * If these nodes aren't even of the same type we can't compare their depth.\n         */\n        if (!this.current ||\n            !this.sortInstanceNodePosition ||\n            this.type !== other.type) {\n            return 0;\n        }\n        return this.sortInstanceNodePosition(this.current, other.current);\n    }\n    updateFeatures() {\n        let key = \"animation\";\n        for (key in featureDefinitions) {\n            const featureDefinition = featureDefinitions[key];\n            if (!featureDefinition)\n                continue;\n            const { isEnabled, Feature: FeatureConstructor } = featureDefinition;\n            /**\n             * If this feature is enabled but not active, make a new instance.\n             */\n            if (!this.features[key] &&\n                FeatureConstructor &&\n                isEnabled(this.props)) {\n                this.features[key] = new FeatureConstructor(this);\n            }\n            /**\n             * If we have a feature, mount or update it.\n             */\n            if (this.features[key]) {\n                const feature = this.features[key];\n                if (feature.isMounted) {\n                    feature.update();\n                }\n                else {\n                    feature.mount();\n                    feature.isMounted = true;\n                }\n            }\n        }\n    }\n    triggerBuild() {\n        this.build(this.renderState, this.latestValues, this.props);\n    }\n    /**\n     * Measure the current viewport box with or without transforms.\n     * Only measures axis-aligned boxes, rotate and skew must be manually\n     * removed with a re-render to work.\n     */\n    measureViewportBox() {\n        return this.current\n            ? this.measureInstanceViewportBox(this.current, this.props)\n            : createBox();\n    }\n    getStaticValue(key) {\n        return this.latestValues[key];\n    }\n    setStaticValue(key, value) {\n        this.latestValues[key] = value;\n    }\n    /**\n     * Update the provided props. Ensure any newly-added motion values are\n     * added to our map, old ones removed, and listeners updated.\n     */\n    update(props, presenceContext) {\n        if (props.transformTemplate || this.props.transformTemplate) {\n            this.scheduleRender();\n        }\n        this.prevProps = this.props;\n        this.props = props;\n        this.prevPresenceContext = this.presenceContext;\n        this.presenceContext = presenceContext;\n        /**\n         * Update prop event handlers ie onAnimationStart, onAnimationComplete\n         */\n        for (let i = 0; i < propEventHandlers.length; i++) {\n            const key = propEventHandlers[i];\n            if (this.propEventSubscriptions[key]) {\n                this.propEventSubscriptions[key]();\n                delete this.propEventSubscriptions[key];\n            }\n            const listenerName = (\"on\" + key);\n            const listener = props[listenerName];\n            if (listener) {\n                this.propEventSubscriptions[key] = this.on(key, listener);\n            }\n        }\n        this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);\n        if (this.handleChildMotionValue) {\n            this.handleChildMotionValue();\n        }\n    }\n    getProps() {\n        return this.props;\n    }\n    /**\n     * Returns the variant definition with a given name.\n     */\n    getVariant(name) {\n        return this.props.variants ? this.props.variants[name] : undefined;\n    }\n    /**\n     * Returns the defined default transition on this component.\n     */\n    getDefaultTransition() {\n        return this.props.transition;\n    }\n    getTransformPagePoint() {\n        return this.props.transformPagePoint;\n    }\n    getClosestVariantNode() {\n        return this.isVariantNode\n            ? this\n            : this.parent\n                ? this.parent.getClosestVariantNode()\n                : undefined;\n    }\n    /**\n     * Add a child visual element to our set of children.\n     */\n    addVariantChild(child) {\n        const closestVariantNode = this.getClosestVariantNode();\n        if (closestVariantNode) {\n            closestVariantNode.variantChildren &&\n                closestVariantNode.variantChildren.add(child);\n            return () => closestVariantNode.variantChildren.delete(child);\n        }\n    }\n    /**\n     * Add a motion value and bind it to this visual element.\n     */\n    addValue(key, value) {\n        // Remove existing value if it exists\n        const existingValue = this.values.get(key);\n        if (value !== existingValue) {\n            if (existingValue)\n                this.removeValue(key);\n            this.bindToMotionValue(key, value);\n            this.values.set(key, value);\n            this.latestValues[key] = value.get();\n        }\n    }\n    /**\n     * Remove a motion value and unbind any active subscriptions.\n     */\n    removeValue(key) {\n        this.values.delete(key);\n        const unsubscribe = this.valueSubscriptions.get(key);\n        if (unsubscribe) {\n            unsubscribe();\n            this.valueSubscriptions.delete(key);\n        }\n        delete this.latestValues[key];\n        this.removeValueFromRenderState(key, this.renderState);\n    }\n    /**\n     * Check whether we have a motion value for this key\n     */\n    hasValue(key) {\n        return this.values.has(key);\n    }\n    getValue(key, defaultValue) {\n        if (this.props.values && this.props.values[key]) {\n            return this.props.values[key];\n        }\n        let value = this.values.get(key);\n        if (value === undefined && defaultValue !== undefined) {\n            value = motionValue(defaultValue === null ? undefined : defaultValue, { owner: this });\n            this.addValue(key, value);\n        }\n        return value;\n    }\n    /**\n     * If we're trying to animate to a previously unencountered value,\n     * we need to check for it in our state and as a last resort read it\n     * directly from the instance (which might have performance implications).\n     */\n    readValue(key, target) {\n        var _a;\n        let value = this.latestValues[key] !== undefined || !this.current\n            ? this.latestValues[key]\n            : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);\n        if (value !== undefined && value !== null) {\n            if (typeof value === \"string\" &&\n                (isNumericalString(value) || isZeroValueString(value))) {\n                // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n                value = parseFloat(value);\n            }\n            else if (!findValueType(value) && complex.test(target)) {\n                value = getAnimatableNone(key, target);\n            }\n            this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);\n        }\n        return isMotionValue(value) ? value.get() : value;\n    }\n    /**\n     * Set the base target to later animate back to. This is currently\n     * only hydrated on creation and when we first read a value.\n     */\n    setBaseTarget(key, value) {\n        this.baseTarget[key] = value;\n    }\n    /**\n     * Find the base target for a value thats been removed from all animation\n     * props.\n     */\n    getBaseTarget(key) {\n        var _a;\n        const { initial } = this.props;\n        let valueFromInitial;\n        if (typeof initial === \"string\" || typeof initial === \"object\") {\n            const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);\n            if (variant) {\n                valueFromInitial = variant[key];\n            }\n        }\n        /**\n         * If this value still exists in the current initial variant, read that.\n         */\n        if (initial && valueFromInitial !== undefined) {\n            return valueFromInitial;\n        }\n        /**\n         * Alternatively, if this VisualElement config has defined a getBaseTarget\n         * so we can read the value from an alternative source, try that.\n         */\n        const target = this.getBaseTargetFromProps(this.props, key);\n        if (target !== undefined && !isMotionValue(target))\n            return target;\n        /**\n         * If the value was initially defined on initial, but it doesn't any more,\n         * return undefined. Otherwise return the value as initially read from the DOM.\n         */\n        return this.initialValues[key] !== undefined &&\n            valueFromInitial === undefined\n            ? undefined\n            : this.baseTarget[key];\n    }\n    on(eventName, callback) {\n        if (!this.events[eventName]) {\n            this.events[eventName] = new SubscriptionManager();\n        }\n        return this.events[eventName].add(callback);\n    }\n    notify(eventName, ...args) {\n        if (this.events[eventName]) {\n            this.events[eventName].notify(...args);\n        }\n    }\n}\n\nexport { VisualElement };\n","import { VisualElement } from '../VisualElement.mjs';\nimport { DOMKeyframesResolver } from './DOMKeyframesResolver.mjs';\n\nclass DOMVisualElement extends VisualElement {\n    constructor() {\n        super(...arguments);\n        this.KeyframeResolver = DOMKeyframesResolver;\n    }\n    sortInstanceNodePosition(a, b) {\n        /**\n         * compareDocumentPosition returns a bitmask, by using the bitwise &\n         * we're returning true if 2 in that bitmask is set to true. 2 is set\n         * to true if b preceeds a.\n         */\n        return a.compareDocumentPosition(b) & 2 ? 1 : -1;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props.style\n            ? props.style[key]\n            : undefined;\n    }\n    removeValueFromRenderState(key, { vars, style }) {\n        delete vars[key];\n        delete style[key];\n    }\n}\n\nexport { DOMVisualElement };\n","import { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { isCSSVariableName } from '../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './utils/transform.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { renderHTML } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { measureViewportBox } from '../../projection/utils/measure.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction getComputedStyle(element) {\n    return window.getComputedStyle(element);\n}\nclass HTMLVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"html\";\n        this.applyWillChange = true;\n        this.renderInstance = renderHTML;\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        else {\n            const computedStyle = getComputedStyle(instance);\n            const value = (isCSSVariableName(key)\n                ? computedStyle.getPropertyValue(key)\n                : computedStyle[key]) || 0;\n            return typeof value === \"string\" ? value.trim() : value;\n        }\n    }\n    measureInstanceViewportBox(instance, { transformPagePoint }) {\n        return measureViewportBox(instance, transformPagePoint);\n    }\n    build(renderState, latestValues, props) {\n        buildHTMLStyles(renderState, latestValues, props.transformTemplate);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n    handleChildMotionValue() {\n        if (this.childSubscription) {\n            this.childSubscription();\n            delete this.childSubscription;\n        }\n        const { children } = this.props;\n        if (isMotionValue(children)) {\n            this.childSubscription = children.on(\"change\", (latest) => {\n                if (this.current)\n                    this.current.textContent = `${latest}`;\n            });\n        }\n    }\n}\n\nexport { HTMLVisualElement, getComputedStyle };\n","import { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { DOMVisualElement } from '../dom/DOMVisualElement.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { camelToDash } from '../dom/utils/camel-to-dash.mjs';\nimport { camelCaseAttributes } from './utils/camel-case-attrs.mjs';\nimport { transformProps } from '../html/utils/transform.mjs';\nimport { renderSVG } from './utils/render.mjs';\nimport { getDefaultValueType } from '../dom/value-types/defaults.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nclass SVGVisualElement extends DOMVisualElement {\n    constructor() {\n        super(...arguments);\n        this.type = \"svg\";\n        this.isSVGTag = false;\n        this.measureInstanceViewportBox = createBox;\n    }\n    getBaseTargetFromProps(props, key) {\n        return props[key];\n    }\n    readValueFromInstance(instance, key) {\n        if (transformProps.has(key)) {\n            const defaultType = getDefaultValueType(key);\n            return defaultType ? defaultType.default || 0 : 0;\n        }\n        key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;\n        return instance.getAttribute(key);\n    }\n    scrapeMotionValuesFromProps(props, prevProps, visualElement) {\n        return scrapeMotionValuesFromProps(props, prevProps, visualElement);\n    }\n    build(renderState, latestValues, props) {\n        buildSVGAttrs(renderState, latestValues, this.isSVGTag, props.transformTemplate);\n    }\n    renderInstance(instance, renderState, styleProp, projection) {\n        renderSVG(instance, renderState, styleProp, projection);\n    }\n    mount(instance) {\n        this.isSVGTag = isSVGTag(instance.tagName);\n        super.mount(instance);\n    }\n}\n\nexport { SVGVisualElement };\n","import { Fragment } from 'react';\nimport { HTMLVisualElement } from '../html/HTMLVisualElement.mjs';\nimport { SVGVisualElement } from '../svg/SVGVisualElement.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\n\nconst createDomVisualElement = (Component, options) => {\n    return isSVGComponent(Component)\n        ? new SVGVisualElement(options)\n        : new HTMLVisualElement(options, {\n            allowProjection: Component !== Fragment,\n        });\n};\n\nexport { createDomVisualElement };\n","import { animations } from '../../motion/features/animations.mjs';\nimport { gestureAnimations } from '../../motion/features/gestures.mjs';\nimport { createDomVisualElement } from './create-visual-element.mjs';\n\n/**\n * @public\n */\nconst domAnimation = {\n    renderer: createDomVisualElement,\n    ...animations,\n    ...gestureAnimations,\n};\n\nexport { domAnimation };\n","import { drag } from '../../motion/features/drag.mjs';\nimport { layout } from '../../motion/features/layout.mjs';\nimport { domAnimation } from './features-animation.mjs';\n\n/**\n * @public\n */\nconst domMax = {\n    ...domAnimation,\n    ...drag,\n    ...layout,\n};\n\nexport { domMax };\n"],"names":["Feature","constructor","node","isMounted","update","isPrimaryPointer","event","pointerType","button","isPrimary","extractEventInfo","pointType","point","x","y","addPointerInfo","handler","time_conversion_secondsToMilliseconds","seconds","millisecondsToSeconds","milliseconds","addDomEvent","target","eventName","options","passive","addEventListener","removeEventListener","addPointerEvent","distance","a","b","Math","abs","PanSession","handlers","transformPagePoint","contextWindow","dragSnapToOrigin","startEvent","lastMoveEvent","lastMoveEventInfo","window","updatePoint","info","getPanInfo","history","isPanStarted","isDistancePastThreshold","distance2D","offset","sqrt","xDelta","yDelta","timestamp","frameloop_frame","frameData","push","onStart","onMove","handlePointerMove","transformPoint","Wi","handlePointerUp","end","onEnd","onSessionEnd","resumeAnimation","panInfo","type","initialInfo","onSessionStart","removeListeners","pipe","z","updateHandlers","Pn","subtractPoint","delta","lastDevicePoint","velocity","getVelocity","timeDelta","length","i","timestampedPoint","lastPoint","time","currentVelocity","Infinity","createLock","name","lock","globalHorizontalLock","globalVerticalLock","getGlobalLock","drag","openHorizontal","openVertical","isDragActive","openGestureLock","calcLength","axis","max","min","calcAxisDelta","source","origin","originPoint","number","t","scale","translate","isNaN","calcBoxDelta","originX","undefined","originY","calcRelativeAxis","relative","parent","calcRelativeAxisPosition","layout","calcRelativePosition","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","createAxisDelta","createDelta","createAxis","createBox","eachAxis","callback","convertBoundingBoxToBox","top","left","right","bottom","isIdentityScale","hasScale","scaleX","scaleY","hasTransform","values","has2DTranslate","rotate","rotateX","rotateY","skewX","skewY","value","is2DTranslate","applyPointDelta","boxScale","applyAxisDelta","applyBoxDelta","box","translateAxis","transformAxis","axisTranslate","axisScale","axisOrigin","transformBox","transform","measureViewportBox","instance","transformBoxPoints","topLeft","bottomRight","getBoundingClientRect","underDampedSpring","stiffness","damping","restSpeed","criticallyDampedSpring","keyframesTransition","duration","ease","getDefaultTransition","valueKey","keyframes","G","has","startsWith","getValueTransition","transition","key","instantAnimationState","current","isNotNull","getFinalKeyframe","repeat","repeatType","finalKeyframe","resolvedKeyframes","filter","index","calcBezier","a1","a2","cubicBezier","mX1","mY1","mX2","mY2","noop","Z","getTForX","binarySubdivide","lowerBound","upperBound","currentX","currentT","aX","mirrorEasing","p","easing","reverseEasing","backOut","backIn","backInOut","anticipate","pow","circIn","sin","acos","circOut","circInOut","isZeroValueString","test","v","isNumericalString","splitCSSVariableRegex","positionalKeys","Set","isNumOrPxType","numbers","Rx","units","px","getPosFromMatrix","matrix","pos","parseFloat","split","getTranslateFromMatrix","pos2","pos3","_bbox","matrix3d","match","transformKeys","nonTranslationalTransformKeys","_","positionalValues","width","paddingLeft","paddingRight","height","paddingTop","paddingBottom","translateX","translateY","testValueType","dimensionValueTypes","aQ","RW","vw","vh","parse","findDimensionValueType","find","toResolve","isScheduled","anyNeedsMeasurement","measureAllKeyframes","resolversToMeasure","Array","from","resolver","needsMeasurement","elementsToMeasure","map","element","transformsToRestore","Map","forEach","removedTransforms","removeNonTranslationalTransform","visualElement","getValue","get","set","render","measureInitialState","restore","_a","measureEndState","suspendedScrollY","scrollTo","complete","clear","readAllKeyframes","readKeyframes","KeyframeResolver","unresolvedKeyframes","onComplete","motionValue","isAsync","isComplete","scheduleResolve","add","read","resolveKeyframes","currentValue","valueAsRead","readValue","setFinalKeyframe","renderEndStyles","delete","cancel","resume","maxDefaults","applyDefaultFilter","slice","float_regex","K","unit","replace","defaultValue","functionRegex","complex","P","getAnimatableNone","functions","join","defaultValueTypes","value_types_number","j","color","$","backgroundColor","outlineColor","fill","stroke","borderColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","WebkitFilter","getDefaultValueType","defaultValueType","invalidTemplates","DOMKeyframesResolver","keyframe","trim","is_css_variable","resolved","getVariableValue","depth","errors","k","token","fallback","parseCSSVariable","exec","token1","token2","getComputedStyle","getPropertyValue","trimmed","resolveNoneKeyframes","originType","targetType","noneKeyframeIndexes","makeNoneKeyframesAnimatable","animatableTemplate","V","noneIndex","pageYOffset","measuredOrigin","measureKeyframe","jump","finalKeyframeIndex","unsetTransformName","unsetTransformValue","isGenerator","isAnimatable","isArray","BaseAnimation","autoplay","delay","repeatDelay","isStopped","hasAttemptedResolve","createdAt","sync_time","X","now","updateFinishedPromise","calcStartTime","resolvedAt","_resolved","onKeyframesResolved","onUpdate","canAnimate","originKeyframe","targetKeyframe","isOriginAnimatable","isTargetAnimatable","hasKeyframesChanged","resolveFinishedPromise","resolvedAnimation","initPlayback","onPostResolved","then","resolve","reject","currentFinishedPromise","Promise","calcGeneratorVelocity","resolveValue","prevT","velocity_per_second","R","calcAngularFreq","undampedFreq","dampingRatio","durationKeys","physicsKeys","isSpringType","keys","some","spring","restDelta","resolveSpring","state","done","mass","isResolvedFromDuration","getSpringOptions","springOptions","derived","findSpring","bounce","envelope","derivative","clamp","u","exponentialDecay","safeMin","exp","e","g","d","approximateRoot","initialGuess","result","initialVelocity","initialDelta","undampedAngularFreq","isGranularScale","angularFreq","cos","dampedAngularFreq","freqForT","sinh","cosh","calculatedDuration","next","isBelowVelocityThreshold","isBelowDisplacementThreshold","inertia","power","timeConstant","bounceDamping","bounceStiffness","modifyTarget","timeReachedBoundary","spring$1","isOutOfBounds","nearestBoundary","amplitude","ideal","calcDelta","calcLatest","applyFriction","latest","checkCatchBoundary","hasUpdatedFrame","easeIn","easeOut","easeInOut","isEasingArray","easingLookup","linear","easingDefinitionToFunction","definition","x1","y1","x2","y2","keyframeValues","times","easingFunctions","absoluteTimes","offsets_default","Y","o","mapTimeToKeyframe","interpolate","s","splice","frameloopDriver","passTimestamp","start","stop","isProcessing","generators","decay","tween","percentToProgress","percent","MainThreadAnimation","holdTime","cancelTime","currentTime","playbackSpeed","pendingPlayState","startTime","teardown","onStop","KeyframeResolver$1","keyframes$1","mapPercentToKeyframes","mirroredGenerator","generatorFactory","mix","C","generator","reverse","calcGeneratorDuration","resolvedDuration","totalDuration","play","pause","tick","sample","speed","round","timeWithoutDelay","isInDelayPhase","elapsed","frameGenerator","progress","currentIteration","floor","iterationProgress","isAnimationFinished","finish","newTime","driver","newSpeed","hasChanged","onPlay","stopDriver","isBezierDefinition","generateLinearEasing","points","numPoints","substring","supportsFlags","linearEasing","supportsLinearEasing","memoSupports","supportsFlag","memoized","memo","document","createElement","animate","opacity","cubicBezierAsString","c","supportedWaapiEasing","attachTimeline","animation","timeline","onfinish","supportsWaapi","Object","hasOwnProperty","call","Element","prototype","unsupportedEasingFunctions","AcceleratedAnimation","owner","isWaapiSupportedEasing","Boolean","every","pregeneratedAnimation","pregenerateKeyframes","sampleAnimation","pregeneratedKeyframes","startWaapiAnimation","valueName","keyframeOptions","mapEasingToNativeEasing","segmentEasing","iterations","direction","pendingTimeline","playbackRate","playState","sampleTime","setWithVelocity","supports","accelerated_values","HTMLElement","getProps","GroupPlaybackControls","animations","runAll","onResolve","onReject","all","catch","getAll","propName","setAll","newValue","subscriptions","methodName","controls","animateMotionValue","isHandoff","valueTransition","isTransitionDefined","when","_delay","delayChildren","staggerChildren","staggerDirection","shouldSkip","GlobalConfig","skipAnimations","getContextWindow","ownerDocument","defaultView","addValueToWillChange","applyWillChange","willChange","is_motion_value","props","style","get_will_change_name","setStaticValue","elementDragControls","WeakMap","VisualElementDragControls","openGlobalLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","originEvent","snapToCursor","presenceContext","isPresent","panSession","pauseAnimation","stopAnimation","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","getAxisMotionValue","measuredAxis","layoutBox","postRender","animationState","setActive","dragDirectionLock","onDirectionLock","onDrag","getCurrentDirection","lockThreshold","updateAxis","getAnimationState","getTransformPagePoint","startAnimation","onDragEnd","_point","shouldDrag","axisValue","applyConstraints","dragConstraints","measure","prevConstraints","is_ref_object","I","resolveRefConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","relativeConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","measurePageBox","rootProjectionNode","viewportBox","scroll","root","measuredConstraints","userConstraints","convertBoxToBoundingBox","dragMomentum","dragTransition","onDragTransitionEnd","startAxisValueAnimation","dragKey","toUpperCase","externalMotionValue","initial","scalePositionWithinConstraints","boxProgress","calcOrigin","sourceLength","targetLength","transformTemplate","updateScroll","updateLayout","addListeners","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","DragGesture","removeGroupControls","mount","dragControls","subscribe","unmount","asyncHandler","PanGesture","arguments","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","pixelsToPercent","pixels","correctBorderRadius","correct","MeasureLayoutWithContext","react","Component","componentDidMount","layoutGroup","switchLayoutGroup","layoutId","scale_correction","B","defaultScaleCorrectors","group","register","didUpdate","safeToRemove","setOptions","onExitComplete","getSnapshotBeforeUpdate","prevProps","layoutDependency","willUpdate","promote","relegate","stack","getStack","members","componentDidUpdate","microtask","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","remove","deregister","MeasureLayout","usePresence","context","useContext","context_PresenceContext","O","id","useId","useEffect","useCallback","LayoutGroupContext","jsx_runtime","jsx","SwitchLayoutGroupContext","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","treeScale","projectionDelta","shadow","template","createTransformer","xScale","yScale","averageScale","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","easeCrossfadeOut","copyAxisInto","originAxis","copyBoxInto","originBox","copyAxisDeltaInto","originDelta","removePointDelta","removeAxisTransforms","transforms","scaleKey","originKey","sourceAxis","removeAxisDelta","relativeProgress","xKeys","yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","axisEquals","axisEqualsRounded","boxEqualsRounded","aspectRatio","axisDeltaEquals","NodeStack","array","y4","scheduleRender","cl","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","latestValues","animationValues","isUpdating","isLayoutDirty","crossfade","hide","exitAnimationComplete","resumingFrom","removeLeadSnapshot","compareByDepth","FlatTree","children","isDirty","child","sort","getOptimisedAppearId","data_id","M","metrics","totalNodes","resolvedTargetDeltas","recalculatedProjection","isDebug","MotionDebug","transformAxes","hiddenVisibility","visibility","resetDistortingTransform","sharedAnimationValues","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","animationId","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","hasCheckedOptimisedAppear","eventHandlers","hasTreeAnimated","updateScheduled","scheduleUpdate","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","record","resolvedRelativeTargetAt","hasProjected","isVisible","animationProgress","sharedNodes","path","subscription_manager","L","notifyListeners","args","subscriptionManager","notify","hasListeners","SVGElement","tagName","cancelDelay","resizeUnblockUpdate","timeout","checkElapsed","finishAnimation","registerSharedNode","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","setAnimationOrigin","animationOptions","shouldReduceMotion","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetSkewAndRotation","getTransformTemplate","shouldNotifyListeners","MotionCancelOptimisedAnimation","cancelTreeOptimisedTransformAnimations","projectionNode","appearId","MotionHasOptimisedAnimation","prevTransformTemplateValue","updateSnapshot","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","notifyLayoutUpdate","yL","process","preRender","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","alwaysMeasureLayout","prevLayout","layoutCorrected","phase","layoutScroll","isRoot","wasRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","removeElementScroll","roundAxis","measuredBox","checkNodeWasScrollRoot","boxWithoutScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","setTargetDelta","targetDelta","forceRelativeParentToResolveTarget","relativeParent","forceRecalculation","getLead","isShared","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","canSkip","pendingAnimation","prevTreeScaleX","prevTreeScaleY","applyTreeDeltas","treePath","isSharedTransition","treeLength","display","prevProjectionDelta","createProjectionDeltas","notifyAll","projectionDeltaWithTransform","prevRelativeTarget","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","snapshotSource","isOnlyMember","shouldCrossfadeOpacity","hasOpacityCrossfade","mixTargetDelta","mixAxisDelta","output","mixAxis","to","mixValues","follow","opacityExit","borderLabel","followRadius","leadRadius","animateSingleValue","motionValue$1","es_value","BX","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","yLength","config","initialPromotionConfig","shouldPreserveFollowOpacity","getPrevLead","hasDistortingTransform","rotateZ","resetValues","getProjectionStyles","styleProp","_b","styles","pointerEvents","resolve_motion_value","emptyStyles","valuesToRender","buildProjectionTransform","latestTransform","xTranslate","yTranslate","zTranslate","transformPerspective","elementScaleX","elementScaleY","transformOrigin","corrected","num","resetTree","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","userAgentContains","navigator","userAgent","toLowerCase","includes","string","roundPoint","DocumentProjectionNode","ref","documentElement","scrollLeft","body","scrollTop","HTMLProjectionNode","documentNode","position","shallowCompare","prev","prevLength","resolveVariant","custom","resolve_variants","animateTarget","targetAndTransition","transitionOverride","transitionEnd","animationTypeState","getState","valueTarget","shouldBlockAnimation","protectedKeys","needsAnimating","shouldBlock","MotionHandoffAnimation","setTarget","resolve_value","hasValue","addValue","animateVariant","variant","getAnimation","getChildAnimations","variantChildren","size","forwardDelay","animateChildren","maxStaggerDuration","generateStaggerDuration","sortByTreeOrder","first","last","sortNodePosition","numVariantProps","variant_props","reversePriorityOrder","numAnimationTypes","createTypeState","isActive","prevResolvedValues","createState","whileInView","whileHover","whileTap","whileDrag","whileFocus","exit","AnimationFeature","createAnimationState","animateVisualElement","resolvedDefinition","isInitialRender","buildResolvedTypeValues","acc","animateChanges","changedActiveType","getVariantContext","isControllingVariants","prop","is_variant_label","removedKeys","encounteredKeys","removedVariantIndex","typeState","propIsVariant","activeDelta","isInherited","manuallyAnimateOnMount","prevProp","is_animation_controls","H","variantDidChange","shouldAnimateType","handledRemovedValues","definitionList","resolvedValues","reduce","allKeys","markToAnimate","liveStyle","is_keyframes_target","blockInitialAnimation","fallbackAnimation","fallbackTarget","getBaseTarget","shouldAnimate","setAnimateFunction","makeAnimator","reset","updateAnimationControlsSubscription","unmountControls","prevAnimate","exit_id","ExitAnimationFeature","prevIsPresent","prevPresenceContext","exitAnimation","addHoverEvent","callbackName","HoverGesture","FocusGesture","onFocus","isFocusVisible","matches","onBlur","isNodeOrChild","parentElement","fireSyntheticPointerEvent","syntheticPointerEvent","PointerEvent","PressGesture","removeStartListeners","removeEndListeners","removeAccessibleListeners","startPointerPress","startInfo","isPressing","removePointerUpListener","endEvent","endInfo","checkPressEnd","onTap","onTapCancel","globalTapTarget","removePointerCancelListener","cancelEvent","cancelInfo","cancelPress","startPress","startAccessiblePress","removeKeydownListener","keydownEvent","keyupEvent","removeBlurListener","onTapStart","removePointerListener","removeFocusListener","observerCallbacks","observers","fireObserverCallback","entry","fireAllObserverCallbacks","entries","thresholdNames","InViewFeature","hasEnteredView","isInView","startObserver","viewport","margin","rootMargin","amount","once","threshold","observeIntersection","rootInteresectionObserver","initIntersectionObserver","lookupRoot","rootObservers","JSON","stringify","IntersectionObserver","observe","unobserve","isIntersecting","onViewportEnter","onViewportLeave","hasViewportOptionChanged","prevViewport","prefersReducedMotion","hasReducedMotionListener","visualElementStore","valueTypes","findValueType","propEventHandlers","VisualElement","scrapeMotionValuesFromProps","_props","_prevProps","_visualElement","reducedMotionConfig","visualState","isVariantNode","features","valueSubscriptions","prevMotionValues","events","propEventSubscriptions","notifyUpdate","triggerBuild","renderInstance","renderState","renderScheduledAt","baseTarget","initialValues","is_controlling_variants","initialMotionValues","removeFromVariantTree","addVariantChild","bindToMotionValue","initPrefersReducedMotion","is_browser","matchMedia","motionMediaQuery","setReducedMotionPreferences","addListener","feature","removeSyncCheck","valueIsTransform","removeOnChange","on","latestValue","removeOnRenderRequest","MotionCheckAppearSync","other","sortInstanceNodePosition","updateFeatures","definitions","featureDefinitions","featureDefinition","isEnabled","FeatureConstructor","build","measureInstanceViewportBox","getStaticValue","listener","updateMotionValuesFromProps","nextValue","prevValue","existingValue","hasAnimated","removeValue","handleChildMotionValue","getVariant","variants","getClosestVariantNode","closestVariantNode","unsubscribe","removeValueFromRenderState","getBaseTargetFromProps","readValueFromInstance","setBaseTarget","valueFromInitial","DOMVisualElement","compareDocumentPosition","vars","HTMLVisualElement","N","defaultType","default","computedStyle","f","build_styles","r","scrape_motion_values","U","childSubscription","textContent","SVGVisualElement","isSVGTag","camel_to_dash","D","getAttribute","utils_scrape_motion_values","build_attrs","utils_render","is_svg_tag","domMax","renderer","is_svg_component","q","allowProjection","Fragment","inView","tap","focus","hover","pan","ProjectionNode"],"sourceRoot":""}