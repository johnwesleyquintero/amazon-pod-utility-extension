{"version":3,"file":"static/chunks/pages/integrations-110cbe3bde06338f.js","mappings":"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","sources":["webpack://_N_E/?2199","webpack://_N_E/./src/hooks/useInvalidateCachedData.ts","webpack://_N_E/./src/utils/RequestProxy.ts","webpack://_N_E/./src/components/integrations/IntegrationCard.tsx","webpack://_N_E/./src/components/integrations/google/GoogleDriveConnectButton.tsx","webpack://_N_E/./src/components/integrations/google/GoogleDriveCard.tsx","webpack://_N_E/./src/components/integrations/Integrations.tsx","webpack://_N_E/./src/pages/integrations/index.tsx","webpack://_N_E/../../packages/riptech/shared-ui/src/pages/email-verification.tsx","webpack://_N_E/../../packages/riptech/shared-ui/src/pages/index.ts","webpack://_N_E/../../packages/riptech/shared-ui/src/utils/DataGridUtils.ts","webpack://_N_E/../../packages/riptech/shared-ui/src/utils/InfiniteQueryUtils.ts","webpack://_N_E/../../packages/riptech/shared-ui/src/utils/NotificationUtils.ts","webpack://_N_E/../../packages/riptech/shared-ui/src/utils/StringUtils.ts","webpack://_N_E/../../packages/riptech/shared-ui/src/utils/index.ts","webpack://_N_E/../../packages/riptech/shared-ui/src/index.ts","webpack://_N_E/ignored|/Users/jakeleventhal/Developer/rip-technologies/node_modules/.pnpm/postcss@8.4.47/node_modules/postcss/lib|./terminal-highlight","webpack://_N_E/ignored|/Users/jakeleventhal/Developer/rip-technologies/node_modules/.pnpm/postcss@8.4.47/node_modules/postcss/lib|fs","webpack://_N_E/ignored|/Users/jakeleventhal/Developer/rip-technologies/node_modules/.pnpm/postcss@8.4.47/node_modules/postcss/lib|path","webpack://_N_E/ignored|/Users/jakeleventhal/Developer/rip-technologies/node_modules/.pnpm/postcss@8.4.47/node_modules/postcss/lib|source-map-js"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/integrations\",\n      function () {\n        return require(\"private-next-pages/integrations/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/integrations\"])\n      });\n    }\n  ","import { useQueryClient } from '@tanstack/react-query';\n\nimport RequestProxy from '../utils/RequestProxy';\n\nexport default function useInvalidateCachedData(queryKey: string) {\n  const queryClient = useQueryClient();\n\n  const invalidate = async () => {\n    await Promise.all([\n      queryClient.invalidateQueries({\n        queryKey: [queryKey]\n      }),\n      RequestProxy.sendInvalidateUserDataCache(queryKey)\n    ]);\n  };\n\n  return invalidate;\n}\n","import type { ApiError } from '@riptech/utils/src/errors/ErrorResponse';\nimport { ErrorResponse } from '@riptech/utils/src/errors/ErrorResponse';\nimport type { SellerCentralMarketplace } from '@seller-utilities/database';\nimport type { SalesAndTrafficReportResponse } from '@seller-utilities/types';\n\nimport type { FetchUserDataResponse } from '../pages/api/account/fetch-user-data';\nimport type { AmazonAppConfigUserInfo } from './AdvChartUtils';\nimport type { AmazonDateRange } from './request/InlinePageRequest/AdvRequest';\n\nexport type RequestProxyType = 'fetchUserData' | 'fetchSalesAndTrafficReport' | 'invalidateUserDataCache' | 'getData';\n\nexport interface RequestProxyMessage {\n  type: RequestProxyType;\n}\n\ntype ProxyPayload<T> =\n  | {\n      type: 'error';\n      payload: {\n        message: string;\n        statusCode: ApiError;\n      };\n    }\n  | { type: 'success'; payload: T };\n\nexport interface FetchUserDataMessage extends RequestProxyMessage {\n  url: string;\n}\nexport interface FetchSalesAndTrafficReportMessage extends RequestProxyMessage {\n  amazonDateRange: AmazonDateRange;\n  amazonAppConfigUserInfo?: AmazonAppConfigUserInfo;\n  marketplace: SellerCentralMarketplace;\n}\n\nexport interface InvalidateUserDataCacheMessage extends RequestProxyMessage {\n  url: string;\n}\n\nexport const FETCH_USER_DATA_QUERY_KEY = 'fetchUserData';\n\nexport default class RequestProxy {\n  static readonly USER_DATA_URL = `${process.env.NEXT_PUBLIC_CLIENT_URL}/api/account/fetch-user-data`;\n\n  static handleError<T>(value: Promise<ProxyPayload<T>>) {\n    return value.then((data: ProxyPayload<T>) => {\n      if (data.type === 'error') {\n        throw new ErrorResponse(data.payload.statusCode, {\n          message: data.payload.message\n        });\n      }\n      return data.payload;\n    });\n  }\n\n  static fetchUserData = () =>\n    RequestProxy.handleError<FetchUserDataResponse>(\n      chrome.runtime.sendMessage<FetchUserDataMessage, ProxyPayload<FetchUserDataResponse>>(\n        process.env.NEXT_PUBLIC_EXTENSION_ID,\n        {\n          type: 'fetchUserData',\n          url: RequestProxy.USER_DATA_URL\n        }\n      )\n    );\n\n  static fetchSalesAndTrafficReport = (\n    marketplace: SellerCentralMarketplace,\n    amazonDateRange: AmazonDateRange,\n    amazonAppConfigUserInfo?: AmazonAppConfigUserInfo\n  ) =>\n    RequestProxy.handleError<SalesAndTrafficReportResponse>(\n      chrome.runtime.sendMessage<FetchSalesAndTrafficReportMessage, ProxyPayload<SalesAndTrafficReportResponse>>(\n        process.env.NEXT_PUBLIC_EXTENSION_ID,\n        {\n          amazonAppConfigUserInfo,\n          amazonDateRange,\n          marketplace,\n          type: 'fetchSalesAndTrafficReport'\n        }\n      )\n    );\n\n  static sendInvalidateUserDataCache = async (queryKey: string): Promise<void> => {\n    let url: string | undefined;\n    switch (queryKey) {\n      case FETCH_USER_DATA_QUERY_KEY: {\n        url = RequestProxy.USER_DATA_URL;\n        break;\n      }\n      default:\n        break;\n    }\n    if (url) {\n      await chrome.runtime.sendMessage<InvalidateUserDataCacheMessage, undefined>(\n        process.env.NEXT_PUBLIC_EXTENSION_ID,\n        {\n          type: 'invalidateUserDataCache',\n          url\n        }\n      );\n    }\n  };\n}\n","import { Avatar, Box, Card, CardContent, Stack, Typography } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport { Iconify } from '@riptech/minimal-ui/src/components/iconify';\nimport type { FC } from 'react';\n\n/**\n * Represents the type of data stored for integration in local storage.\n * We have to use local storage to pass data between the extension\n * and the window popup that is opened for the OAuth flow.\n */\nexport interface IntegrationLocalStorageType {\n  // `redirect` indicates whether we should redirect the user to the integrations page\n  // when we return from the OAuth flow and reload the extension\n  redirect: boolean;\n  source: 'GoogleDrive';\n}\ninterface IntegrationCardProps {\n  readonly icon: string;\n  readonly name: string;\n  readonly description: string;\n  readonly ActionButton: FC;\n}\nconst IntegrationCard: FC<IntegrationCardProps> = ({\n  ActionButton,\n  description,\n  icon,\n  name\n}) => {\n  const theme = useTheme();\n  return <Card sx={{\n    maxWidth: 300,\n    width: '100%'\n  }} data-sentry-element=\"Card\" data-sentry-component=\"IntegrationCard\" data-sentry-source-file=\"IntegrationCard.tsx\">\n      <CardContent data-sentry-element=\"CardContent\" data-sentry-source-file=\"IntegrationCard.tsx\">\n        <Stack alignItems=\"center\" margin=\"max-content\" spacing={1} data-sentry-element=\"Stack\" data-sentry-source-file=\"IntegrationCard.tsx\">\n          <Avatar sx={{\n          height: 75,\n          width: 75\n        }} data-sentry-element=\"Avatar\" data-sentry-source-file=\"IntegrationCard.tsx\">\n            <Iconify icon={icon} width={50} data-sentry-element=\"Iconify\" data-sentry-source-file=\"IntegrationCard.tsx\" />\n          </Avatar>\n          <Typography variant=\"h6\" data-sentry-element=\"Typography\" data-sentry-source-file=\"IntegrationCard.tsx\">{name}</Typography>\n        </Stack>\n        <Typography color=\"text.secondary\" variant=\"body2\" data-sentry-element=\"Typography\" data-sentry-source-file=\"IntegrationCard.tsx\">\n          {description}\n        </Typography>\n        <Box mt={theme.spacing(2)} data-sentry-element=\"Box\" data-sentry-source-file=\"IntegrationCard.tsx\">\n          <ActionButton data-sentry-element=\"ActionButton\" data-sentry-source-file=\"IntegrationCard.tsx\" />\n        </Box>\n      </CardContent>\n    </Card>;\n};\nexport default IntegrationCard;","import { useTheme } from '@mui/material';\nimport { enqueueSnackbar } from '@riptech/minimal-ui/src/components/snackbar';\nimport { BackdropLoader, useConfirmationDialog } from '@riptech/shared-ui';\nimport Utils from '@riptech/utils';\nimport { useMutation } from '@tanstack/react-query';\nimport { getSession } from 'next-auth/react';\nimport { useEffect, useState } from 'react';\nimport GoogleButton from 'react-google-button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useInvalidateCachedData from '../../../hooks/useInvalidateCachedData';\nimport UserActions from '../../../redux/actions/userActions';\nimport UserSelectors from '../../../redux/selectors/userSelectors';\nimport ServerlessAPI from '../../../utils/api/serverless/ServerlessAPI';\nimport { INTEGRATION_LOCAL_STORAGE_REDIRECT_KEY } from '../../../utils/constants';\nimport { FETCH_USER_DATA_QUERY_KEY } from '../../../utils/RequestProxy';\nimport type { IntegrationLocalStorageType } from '../IntegrationCard';\nconst GoogleDriveConnectButton = () => {\n  const theme = useTheme();\n  const dispatch = useDispatch();\n  const {\n    openDialog\n  } = useConfirmationDialog();\n  const invalidateUserSettings = useInvalidateCachedData(FETCH_USER_DATA_QUERY_KEY);\n  const [windowPopup, setWindowPopup] = useState<Window | null>();\n  const disconnectMutation = useMutation({\n    meta: {\n      errorMessage: 'An error occurred while disconnecting from Google Drive'\n    },\n    mutationFn: ServerlessAPI.disconnectGoogleDrive,\n    onSuccess: () => {\n      invalidateUserSettings();\n      dispatch(UserActions.setGoogleDriveConnection(null));\n      enqueueSnackbar('Successfully disconnected from Google Drive');\n    }\n  });\n  const googleDriveConnection = useSelector(UserSelectors.googleDriveConnectionSelector);\n  const buttonText = googleDriveConnection ? 'Disconnect from Google' : 'Connect to Google';\n  useEffect(() => {\n    const check = async () => {\n      while (windowPopup) {\n        try {\n          if (windowPopup.closed) {\n            const session = await getSession();\n            if (session) {\n              if (process.env.NEXT_PUBLIC_IS_CHROME_EXTENSION_UI) {\n                // Set path directly to reload extension from index.html page\n                window.location.pathname = '/index.html';\n              } else {\n                window.location.reload();\n              }\n            }\n            setWindowPopup(null);\n            return;\n          }\n        } catch (e) {\n          // Cross-origin error\n          // We can't read `window.closed` if origin is different (while on the Google auth page).\n          // eslint-disable-next-line no-console\n          console.error(e);\n        }\n        await Utils.sleep(1000);\n      }\n    };\n    check();\n  }, [dispatch, windowPopup]);\n  return <>\n      <BackdropLoader open={disconnectMutation.isPending} data-sentry-element=\"BackdropLoader\" data-sentry-source-file=\"GoogleDriveConnectButton.tsx\" />\n      <GoogleButton disabled={disconnectMutation.isPending} label={buttonText} onClick={async () => {\n      if (googleDriveConnection) {\n        openDialog({\n          onApprove: disconnectMutation.mutate,\n          text: 'Are you sure you want to disconnect from Google Drive?'\n        });\n      } else {\n        const integrationRequestRedirectData: IntegrationLocalStorageType = {\n          redirect: true,\n          source: 'GoogleDrive'\n        };\n        localStorage.setItem(INTEGRATION_LOCAL_STORAGE_REDIRECT_KEY, JSON.stringify(integrationRequestRedirectData));\n        setWindowPopup(window.open(`${process.env.NEXT_PUBLIC_CLIENT_URL}/api/integrations/google-drive/auth`, '_blank', 'popup=1'));\n      }\n    }} style={{\n      color: theme.palette.info.contrastText,\n      width: '100%'\n    }} data-sentry-element=\"GoogleButton\" data-sentry-source-file=\"GoogleDriveConnectButton.tsx\" />\n    </>;\n};\nexport default GoogleDriveConnectButton;","import { enqueueSnackbar } from '@riptech/minimal-ui/src/components/snackbar';\nimport type { FC } from 'react';\nimport { useSelector } from 'react-redux';\nimport UserSelectors from '../../../redux/selectors/userSelectors';\nimport { INTEGRATION_LOCAL_STORAGE_REDIRECT_KEY } from '../../../utils/constants';\nimport type { IntegrationLocalStorageType } from '../IntegrationCard';\nimport IntegrationCard from '../IntegrationCard';\nimport GoogleDriveConnectButton from './GoogleDriveConnectButton';\nconst getRedirectKey = () => {\n  if (typeof window === 'undefined') {\n    return {};\n  }\n  return JSON.parse(localStorage.getItem(INTEGRATION_LOCAL_STORAGE_REDIRECT_KEY) ?? '{}');\n};\nconst GoogleDriveCard: FC = () => {\n  const googleDriveConnection = useSelector(UserSelectors.googleDriveConnectionSelector);\n  const {\n    source,\n    redirect\n  }: IntegrationLocalStorageType = getRedirectKey();\n  if (!redirect && source === 'GoogleDrive') {\n    if (!googleDriveConnection) {\n      enqueueSnackbar('Failed to connect to Google Drive', {\n        variant: 'error'\n      });\n    } else {\n      enqueueSnackbar('Successfully connected to Google Drive');\n    }\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem(INTEGRATION_LOCAL_STORAGE_REDIRECT_KEY);\n    }\n  }\n  return <IntegrationCard ActionButton={GoogleDriveConnectButton} description=\"Connect a Google Drive account so that data downloaded via the extension can be automatically imported into a sheet or folder of your choice.\" icon=\"logos:google-drive\" name=\"Google Drive\" data-sentry-element=\"IntegrationCard\" data-sentry-component=\"GoogleDriveCard\" data-sentry-source-file=\"GoogleDriveCard.tsx\" />;\n};\nexport default GoogleDriveCard;","import { Box } from '@mui/material';\nimport { useRouter } from 'next/router';\nimport type { FC } from 'react';\nimport { useEffect } from 'react';\nimport { GOOGLE_INTEGRATION_ERROR } from '../../utils/constants';\nimport GoogleDriveCard from './google/GoogleDriveCard';\nconst Integrations: FC = () => {\n  const router = useRouter();\n  useEffect(() => {\n    if (router.query.error === GOOGLE_INTEGRATION_ERROR) {\n      // This means the user denied access to an integration from the window popup\n      if (typeof window !== 'undefined') {\n        window.close(); // We just close the window\n      }\n    }\n  }, [router]);\n  return <Box display=\"flex\" justifyContent=\"center\" margin=\"auto\" data-sentry-element=\"Box\" data-sentry-component=\"Integrations\" data-sentry-source-file=\"Integrations.tsx\">\n      <GoogleDriveCard data-sentry-element=\"GoogleDriveCard\" data-sentry-source-file=\"Integrations.tsx\" />\n    </Box>;\n};\nexport default Integrations;","import { useAppContext } from '@riptech/shared-ui/src/hooks/useAppContext';\nimport Head from 'next/head';\nimport Integrations from '../../components/integrations/Integrations';\nimport type { ComponentWithLayout } from '../../hooks/useLayout';\nconst IntegrationsPage: ComponentWithLayout = () => {\n  const {\n    appName\n  } = useAppContext();\n  return <>\n      <Head data-sentry-element=\"Head\" data-sentry-source-file=\"index.tsx\">\n        <title>{`Integrations | ${appName}`}</title>\n      </Head>\n      <Integrations data-sentry-element=\"Integrations\" data-sentry-source-file=\"index.tsx\" />\n    </>;\n};\nexport default IntegrationsPage;","import { LoadingButton } from '@mui/lab';\nimport { Button, Grid, Link, Stack, Typography } from '@mui/material';\nimport { enqueueSnackbar } from '@riptech/minimal-ui/src/components/snackbar';\nimport type { FC } from 'react';\nimport React, { useCallback, useState } from 'react';\nimport { useAppContext } from '../hooks/useAppContext';\ninterface EmailVerificationPageProps {\n  readonly logout: () => Promise<void>;\n  readonly resendVerificationEmail: () => Promise<void>;\n}\nconst EmailVerificationPage: FC<EmailVerificationPageProps> = ({\n  resendVerificationEmail,\n  logout\n}) => {\n  const {\n    appEmail,\n    appName\n  } = useAppContext();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const sendVerificationEmail = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      // Resend verification email\n      await resendVerificationEmail();\n      enqueueSnackbar('A verification email was sent to your email address. Please check your inbox.', {\n        variant: 'success'\n      });\n    } catch (err) {\n      enqueueSnackbar('An error occurred while resending verification email', {\n        variant: 'error'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  }, [resendVerificationEmail]);\n  return <Grid container justifyContent=\"center\" spacing={4} data-sentry-element=\"Grid\" data-sentry-component=\"EmailVerificationPage\" data-sentry-source-file=\"email-verification.tsx\">\n      <Grid item xs={12} data-sentry-element=\"Grid\" data-sentry-source-file=\"email-verification.tsx\">\n        <Typography variant=\"h4\" data-sentry-element=\"Typography\" data-sentry-source-file=\"email-verification.tsx\">Email Verification Required</Typography>\n      </Grid>\n\n      <Grid item xs={12} data-sentry-element=\"Grid\" data-sentry-source-file=\"email-verification.tsx\">\n        <Typography color=\"text.secondary\" variant=\"body1\" data-sentry-element=\"Typography\" data-sentry-source-file=\"email-verification.tsx\">\n          Before you can use {appName}, you must verify your email. If you do not see the email, please check your spam\n          folder or request a new email verification request by clicking the button below.\n        </Typography>\n      </Grid>\n\n      <Grid item xs={12} data-sentry-element=\"Grid\" data-sentry-source-file=\"email-verification.tsx\">\n        <Typography color=\"text.secondary\" variant=\"body1\" data-sentry-element=\"Typography\" data-sentry-source-file=\"email-verification.tsx\">\n          For further assistance, please contact <Link href={`mailto:${appEmail}`} data-sentry-element=\"Link\" data-sentry-source-file=\"email-verification.tsx\">support</Link>.\n        </Typography>\n      </Grid>\n\n      <Grid item xs={12} data-sentry-element=\"Grid\" data-sentry-source-file=\"email-verification.tsx\">\n        <Stack alignItems=\"center\" direction={{\n        sm: 'row',\n        xs: 'column'\n      }} spacing={1} data-sentry-element=\"Stack\" data-sentry-source-file=\"email-verification.tsx\">\n          <Button color=\"inherit\" fullWidth onClick={logout} variant=\"outlined\" data-sentry-element=\"Button\" data-sentry-source-file=\"email-verification.tsx\">\n            Logout\n          </Button>\n          <LoadingButton color=\"inherit\" fullWidth loading={isLoading} onClick={sendVerificationEmail} variant=\"contained\" data-sentry-element=\"LoadingButton\" data-sentry-source-file=\"email-verification.tsx\">\n            Resend Verification\n          </LoadingButton>\n        </Stack>\n      </Grid>\n    </Grid>;\n};\nexport default EmailVerificationPage;","// eslint-disable-next-line import/prefer-default-export\nexport { default as EmailVerificationPage } from './email-verification';\n","import {\n  getGridDateOperators,\n  getGridNumericOperators,\n  getGridStringOperators,\n  type GridFilterItem,\n  type GridFilterModel,\n  GridLogicOperator,\n  type GridSortModel\n} from '@mui/x-data-grid-pro';\nimport type { SQL, SQLWrapper } from 'drizzle-orm';\nimport { and, asc, desc, eq, gt, gte, ilike, inArray, lt, lte, not, notIlike, or, sql } from 'drizzle-orm';\nimport type { PgTableWithColumns, TableConfig } from 'drizzle-orm/pg-core';\nimport moment from 'moment-timezone';\n\nexport default class DataGridUtils {\n  static createDrizzleFilter<T extends TableConfig>(\n    table: PgTableWithColumns<T>,\n    { items, logicOperator = GridLogicOperator.And }: GridFilterModel\n  ): SQL | undefined {\n    const drizzleFilters: Array<SQLWrapper> = [];\n\n    items\n      .filter(({ value }) => value !== undefined)\n      .forEach((filter) => {\n        const { field, operator, value } = filter;\n        if (!table[field]) {\n          return;\n        }\n\n        switch (operator) {\n          // String filters\n          case 'contains':\n            drizzleFilters.push(ilike(table[field], `%${value}%`));\n            break;\n          case 'doesNotContain':\n            drizzleFilters.push(notIlike(table[field], `%${value}%`));\n            break;\n          case 'startsWith':\n            drizzleFilters.push(ilike(table[field], `${value}%`));\n            break;\n          case 'endsWith':\n            drizzleFilters.push(ilike(table[field], `%${value}`));\n            break;\n          case 'equals':\n            drizzleFilters.push(ilike(table[field], value));\n            break;\n          // Select filters\n          case 'is':\n            drizzleFilters.push(eq(table[field], value));\n            break;\n          case 'not':\n            drizzleFilters.push(not(eq(table[field], value)));\n            break;\n          case 'isAnyOf':\n            if (value.length) {\n              drizzleFilters.push(inArray(table[field], value));\n            }\n            break;\n          // Date filters\n          case 'after':\n            drizzleFilters.push(gt(table[field], moment(value).endOf('day').toISOString()));\n            break;\n          case 'onOrAfter':\n            drizzleFilters.push(gte(table[field], moment(value).endOf('day').toISOString()));\n            break;\n          case 'before':\n            drizzleFilters.push(lt(table[field], moment(value).startOf('day').toISOString()));\n            break;\n          case 'onOrBefore':\n            drizzleFilters.push(lte(table[field], moment(value).startOf('day').toISOString()));\n            break;\n          // Number filters\n          case '=':\n            drizzleFilters.push(eq(table[field], Number.isFinite(+value) ? +value : undefined));\n            break;\n          case '!=':\n            drizzleFilters.push(not(eq(table[field], Number.isFinite(+value) ? +value : undefined)));\n            break;\n          case '>':\n            drizzleFilters.push(gt(table[field], Number.isFinite(+value) ? +value : undefined));\n            break;\n          case '>=':\n            drizzleFilters.push(gte(table[field], Number.isFinite(+value) ? +value : undefined));\n            break;\n          case '<':\n            drizzleFilters.push(lt(table[field], Number.isFinite(+value) ? +value : undefined));\n            break;\n          case '<=':\n            drizzleFilters.push(lte(table[field], Number.isFinite(+value) ? +value : undefined));\n            break;\n          // Add more cases for other operators if needed\n          default:\n            // Unknown operator\n            break;\n        }\n      });\n\n    if (!drizzleFilters.length) {\n      return undefined;\n    }\n\n    return logicOperator === GridLogicOperator.And ? and(...drizzleFilters) : or(...drizzleFilters);\n  }\n\n  static createDrizzleSort<T extends TableConfig>(table: PgTableWithColumns<T>, sortModel: GridSortModel) {\n    return sortModel\n      .filter(({ sort }) => sort)\n      .map(({ field, sort }) => {\n        const sortValue = table[field].columnType === 'string' ? sql`lower(${table[field]})` : table[field];\n        if (sort === 'asc') {\n          return asc(sortValue);\n        }\n\n        return desc(sortValue);\n      });\n  }\n\n  static createCustomSingleSelectFilter<T extends string = string>(\n    filters: Array<GridFilterItem>,\n    logicOperator: GridLogicOperator,\n    options: Array<T>,\n    getSingleFilterValue: (item: T) => SQLWrapper\n  ) {\n    if (!filters.length) {\n      return undefined;\n    }\n\n    const operationResults: Array<SQLWrapper | undefined> = [];\n    filters.forEach((filter) => {\n      if (filter.value) {\n        switch (filter.operator) {\n          case 'is':\n            operationResults.push(getSingleFilterValue(filter.value));\n            break;\n          case 'not':\n            operationResults.push(\n              or(...options.filter((status) => status !== filter.value).map((value) => getSingleFilterValue(value)))\n            );\n            break;\n          case 'isAnyOf':\n            operationResults.push(or(...(filter.value || []).map((status: T) => getSingleFilterValue(status))));\n            break;\n          default:\n        }\n      }\n    });\n\n    return logicOperator === GridLogicOperator.And ? and(...operationResults) : or(...operationResults);\n  }\n\n  static STRING_FILTERS = getGridStringOperators().filter((operator) =>\n    ['contains', 'doesNotContain', 'startsWith', 'endsWith', 'equals'].includes(operator.value)\n  );\n\n  static NUMBER_FILTERS = getGridNumericOperators().filter((operator) =>\n    ['=', '!=', '>', '>=', '<', '<='].includes(operator.value)\n  );\n\n  static DATE_FILTERS = getGridDateOperators().filter((operator) =>\n    ['after', 'onOrAfter', 'before', 'onOrBefore'].includes(operator.value)\n  );\n}\n","import _ from 'lodash';\n\nexport default class InfiniteQueryUtils {\n  static getArrayInfiniteQueryParams<T extends { length: number }>(lastPage: T, allPages: Array<T>) {\n    if (!lastPage.length) {\n      return null;\n    }\n    return _.sumBy(allPages, (page) => page.length);\n  }\n}\n","import type { Action, Dispatch } from '@reduxjs/toolkit';\nimport { enqueueSnackbar } from '@riptech/minimal-ui/src/components/snackbar';\n\nexport default class NotificationUtils {\n  static dismissNotification = async <T extends { id: string }>(\n    reduxNotifications: Array<T>,\n    notificationId: string,\n    dispatch: Dispatch,\n    setNotifications: (newNotifications: Array<T>) => Action,\n    dismissNotification: (notification: T) => Promise<Record<string, never>>,\n    closeNotificationDrawer: () => void\n  ) => {\n    try {\n      await dismissNotification({ id: notificationId } as T);\n\n      const newNotifications = reduxNotifications.filter((n) => n.id !== notificationId);\n      dispatch(setNotifications(newNotifications));\n\n      if (!newNotifications.length) {\n        closeNotificationDrawer();\n      }\n    } catch (err) {\n      // Show an error snackbar\n      enqueueSnackbar('An error occurred while dismissing notification', { variant: 'error' });\n    }\n  };\n}\n","import sanitize from 'sanitize-html';\n\nexport default class StringUtils {\n  static replaceHtmlCharacterCodes = (charCodeIncludedString: string): string =>\n    document.createTextNode(sanitize(charCodeIncludedString)).data;\n}\n","export { default as DataGridUtils } from './DataGridUtils';\nexport { default as InfiniteQueryUtils } from './InfiniteQueryUtils';\nexport { default as NotificationUtils } from './NotificationUtils';\nexport { default as StringUtils } from './StringUtils';\n","// @ts-fix-composite-build-import\nimport type {} from '@riptech/minimal-ui/src/theme/core';\n\nexport * from './components';\nexport * from './hooks';\nexport * from './pages';\nexport * from './utils';\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"names":["window","__NEXT_P","push","__webpack_require__","useInvalidateCachedData","queryKey","queryClient","useQueryClient","Promise","all","invalidateQueries","RequestProxy","sendInvalidateUserDataCache","FETCH_USER_DATA_QUERY_KEY","handleError","value","then","data","type","ErrorResponse","payload","statusCode","message","USER_DATA_URL","concat","process","fetchUserData","chrome","runtime","sendMessage","url","fetchSalesAndTrafficReport","marketplace","amazonDateRange","amazonAppConfigUserInfo","integrations_IntegrationCard","ActionButton","description","icon","name","param","theme","useTheme","jsx_runtime","jsx","Card","sx","maxWidth","width","data-sentry-element","data-sentry-component","data-sentry-source-file","jsxs","CardContent","Stack","alignItems","margin","spacing","Avatar","height","Iconify","Typography","variant","color","Box","mt","google_GoogleDriveConnectButton","dispatch","useDispatch","openDialog","useConfirmationDialog","invalidateUserSettings","windowPopup","setWindowPopup","useState","disconnectMutation","useMutation","meta","errorMessage","mutationFn","ServerlessAPI","disconnectGoogleDrive","onSuccess","UserActions","setGoogleDriveConnection","enqueueSnackbar","googleDriveConnection","useSelector","UserSelectors","googleDriveConnectionSelector","useEffect","check","closed","getSession","location","pathname","e","console","error","Utils","sleep","Fragment","BackdropLoader","open","isPending","GoogleButton","disabled","label","onClick","onApprove","mutate","text","localStorage","setItem","INTEGRATION_LOCAL_STORAGE_REDIRECT_KEY","JSON","stringify","redirect","source","style","palette","info","contrastText","getRedirectKey","parse","getItem","google_GoogleDriveCard","removeItem","IntegrationCard","GoogleDriveConnectButton","integrations_Integrations","router","useRouter","query","GOOGLE_INTEGRATION_ERROR","close","display","justifyContent","GoogleDriveCard","integrations","appName","useAppContext","Head","title","Integrations","DataGridUtils","createDrizzleFilter","table","items","logicOperator","GridLogicOperator","And","drizzleFilters","filter","undefined","forEach","field","operator","ilike","notIlike","eq","not","length","inArray","gt","moment","endOf","toISOString","gte","lt","startOf","lte","Number","isFinite","and","or","createDrizzleSort","sortModel","sort","map","sortValue","columnType","sql","asc","desc","createCustomSingleSelectFilter","filters","options","getSingleFilterValue","operationResults","status","STRING_FILTERS","getGridStringOperators","includes","NUMBER_FILTERS","getGridNumericOperators","DATE_FILTERS","getGridDateOperators","InfiniteQueryUtils","getArrayInfiniteQueryParams","lastPage","allPages","_","page","NotificationUtils","dismissNotification","reduxNotifications","notificationId","setNotifications","closeNotificationDrawer","id","newNotifications","n","err","StringUtils","replaceHtmlCharacterCodes","document","createTextNode","sanitize","charCodeIncludedString"],"sourceRoot":""}