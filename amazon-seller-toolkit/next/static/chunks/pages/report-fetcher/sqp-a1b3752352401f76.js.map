{"version":3,"file":"static/chunks/pages/report-fetcher/sqp-a1b3752352401f76.js","mappings":"yaACA,CAAAA,OAAAC,QAAA,CAAAD,OAAAC,QAAA,MAAAC,IAAA,EACA,sBACA,WACA,OAAeC,EAAQ,MACvB,EACA,6FCEe,OAAMC,EA8ErB,CA9EqBA,EACKC,yBAAAA,CAA4B,IAClD,IAAMC,EAAS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAM,CAG7FC,EAAQC,EAAMC,KAAK,CAAC,OACpBC,EAAmBH,CAAK,CAAC,EAAE,CAC3BI,EAAWJ,CAAK,CAAC,EAAE,CAACE,KAAK,CAAC,MAC1BG,EAAYD,CAAQ,CAAC,EAAE,CAACF,KAAK,CAAC,OAC9BI,EAAOF,CAAQ,CAAC,EAAE,CAGlBG,EAAqBJ,EAASK,OAAO,CAAC,SAAU,IAGhD,CAACC,EAAWC,EAAQ,CAAkBL,EAGtCM,EAAqB,IAAIC,KAAKH,GAC9BI,EAAmB,IAAID,KAAKF,GAG5BI,EAAaf,CAAM,CAACY,EAAaI,QAAQ,GAAG,CAC5CC,EAAWL,EAAaM,OAAO,GAC/BC,EAAWnB,CAAM,CAACc,EAAWE,QAAQ,GAAG,CACxCI,EAASN,EAAWI,OAAO,GAGjC,MAAO,IAAoBH,MAAAA,CAAhBP,EAAW,OAAmBS,MAAAA,CAAdF,EAAW,KAAgBR,MAAAA,CAAbU,EAAS,MAAcE,MAAAA,CAAVZ,EAAK,OAAiBa,MAAAA,CAAZD,EAAS,KAAcZ,MAAAA,CAAXa,EAAO,MAASC,MAAA,CAALd,EACzF,EA7BmBT,EA+BKwB,0BAAAA,CAA6B,CAACC,EAAeC,KACnE,IAAMjB,EAAOgB,EAAMpB,KAAK,CAAC,IAAI,CAAC,EAAE,CAChC,MAAO,GAAYI,MAAAA,CAATiB,EAAM,KAAQH,MAAA,CAALd,EACrB,EAlCmBT,EAoCK2B,4BAAAA,CAA+B,CAACF,EAAeG,KACrE,IAAMnB,EAAOgB,EAAMpB,KAAK,CAAC,IAAI,CAAC,EAAE,CAChC,MAAO,IAAeI,MAAAA,CAAXmB,EAAQ,KAAQL,MAAA,CAALd,EACxB,EAvCmBT,EAyCH6B,gBAAAA,CAAmB,QACjCC,EAAAA,EAAAA,EAAAA,SAAAA,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EACIC,IAAI,CAAC,GAAUC,WAAAA,EAAKP,KAAK,CAAK,GADlCK,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAEIG,KAAK,GAFTH,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAEWI,MAAM,GAFjBJ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAEmBK,GAAG,CAAC,OAAC,CAAEV,MAAAA,CAAK,CAAEW,sBAAAA,CAAqB,CAAoD,CAAAC,QAAM,CAC5GC,KAAMC,IAAAA,GAAU,CAACd,GACjBe,MAAOxC,EAAKC,yBAAyB,CAACmC,EACxC,MALFN,KAAAA,IAAAA,EAAAA,EAKS,EAAE,EA/CM9B,EAiDHyC,iBAAAA,CAAoB,QAClCX,EAAAA,EAAAA,EAAAA,SAAAA,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EACIC,IAAI,CAAC,GAAUC,YAAAA,EAAKP,KAAK,CAAK,GADlCK,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAEIG,KAAK,GAFTH,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAEWI,MAAM,GAFjBJ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAEmBY,MAAM,CAAC,CAACxC,EAAQyC,SAE7BA,EAAAA,EADF,IAAMT,EACJS,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAaV,KAAK,GAAlBU,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAoBT,MAAM,CAACC,GAAG,CAC5B,OAAC,CAAEV,MAAAA,CAAK,CAAEW,sBAAAA,CAAqB,CAAoD,CAAAC,QAAM,CACvFC,KAAMC,IAAAA,GAAU,CAACd,GACjBe,MAAOxC,EAAKwB,0BAA0B,CAACC,EAAOW,EAChD,MAJFO,KAAAA,IAAAA,EAAAA,EAKK,EAAE,CAET,OAAOzC,EAAOqB,MAAM,CAACW,EACvB,EAAG,EAAE,IAZPJ,KAAAA,IAAAA,EAAAA,EAYmC,EAAE,EA9DpB9B,EAgEH4C,mBAAAA,CAAsB,QACpCd,EAAAA,EAAAA,EAAAA,SAAAA,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EACIC,IAAI,CAAC,GAAUC,cAAAA,EAAKP,KAAK,CAAK,GADlCK,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAEIG,KAAK,GAFTH,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAEWI,MAAM,GAFjBJ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAEmBY,MAAM,CAAC,CAACd,EAASe,SAE9BA,EAAAA,EADF,IAAMT,EACJS,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAaV,KAAK,GAAlBU,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAoBT,MAAM,CAACC,GAAG,CAC5B,OAAC,CAAEV,MAAAA,CAAK,CAAEW,sBAAAA,CAAqB,CAAoD,CAAAC,QAAM,CACvFC,KAAMC,IAAAA,GAAU,CAACd,GACjBe,MAAOxC,EAAK2B,4BAA4B,CAACF,EAAOW,EAClD,MAJFO,KAAAA,IAAAA,EAAAA,EAKK,EAAE,CAET,OAAOf,EAAQL,MAAM,CAACW,EACxB,EAAG,EAAE,IAZPJ,KAAAA,IAAAA,EAAAA,EAYmC,EAAE,oFCnF1B,OAAMe,EAerB,CAfqBA,EACHC,GAAAA,CAAM,GAAiCC,EAAKL,MAAM,CAAC,CAACM,EAAKC,IAAQD,EAAMC,EAAK,GADzEJ,EAGHK,OAAAA,CAAU,CAACH,EAAqBI,KAC9C,GAAI,CAACJ,EAAKK,MAAM,CACd,MAAO,GAIT,IAAMC,EAASC,EADIR,GAAG,CAACC,GACAA,EAAKK,MAAM,CAClC,OAAOG,EAAAA,EAAWA,CAACC,oBAAoB,CAACH,EAAQF,EAClD,EAXmBN,EAaHY,mBAAAA,CAAsB,CAACC,EAAmBC,IACxDJ,EAAAA,EAAWA,CAACK,gBAAgB,CAACF,EAAaC,CAAAA,GAAe,qFCI7DE,CAAAA,EAAAC,CAAA,CAVsD,OAAC,CACrDC,SAAAA,CAAQ,CACRtC,MAAAA,CAAK,CACLuC,SAAAA,CAAQ,CACRC,cAAAA,CAAa,CACd,CAAA5B,QAAK,GAAA6B,EAAAC,GAAA,EAACC,EAAAA,CAASA,CAAAA,CAACL,SAAUA,EAAUM,UAAS,GAACC,MAAM,eAAeC,KAAK,yBAAyBP,SAAUA,EAAUQ,OAAM,GAAC/C,MAAOA,EAAOgD,sBAAoB,YAAYC,wBAAsB,oBAAoBC,0BAAwB,iCACxO,CAAE,SAAU,WAAY,aAAa,CAA2DxC,GAAG,CAACyC,GAA0B,GAAAV,EAAAC,GAAA,EAACU,EAAAA,CAAQA,CAAAA,CAA8BpD,MAAOmD,WACtKE,CAAAA,EAAAA,EAAAA,CAAAA,EAA2Bb,EAAeW,IAD6FA,oIC+ClJf,CAAAA,EAAAC,CAAA,CApD8D,OAAC,CAC7DC,SAAAA,CAAQ,CACRgB,OAAAA,CAAM,CACNjD,gBAAAA,CAAe,CAChB,CAAAO,EAQO,CACJiC,MAAAA,CAAK,CACLU,QAAAA,CAAO,CACR,CAAGC,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,KACV,OAAQF,EAAO7C,MAAM,CAACgD,cAAc,EAClC,IAAK,SACH,MAAO,CACLZ,MAAO,QACPU,QAASlD,MAAAA,EAAAA,KAAAA,EAAAA,EAAiBqD,MAAM,CAEpC,KAAK,UACH,MAAO,CACLb,MAAO,SACPU,QAASlD,MAAAA,EAAAA,KAAAA,EAAAA,EAAiBsD,OAAO,CAErC,KAAK,YACH,MAAO,CACLd,MAAO,WACPU,QAASlD,MAAAA,EAAAA,KAAAA,EAAAA,EAAiBuD,SAAS,CAEvC,SACE,MAAM,MAAU,+BACpB,CACF,EAAG,CAACN,EAAO7C,MAAM,CAACgD,cAAc,CAAEpD,EAAgB,EAClD,MAAO,GAAAoC,EAAAoB,IAAA,EAACC,EAAAA,CAAKA,CAAAA,CAACC,QAAS,EAAGf,sBAAoB,QAAQC,wBAAsB,wBAAwBC,0BAAwB,sCACxH,GAAAT,EAAAC,GAAA,EAACC,EAAAA,CAASA,CAAAA,CAACL,SAAUA,EAAUM,UAAS,GAACC,MAAM,kBAAkBC,KAAK,YAAYP,SAhCxD,IAC5Be,EAAOU,SAAS,CAAC,CACf,GAAGV,EAAO7C,MAAM,CAChBwD,QAAS,EAAE,CACXR,eAAgBS,EAAEC,MAAM,CAACnE,KAAK,EAElC,EA0BuH+C,OAAM,GAAC/C,MAAOsD,EAAO7C,MAAM,CAACgD,cAAc,CAAET,sBAAoB,YAAYE,0BAAwB,qCACpNkB,EAAAA,CAAqBA,CAAC1D,GAAG,CAAC2D,GAAiB,GAAA5B,EAAAC,GAAA,EAACU,EAAAA,CAAQA,CAAAA,CAAqBpD,MAAOqE,WAC5EA,GADsDA,MAI7D,GAAA5B,EAAAC,GAAA,EAAC4B,EAAAA,CAAYA,CAAAA,CAACC,qBAAoB,GAACjC,SAAUA,EAAUM,UAAS,GAAC4B,eAAgBC,GAAUA,EAAO1D,KAAK,CAAE2D,SAAQ,GAACnC,SAAU,CAAC2B,EAAGS,IAAMrB,EAAOsB,aAAa,CAAC,UAAWD,GAAIpB,QAASA,EAASsB,YAAaC,GAAU,GAAArC,EAAAC,GAAA,EAACC,EAAAA,CAASA,CAAAA,CAAE,GAAGmC,CAAM,CAAEjC,MAAOA,EAAOkC,YAAa,qBAAyCjF,MAAA,CAApB+C,EAAMmC,WAAW,MAAUC,aAAc,CAACC,EAAOT,EAAAA,QAAQ,CACnVU,SAAAA,CAAQ,CACT,CAAAvE,QAAK,GAAAwE,EAAAC,aAAA,EAACC,KAAAA,CAAI,GAAGJ,CAAK,CAAEK,IAAKd,EAAO1D,KAAK,WAC9B,GAAA0B,EAAAC,GAAA,EAAC8C,EAAAA,CAAQA,CAAAA,CAACC,QAASN,EAAUO,MAAO,CACxCC,YAAa,CACf,IACOlB,EAAO1D,KAAK,KACRf,MAAOsD,EAAO7C,MAAM,CAACwD,OAAO,CAAEjB,sBAAoB,eAAeE,0BAAwB,gCAE1G,gIChCAd,CAAAA,EAAAC,CAAA,CArBkE,OAAC,CACjEC,SAAAA,CAAQ,CACRC,SAAAA,CAAQ,CACT,CAAA3B,QAAK,GAAA6B,EAAAC,GAAA,EAACC,EAAAA,CAASA,CAAAA,CAACL,SAAUA,EAAUM,UAAS,GAACC,MAAM,cAAcN,SAAUA,EAAUwC,YAAY,iCAAiChC,OAAM,GAACC,sBAAoB,YAAYC,wBAAsB,0BAA0BC,0BAAwB,uCAC9O0C,OAAOC,OAAO,CAACC,EAAAA,EAAsBA,EAAEpF,GAAG,CAAC,OAAC,CAACqF,EAAM,CACpDjD,KAAAA,CAAI,CACL,CAAC,CAAAlC,QAAK,GAAA6B,EAAAC,GAAA,EAACU,EAAAA,CAAQA,CAAAA,CAAYpD,MAAO+F,WAC7B,GAAAtD,EAAAoB,IAAA,EAACC,EAAAA,CAAKA,CAAAA,CAACkC,WAAW,SAASC,UAAU,MAAMlC,QAAS,YAClD,GAAAtB,EAAAC,GAAA,EAACwD,EAAAA,CAAMA,CAAAA,CAACC,GAAI,CACdC,OAAQ,GACRC,MAAO,EACT,WACM,GAAA5D,EAAAC,GAAA,EAAC4D,EAAAA,CAAOA,CAAAA,CAACC,KAAM,gBAAqBzG,MAAA,CAALiG,GAAQI,GAAI,CAC7CC,OAAQ,OACRC,MAAO,MACT,MAEE,GAAA5D,EAAAC,GAAA,EAAC8D,EAAAA,CAAUA,CAAAA,CAACC,QAAQ,iBAAS3D,QAXfA,8VCPT,OAAM4D,EAiNrB,CAjNqBA,EACKC,gBAAAA,CAGpB,CACFC,KAAM,GAAcC,EAASD,IAAI,CAAC,EAAE,CACpC,gBAAiB,GAAcC,CAAQ,CAAC,gBAAgB,CAAC,EAAE,CAC3D,qBAAsB,GACpBzF,EAAAA,CAAsBA,CAACK,OAAO,CAACoF,CAAQ,CAAC,qBAAqB,CAA8B,GAC7F,uBAAwB,GAAczF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,uBAAuB,EACjG,sBAAuB,GAAczF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,sBAAsB,EAC/F,4BAA6B,GAAczF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,4BAA4B,EAC3G,4BAA6B,GAC3BzF,EAAAA,CAAsBA,CAACY,mBAAmB,CACxCZ,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,4BAA4B,EAChEzF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,sBAAsB,GAE9D,iBAAkB,GAAczF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,iBAAiB,EACrF,gBAAiB,GACfzF,EAAAA,CAAsBA,CAACY,mBAAmB,CACxCZ,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,iBAAiB,EACrDzF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,uBAAuB,GAE/D,uBAAwB,GAAczF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,uBAAuB,EACjG,uBAAwB,GACtBzF,EAAAA,CAAsBA,CAACY,mBAAmB,CACxCZ,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,uBAAuB,EAC3DzF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,iBAAiB,GAEzD,oCAAqC,GACnCzF,EAAAA,CAAsBA,CAACK,OAAO,CAACoF,CAAQ,CAAC,oCAAoC,CAAE,GAChF,8BAA+B,GAC7BzF,EAAAA,CAAsBA,CAACK,OAAO,CAACoF,CAAQ,CAAC,8BAA8B,CAAE,GAC1E,mCAAoC,GAClCzF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,mCAAmC,EACzE,kCAAmC,GACjCzF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,kCAAkC,EACxE,kCAAmC,GACjCzF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,kCAAkC,EACxE,oBAAqB,GAAczF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,oBAAoB,EAC3F,wBAAyB,GACvBzF,EAAAA,CAAsBA,CAACY,mBAAmB,CACxCZ,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,oBAAoB,EACxDzF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,uBAAuB,GAE/D,0BAA2B,GAAczF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,0BAA0B,EACvG,0BAA2B,GACzBzF,EAAAA,CAAsBA,CAACY,mBAAmB,CACxCZ,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,0BAA0B,EAC9DzF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,oBAAoB,GAE5D,uCAAwC,GACtCzF,EAAAA,CAAsBA,CAACK,OAAO,CAACoF,CAAQ,CAAC,uCAAuC,CAAE,GACnF,iCAAkC,GAChCzF,EAAAA,CAAsBA,CAACK,OAAO,CAACoF,CAAQ,CAAC,iCAAiC,CAAE,GAC7E,sCAAuC,GACrCzF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,sCAAsC,EAC5E,qCAAsC,GACpCzF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,qCAAqC,EAC3E,qCAAsC,GACpCzF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,qCAAqC,EAC3E,oBAAqB,GAAczF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,oBAAoB,EAC3F,wBAAyB,GACvBzF,EAAAA,CAAsBA,CAACY,mBAAmB,CACxCZ,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,oBAAoB,EACxDzF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,uBAAuB,GAE/D,0BAA2B,GAAczF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,0BAA0B,EACvG,0BAA2B,GACzBzF,EAAAA,CAAsBA,CAACY,mBAAmB,CACxCZ,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,0BAA0B,EAC9DzF,EAAAA,CAAsBA,CAACC,GAAG,CAACwF,CAAQ,CAAC,oBAAoB,GAE5D,uCAAwC,GACtCzF,EAAAA,CAAsBA,CAACK,OAAO,CAACoF,CAAQ,CAAC,uCAAuC,CAAE,GACnF,iCAAkC,GAChCzF,EAAAA,CAAsBA,CAACK,OAAO,CAACoF,CAAQ,CAAC,iCAAiC,CAAE,GAC7E,sCAAuC,GACrCzF,EAAAA,CAAsBA,CAACK,OAAO,CAACoF,CAAQ,CAAC,sCAAsC,CAAE,GAClF,qCAAsC,GACpCzF,EAAAA,CAAsBA,CAACK,OAAO,CAACoF,CAAQ,CAAC,qCAAqC,CAAE,GACjF,qCAAsC,GACpCzF,EAAAA,CAAsBA,CAACK,OAAO,CAACoF,CAAQ,CAAC,qCAAqC,CAAE,GACjFC,YAAa,GAAcD,EAASC,WAAW,CAAC,EAAE,CAClDC,OAAQ,GAAcF,EAASE,MAAM,CAACC,IAAI,CAAC,IAC7C,EArFmBN,EAuFKO,iBAAAA,CAGpB,CACFC,MAAO,GAAeC,EAAUD,KAAK,CAAC,EAAE,CACxC,iBAAkB,GAAeC,CAAS,CAAC,iBAAiB,CAAC,EAAE,CAC/D,gBAAiB,GACf/F,EAAAA,CAAsBA,CAACK,OAAO,CAAC0F,CAAS,CAAC,gBAAgB,CAA8B,GACzF,kBAAmB,GAAe/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,kBAAkB,EACzF,iBAAkB,GAAe/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,iBAAiB,EACvF,6BAA8B,GAAe/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,6BAA6B,EAC/G,6BAA8B,GAC5B/F,EAAAA,CAAsBA,CAACY,mBAAmB,CACxCZ,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,6BAA6B,EAClE/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,iBAAiB,GAE1D,YAAa,GAAe/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,YAAY,EAC7E,gBAAiB,GACf/F,EAAAA,CAAsBA,CAACY,mBAAmB,CACxCZ,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,YAAY,EACjD/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,kBAAkB,GAE3D,wBAAyB,GAAe/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,wBAAwB,EACrG,wBAAyB,GACvB/F,EAAAA,CAAsBA,CAACY,mBAAmB,CACxCZ,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,wBAAwB,EAC7D/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,YAAY,GAErD,kBAAmB,GAAe/F,EAAAA,CAAsBA,CAACK,OAAO,CAAC0F,CAAS,CAAC,kBAAkB,CAAE,GAC/F,wBAAyB,GAAe/F,EAAAA,CAAsBA,CAACK,OAAO,CAAC0F,CAAS,CAAC,wBAAwB,CAAE,GAC3G,8BAA+B,GAAe/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,8BAA8B,EACjH,6BAA8B,GAAe/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,6BAA6B,EAC/G,6BAA8B,GAAe/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,6BAA6B,EAC/G,eAAgB,GAAe/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,eAAe,EACnF,mBAAoB,GAClB/F,EAAAA,CAAsBA,CAACY,mBAAmB,CACxCZ,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,eAAe,EACpD/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,kBAAkB,GAE3D,2BAA4B,GAAe/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,2BAA2B,EAC3G,2BAA4B,GAC1B/F,EAAAA,CAAsBA,CAACY,mBAAmB,CACxCZ,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,2BAA2B,EAChE/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,eAAe,GAExD,qBAAsB,GAAe/F,EAAAA,CAAsBA,CAACK,OAAO,CAAC0F,CAAS,CAAC,qBAAqB,CAAE,GACrG,iCAAkC,GAChC/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,iCAAiC,EACxE,gCAAiC,GAC/B/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,gCAAgC,EACvE,gCAAiC,GAC/B/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,gCAAgC,EACvE,eAAgB,GAAe/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,eAAe,EACnF,mBAAoB,GAClB/F,EAAAA,CAAsBA,CAACY,mBAAmB,CACxCZ,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,eAAe,EACpD/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,kBAAkB,GAE3D,2BAA4B,GAAe/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,2BAA2B,EAC3G,2BAA4B,GAC1B/F,EAAAA,CAAsBA,CAACY,mBAAmB,CACxCZ,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,2BAA2B,EAChE/F,EAAAA,CAAsBA,CAACC,GAAG,CAAC8F,CAAS,CAAC,eAAe,GAExD,oBAAqB,GAAe/F,EAAAA,CAAsBA,CAACK,OAAO,CAAC0F,CAAS,CAAC,oBAAoB,CAAE,GACnG,2BAA4B,GAAe/F,EAAAA,CAAsBA,CAACK,OAAO,CAAC0F,CAAS,CAAC,2BAA2B,CAAE,GACjH,iCAAkC,GAChC/F,EAAAA,CAAsBA,CAACK,OAAO,CAAC0F,CAAS,CAAC,iCAAiC,CAAE,GAC9E,gCAAiC,GAC/B/F,EAAAA,CAAsBA,CAACK,OAAO,CAAC0F,CAAS,CAAC,gCAAgC,CAAE,GAC7E,gCAAiC,GAC/B/F,EAAAA,CAAsBA,CAACK,OAAO,CAAC0F,CAAS,CAAC,gCAAgC,CAAE,GAC7EL,YAAa,GAAeK,EAAUL,WAAW,CAAC,EAAE,CACpDC,OAAQ,GAAeI,EAAUJ,MAAM,CAACC,IAAI,CAAC,IAC/C,EAjKmBN,EAmKZU,aAAAA,CAAgB,CACrBC,EACAC,KAEA,IAAMC,EAAS,IAAIC,IAEnBH,EAAQI,OAAO,CAAC,OAAC,CAAE,CAACH,EAAK,CAAEI,CAAW,CAAE,CAAC,MAAW5H,MAAA,CAALwH,EAAK,UAAiB,CAAEK,CAAK,CAAEb,YAAAA,CAAW,CAAEC,OAAAA,CAAM,CAAE,GAAGa,EAAM,CAAAhH,EACpG2E,EAAM,GAAkBoC,MAAAA,CAAfD,EAAY,KAAS5H,MAAA,CAAN6H,GAEzBJ,EAAOM,GAAG,CAACtC,IAQdgC,EAAOO,GAAG,CAACvC,EAPgE,CACzEuB,YAAa,CAACA,EAAY,CAC1BC,OAAQ,EAAE,CACV,CAAC,MAAWjH,MAAA,CAALwH,EAAK,UAAiB,CAAE,CAACK,EAAM,CACtC,CAACL,EAAK,CAAE,CAACI,EAAY,GAMzB,IAAMjH,EAAS8G,EAAOQ,GAAG,CAACxC,GAC1B9E,EAAOsG,MAAM,CAAC1I,IAAI,CAAC0I,GACnBnB,OAAOC,OAAO,CAAC+B,GAAMH,OAAO,CAAC,OAAC,CAACO,EAAShI,EAAM,CAAAY,EACtCoH,KAAWvH,GAAWT,MAAAA,GAC1BS,CAAAA,CAAM,CAACuH,EAA6B,CAAG,EAAE,EAE7B,MAAVhI,GACDS,CAAM,CAACuH,EAA6B,CAAmB3J,IAAI,CAAC,CAAC2B,EAElE,EACF,GAEA,IAAMiI,EAAcX,SAAAA,EAAkBZ,EAAKC,gBAAgB,CAAGD,EAAKO,iBAAiB,CACpF,OAAOiB,MAAMC,IAAI,CAACZ,EAAO9G,MAAM,IAAIC,GAAG,CAAC,IACrC,IAAM0H,EAAwC,CAAC,EAS/C,OARCxC,OAAOyC,IAAI,CAACJ,GAAiDR,OAAO,CAAC,IACpEW,CAAa,CAAC7C,EAAI,CAAG+C,OAAOL,CAAW,CAAC1C,EAAI,CAAC4B,GAC/C,GAMOiB,CACT,EACF,CC3Ma,OAAMG,EAiOrB,CAjOqBA,EACKC,wBAAAA,CAA2B,CACjDC,EACAhF,EACAzD,EACAsH,EACAoB,KAEA,IAAMC,EAAeC,EAAAA,CAAmBA,CAACC,+BAA+B,CAACpF,EAAgBiF,GAEnFI,EAASxB,SAAAA,EAsBf,MAAO,CAAEyB,QArBO,CACdC,iBAAkB,CAChB,CAAEC,GAAIH,EAAS,OAAS,QAAS9I,MAAAA,EAAOkJ,UAAWJ,EAAS,OAAS,IAAK,EAC1E,CAAEG,GAAI,kBAAmBjJ,MAAOyD,EAAeuB,WAAW,GAAIkE,UAAW,IAAK,KAC3EP,EACJ,CACDQ,SAAUL,EAAS,sCAAwC,uCAC3DM,iBAAkB,CAChB,CACEC,UAAW,GACXC,WAAY,EACZC,SAAU,IACVJ,SAAUL,EAAS,sCAAwC,uCAC3DU,WAAY,QACZC,eAAgBX,EAAS,qBAAuB,eAClD,EACD,CACDY,kBAAmB,CAACjB,EAAgB,CACpCkB,OAAQb,EAAS,8BAAgC,+BACnD,EAEkBJ,cAAeA,EAAckB,WAAW,EAAG,CAC/D,EAjCmBrB,EAmCKsB,iBAAAA,CAAoB,CAC1CpB,EACAqB,EACArG,EACA6D,EACA7G,KAEA,IAAMsJ,EAGF,CAAC,EAcL,OAZAtJ,EAAOgH,OAAO,CAAC,IACbsC,CAAQ,CAAC/J,EAAM,CAAG8J,EAAepJ,GAAG,CAAC,GACnC6H,EAAKC,wBAAwB,CAC3BC,EACAhF,EACAzD,EACAsH,EACAxG,IAAAA,EAAS,CAAC4H,EAAesB,EAAAA,EAAWA,GAG1C,GAEOD,CACT,EA5DmBxB,EA8DZ0B,eAAAA,CAAkB,MACvBC,EACA5C,EACA6C,EACAC,EACAC,EACAC,SA0BiDC,EAAAA,EA0CrBF,EAAAA,EAlE5B,IAAMG,EAAWlD,UAAAA,EAEX,CACJmB,gBAAAA,CAAe,CACfhF,eAAAA,CAAc,CACdN,uBAAAA,CAAsB,CACtBsH,wBAAyBC,CAAmB,CAC7C,CAAGJ,EAEEK,EAAe,EAAE,CACjBC,EAAkB,EAAE,CAEpBC,EAAYtC,EAAKsB,iBAAiB,CACtCpB,EACA6B,EAAYrG,OAAO,CAACvD,GAAG,CAAC,OAAC,CAAEG,KAAAA,CAAI,CAAE,CAAAD,SAAKC,EAAKiK,GAAG,GAAGlB,WAAW,KAC5DnG,EACA6D,EACAsB,EAAAA,CAAmBA,CAACmC,2BAA2B,CAACzD,UAAAA,EAAmBgD,EAAYU,MAAM,CAAGV,EAAYW,KAAK,GAGrGC,EAAUV,EAAWW,EAAAA,CAAeA,CAACC,sBAAsB,CAAGD,EAAAA,CAAeA,CAACE,qBAAqB,CAEnGC,EAAYd,EAAW,GAAK,EAC5BD,EAAmB3E,OAAOC,OAAO,CAACgF,GAClCU,EAAgBhB,EAAiB5I,MAAM,CAAI4I,CAAAA,CAAAA,OAAAA,CAAAA,EAAAA,CAAgB,CAAC,EAAE,GAAnBA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,CAAqB,CAAC,EAAE,GAAxBA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA0B5I,MAAM,GAAI,GAAK2J,EAE1F,IAAK,GAAM,CAACE,EAAG,CAACxL,EAAOyL,EAAU,CAAC,GAAIlB,EAAiB1E,OAAO,GAAI,CAChE,IAAM6F,EAAa,EAAE,CAEjBC,EAAW,GACf,IAAK,GAAM,CAACC,EAAG,CAAE7C,QAAS8C,CAAa,CAAEnD,cAAAA,CAAa,CAAE,CAAC,GAAI+C,EAAU5F,OAAO,GAAI,CAChF,IAAMiG,EAAWC,IAAAA,KAAO,CAACT,GAAW5K,GAAG,CAAC,GACtCqL,IAAAA,SAAW,CAAC,CACV,GAAGF,CAAa,CAChBzC,iBAAkByC,EAAczC,gBAAgB,CAAC1I,GAAG,CAAC,GAAgB,EACnE,GAAGsL,CAAS,CACZ1C,WAAY2C,EAAe,CAC7B,GACF,IAGIC,EAAgE,EAAE,CACxE,IAAK,GAAM,CAACC,EAAGpD,EAAQ,GAAI+C,EAASjG,OAAO,GACzC,GAAI,CACF,GAAM,CAAEuG,KAAAA,CAAI,CAAE,CAAG,MAAMC,EAAAA,CAA2BA,CAACC,eAAe,CAACpC,EAAmBnB,EAASyB,GAC/F4B,EAAK3E,OAAO,CAAC,IACX,GAAI+C,EAAU,KACAH,EAAAA,CAAZkC,CAAAA,EAAIrF,KAAK,CAAGmD,OAAAA,CAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAW/J,IAAI,CAAC,GAAW4G,EAAMlH,KAAK,GAAKA,EAAAA,GAA3CqK,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAmD1J,qBAAqB,GAAxE0J,KAAAA,IAAAA,EAAAA,EAA4ErK,CAC1F,MACEuM,EAAI3F,IAAI,CAAG5G,CAEbuM,CAAAA,EAAIzF,WAAW,CAAGhB,EAAAA,EAAsB,CAAC2C,EAAgB,CAAC3F,IAAI,CAC9DyJ,EAAIxF,MAAM,CAAG6B,EAAAA,CAAmBA,CAAC4D,kBAAkB,CAAC/I,EAAgBiF,GAGpE,IAAM+D,EAAWjC,EACZ,iBACA,gBACL5B,EAAAA,CAAmBA,CAAC8D,uBAAuB,CAAC,CAACD,EAAS,CAAEF,EAC1D,GAEAL,EAAoB7N,IAAI,IAAI+N,EAC9B,CAAE,MAAOO,EAAc,CACrB/D,EAAAA,CAAmBA,CAACgE,kBAAkB,CAACD,GACvChB,EAAW,GACPnB,EACFG,EAAatM,IAAI,CAACgM,OAAAA,CAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAW/J,IAAI,CAAC,GAAW4G,EAAMlH,KAAK,GAAKA,EAAAA,GAA3CqK,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAmD1J,qBAAqB,GAAxE0J,KAAAA,IAAAA,EAAAA,EAA4ErK,GAE9F2K,EAAatM,IAAI,CAAC2B,GAGpB,KACF,QAAU,CAGRmK,EAAoB0C,CAFKvB,EAAaE,CAAAA,EAAIC,EAAU9J,MAAM,CAAGiK,CAAAA,EAAMO,CAAAA,EAAI,IAE/BZ,EAAiB,KAEzD,IAAMuB,EACJtB,IAAMjB,EAAiB5I,MAAM,CAAG,GAAKiK,IAAMH,EAAU9J,MAAM,CAAG,GAAKwK,IAAML,EAASnK,MAAM,CAAG,EACvFiH,EAAAA,CAAmBA,CAACmE,yBAAyB,GAC7C,CACN,OAAMC,EAAAA,EAAKA,CAACC,KAAK,CAACH,EACpB,CAGF,GAAInB,EACF,KACK,EACL,IAAMuB,EAAe1C,EAAW,gBAAkB,qBAClDkB,EAAWrN,IAAI,IACV6N,EAAoBiB,IAAI,CAAC,CAACC,EAAGC,IAAMC,SAASF,CAAC,CAACF,EAAa,CAAE,IAAMI,SAASD,CAAC,CAACH,EAAa,CAAE,KAEpG,CACF,CAEKvB,IACCxI,aAAAA,EACFiH,EAAe,CACb,GAAIM,UAAAA,EACA,CACE,GAAIA,iBAAAA,EACA,CAAE6C,QAAS7B,CAAW,EACtB,CACE8B,wBAAyB5E,EAAAA,CAAmBA,CAAC6E,iBAAiB,CAC5D/B,EACAR,EAEJ,CAAC,EAEP,CAAEwC,QAAS9E,EAAAA,CAAmBA,CAAC+E,eAAe,CAAiBjC,EAAYR,EAAS,CAAC,CACzF0C,SAAU,GAAqB9M,MAAAA,CAAlBd,EAAM,cAAiDF,MAAA,CAArCgB,MAAS8I,WAAW,GAAGhL,KAAK,CAAC,IAAI,CAAC,EAAE,EACnEiP,YAAanD,EACboD,eAAgBxD,CAClB,GAEAM,EAAgBvM,IAAI,IAAIqN,GAG9B,CAEA,GAAIvI,aAAAA,GAAyCwH,EAAahJ,MAAM,GAAK4I,EAAiB5I,MAAM,CAAE,CAC5F,IAAMoM,EAAe5K,eAAAA,EACfoK,EAAUQ,EACZrH,EAAoBU,aAAa,CAACwD,EAAiBJ,EAAW,QAAU,QACxEI,EACJR,EAAe,CACb,GAAIM,UAAAA,EACA,CACE,GAAIA,iBAAAA,EACA,CAAE6C,QAAAA,CAAQ,EACV,CACEC,wBAAyB5E,EAAAA,CAAmBA,CAAC6E,iBAAiB,CAC5DM,EACIrH,EAAoBU,aAAa,CAACwD,EAAiBJ,EAAW,QAAU,QACxEI,EACJM,EAEJ,CAAC,EAEP,CACEwC,QAAS9E,EAAAA,CAAmBA,CAAC+E,eAAe,CAC1CI,EACIrH,EAAoBU,aAAa,CAACwD,EAAiBJ,EAAW,QAAU,QACxEI,EACJM,EAEJ,CAAC,CACL0C,SAAU,SAAuCG,MAAAA,CAA9BvD,EAAW,QAAU,QAAgD1J,MAAAA,CAAvCiN,EAAe,OAAS,GAAG,cAAiDjO,MAAA,CAArCgB,MAAS8I,WAAW,GAAGhL,KAAK,CAAC,IAAI,CAAC,EAAE,EAC5HiP,YAAanD,EACboD,eAAgBxD,CAClB,EACF,CAEA,OAAOK,CACT,gBCvOa,OAAMqD,EAgCrB,CAhCqBA,EACZC,WAAAA,CAAc,MAAO/D,QAGHH,EAAAA,EAGKA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAIbmE,EACeA,EADfA,EATf,IAAMnE,EAAW,MAAMsC,EAAAA,CAA2BA,CAAC8B,gBAAgB,CAACjE,GAE9DgE,EAAiBnE,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAUqE,QAAQ,GAAlBrE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAoBsE,SAAS,GAA7BtE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA+BuE,KAAK,CAAChO,IAAI,CAC9D,GAAeC,kCAAAA,EAAK0I,EAAE,EAElBsF,EAAsBxE,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAUqE,QAAQ,GAAlBrE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAoBsE,SAAS,GAA7BtE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAA+BuE,KAAK,GAApCvE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EACxBzJ,IAAI,CAAC,GAAeC,gCAAAA,EAAK0I,EAAE,CAAK,GADRc,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAExByE,OAAO,GAFiBzE,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAEfzJ,IAAI,CAAC,GAAeC,oBAAAA,EAAK0I,EAAE,CAAK,GAFjBc,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAEqCtJ,MAAM,CAEjEuK,EAASkD,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAgBM,OAAO,CAAClO,IAAI,CAAC,GAAeC,UAAAA,EAAK0I,EAAE,CAAK,GAAxDiF,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAkEzN,MAAM,GAAxEyN,KAAAA,IAAAA,EAAAA,EAA4E,EAAE,CACvFO,EAAwBP,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAgBM,OAAO,CAAClO,IAAI,CAAC,GAAeC,oBAAAA,EAAK0I,EAAE,CAAK,GAAxDiF,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA4EzN,MAAM,CAEhH,MAAO,CACLwK,MAAO,CACL5K,gBAAiB,CACfsD,QAASpF,EAAAA,CAAaA,CAACyC,iBAAiB,CAACuN,GACzC3K,UAAWrF,EAAAA,CAAaA,CAAC4C,mBAAmB,CAACoN,GAC7C7K,OAAQnF,EAAAA,CAAaA,CAAC6B,gBAAgB,CAACmO,EACzC,CACF,EACAvD,OAAQ,CACNzH,QAASyH,EACT3K,gBAAiB,CACfsD,QAASpF,EAAAA,CAAaA,CAACyC,iBAAiB,CAACyN,GACzC7K,UAAWrF,EAAAA,CAAaA,CAAC4C,mBAAmB,CAACsN,GAC7C/K,OAAQnF,EAAAA,CAAaA,CAAC6B,gBAAgB,CAACqO,EACzC,CACF,CACF,CACF,oJCiBFC,EApCkC,QAOcN,EAAmCA,KAPhD,CACjCO,UAAAA,CAAS,CACTC,SAAAA,CAAQ,CACRtL,OAAAA,CAAM,CACNhB,SAAAA,CAAQ,CACR8L,SAAAA,CAAQ,CACT,CAAAxN,EACOP,EAAkBuO,SAAAA,EAAsBR,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAUnD,KAAK,GAAfmD,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAiB/N,eAAe,CAAG+N,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAUpD,MAAM,GAAhBoD,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAkB/N,eAAe,CAC5GwO,EAAiBrL,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,SAOjB4K,QANZ,SAAIQ,EACK,GAAAE,EAAApM,GAAA,EAACC,EAAAA,CAASA,CAAAA,CAACL,SAAUA,EAAUyM,MAAO,CAAC,CAAEzL,CAAAA,EAAO0L,MAAM,CAAC/D,KAAK,EAAI3H,EAAO2L,OAAO,CAAChE,KAAK,EAAGrI,UAAS,GAACsM,WAAY5L,EAAO2L,OAAO,CAAChE,KAAK,CAAG3H,EAAO0L,MAAM,CAAC/D,KAAK,CAAG,KAAMhC,GAAG,QAAQpG,MAAM,qCAAqCsM,UAAS,GAACrM,KAAK,QAAQsM,OAAQ9L,EAAO+L,UAAU,CAAE9M,SAAUe,EAAOgM,YAAY,CAAElD,KAAM,EAAGpM,MAAOsD,EAAO7C,MAAM,CAACwK,KAAK,CAAExE,QAAQ,aAEtV,GAAAqI,EAAApM,GAAA,EAAC4B,EAAAA,CAAYA,CAAAA,CAACC,qBAAoB,GAACjC,SAAUA,EAAUM,UAAS,GAAC4B,eAAgBC,GAAUA,MAAAA,EAAAA,KAAAA,EAAAA,EAAQ9D,qBAAqB,CAAE+D,SAAQ,GAACnC,SAAU,CAACwJ,EAAGwD,KACtJ,IAAMC,EAAiBD,EAAgB7O,GAAG,CAAC+D,GAAUA,EAAOzE,KAAK,EAAEgH,IAAI,CAAC,MACxE1D,EAAOsB,aAAa,CAAC,SAAU4K,EACjC,EAAGjM,QAAS6K,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAUpD,MAAM,GAAhBoD,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAkB7K,OAAO,GAAI,EAAE,CAAEsB,YAAaC,GAAU,GAAAgK,EAAApM,GAAA,EAACC,EAAAA,CAASA,CAAAA,CAAE,GAAGmC,CAAM,CAAEjC,MAAM,SAASkC,YAAY,6BAA+BE,aAAc,CAACC,EAAOT,EAAAA,QAAQ,CACjLU,SAAAA,CAAQ,CACT,CAAAvE,QAAK,GAAA6O,EAAApK,aAAA,EAACC,KAAAA,CAAI,GAAGJ,CAAK,CAAEK,IAAKd,EAAO9D,qBAAqB,WAC9C,GAAAmO,EAAApM,GAAA,EAAC8C,EAAAA,CAAQA,CAAAA,CAACC,QAASN,EAAUO,MAAO,CACxCC,YAAa,CACf,IACOlB,EAAO9D,qBAAqB,MAEvC,EAAG,CAAC2B,EAAUgB,EAAQ8K,EAAUQ,EAAS,EACnCc,EAAuBC,EAAAA,CAAeA,CAACD,oBAAoB,CAACpM,EAAO7C,MAAM,EAC/E,MAAO,GAAAqO,EAAAjL,IAAA,EAAAiL,EAAAc,QAAA,YACFf,EACD,GAAAC,EAAApM,GAAA,EAACmN,EAAAA,CAAuBA,CAAAA,CAACvN,SAAUA,EAAUC,SAAU2B,GAAKZ,EAAOsB,aAAa,CAAC,kBAAmBV,EAAEC,MAAM,CAACnE,KAAK,EAAGgD,sBAAoB,0BAA0BE,0BAAwB,gBAC3L,GAAA4L,EAAApM,GAAA,EAACoN,EAAAA,CAAiBA,CAAAA,CAACxN,SAAUA,EAAUE,cAAeoM,SAAAA,EAAsB,OAAS,QAASrM,SAAUe,EAAOgM,YAAY,CAAEtP,MAAOsD,EAAO7C,MAAM,CAAC0C,sBAAsB,CAAEH,sBAAoB,oBAAoBE,0BAAwB,gBAC1O,GAAA4L,EAAApM,GAAA,EAACqN,EAAAA,CAAqBA,CAAAA,CAACzN,SAAUA,EAAUgB,OAAQA,EAAkDjD,gBAAiBA,EAAiB2C,sBAAoB,wBAAwBE,0BAAwB,gBAC3M,GAAA4L,EAAApM,GAAA,EAACsN,EAAAA,CAAqBA,CAAAA,CAAC1N,SAAUA,EAAUgB,OAAQA,EAAQkG,WAAYoF,SAAAA,EAAsB,WAAa,YAAa5L,sBAAoB,wBAAwBE,0BAAwB,gBAC3L,GAAA4L,EAAApM,GAAA,EAACuN,EAAAA,CAAaA,CAAAA,CAAC3N,SAAU,CAACgB,EAAO4M,OAAO,EAAIR,GAAwBpN,EAAU6N,QAASxB,EAAWyB,QAAS9M,EAAO+M,UAAU,CAAE5J,QAAQ,YAAYzD,sBAAoB,gBAAgBE,0BAAwB,uBAAc,aAIlO,EC8EAoN,EAlH0B,KACxB,IAAMpG,EAAoBqG,CAAAA,EAAAA,EAAAA,EAAAA,EAAYC,EAAAA,CAAaA,CAACC,yBAAyB,EACvE,CAAC7B,EAAU8B,EAAY,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,EAAkB,QAC5C,CACJC,eAAAA,CAAc,CACdxG,eAAAA,CAAc,CACdyG,cAAAA,CAAa,CACbzC,SAAAA,CAAQ,CACR0C,eAAAA,CAAc,CACdC,kBAAAA,CAAiB,CACjB5G,oBAAAA,CAAmB,CACpB,CAAG6G,CAAAA,EAAAA,EAAAA,CAAAA,EAAiBhD,EAAiBC,WAAW,CAAE,CACjDhD,MAAO,CACL5K,gBAAiB,CACfsD,QAAS,EAAE,CACXC,UAAW,EAAE,CACbF,OAAQ,EAAE,CAEd,EACAsH,OAAQ,CACNzH,QAAS,EAAE,CACXlD,gBAAiB,CACfsD,QAAS,EAAE,CACXC,UAAW,EAAE,CACbF,OAAQ,EAAE,CAEd,CACF,GACMuN,EAAkB,MAAOC,IAC7B,GAAI,CACF,IAAMvG,EAAe,MAAMpC,EAAiB0B,eAAe,CAACC,EAAoB0E,EAAUzE,EAAqBC,EAAgBgE,EAASpD,MAAM,CAACzH,OAAO,CAAE2N,EACpJvG,CAAAA,EAAahJ,MAAM,EACrBwP,CAAAA,EAAAA,EAAAA,EAAAA,EAAgB,iBAAuFxG,MAAAA,CAAtEiE,UAAAA,EAAuB,SAAY,QAAO,8BAAoD9O,MAAA,CAAxB6K,EAAa3D,IAAI,CAAC,OAAS,CAChIoK,QAAS,GACTC,iBAAkB,GAClB5K,QAAS,OACX,EAEJ,CAAE,MAAOkG,EAAU,CACjBwE,CAAAA,EAAAA,EAAAA,EAAAA,EAAgBxE,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAK2E,OAAO,GAAI,uBAAwB,CACtD7K,QAAS,OACX,EACF,QAAU,CACRsK,EAAkB,GAClB5G,EAAoB,KACtB,CACF,EACMoH,EAAcC,CAAAA,EAAAA,EAAAA,EAAAA,EAA0B,CAC5CC,cAAe,CACbxG,MAAO,GACPD,OAAQ,GACR7H,uBAAwB,SACxBsH,wBAAyB,QACzBiH,oBAAqB,QACrBC,oBAAqB,GACrBlJ,gBAAiB,GACjBmJ,8BAA+B,GAC/B3N,QAAS,EAAE,CACXR,eAAgB,SAChB+F,WAAY,WACd,EACAqI,SAAU,MAAOpR,EAAQqR,KACvB3H,EAAoB,GACpB,MAAM8G,EAAgBxQ,GACtBqR,EAAcC,aAAa,CAAC,GAC9B,EACAC,iBAAkBC,EAAAA,EAAU,GAAGC,KAAK,CAAC,CACnClH,OAAQiH,EAAAA,EAAU,GAAGE,QAAQ,CAAC,qCAC9B1J,gBAAiBwJ,EAAAA,EAAU,GAAGE,QAAQ,CAAC,iCACvClO,QAASgO,EAAAA,EAAS,GAAGE,QAAQ,GAAGC,IAAI,CAAC,UAAW,sCAAuCnO,GAAW,CAAC,CAACA,EAAQtC,MAAM,CACpH,EACF,GACM0Q,EAAab,CAAAA,EAAAA,EAAAA,EAAAA,EAA0B,CAC3CC,cAAe,CACbxG,MAAO,GACPD,OAAQ,GACR7H,uBAAwB,SACxBsH,wBAAyB,QACzBiH,oBAAqB,QACrBC,oBAAqB,GACrBlJ,gBAAiB,GACjBmJ,8BAA+B,GAC/B3N,QAAS,EAAE,CACXR,eAAgB,SAChB+F,WAAY,WACd,EACAqI,SAAU,MAAOpR,EAAQqR,KACvB3H,EAAoB,GACpB,MAAM8G,EAAgBxQ,GACtBqR,EAAcC,aAAa,CAAC,GAC9B,EACAC,iBAAkBC,EAAAA,EAAU,GAAGC,KAAK,CAAC,CACnCjH,MAAOgH,EAAAA,EAAU,GAAGE,QAAQ,CAAC,oCAAoCC,IAAI,CAAC,QAAS,gDAAiDnH,GAASrC,EAAAA,CAAmBA,CAACmC,2BAA2B,CAACE,GAAOqH,KAAK,CAAC1L,GAAQ,CAAC,YAAYwL,IAAI,CAACxL,KAChO6B,gBAAiBwJ,EAAAA,EAAU,GAAGE,QAAQ,CAAC,iCACvClO,QAASgO,EAAAA,EAAS,GAAGE,QAAQ,GAAGC,IAAI,CAAC,UAAW,sCAAuCnO,GAAW,CAAC,CAACA,EAAQtC,MAAM,CACpH,EACF,GACA,MAAO,GAAAmN,EAAAjL,IAAA,EAAC0O,EAAAA,CAAmBA,CAAAA,CAACxR,MAAM,2BAA2ByR,YAAY,8CAA8CxP,sBAAoB,sBAAsBC,wBAAsB,gBAAgBC,0BAAwB,0BAC3N,GAAA4L,EAAApM,GAAA,EAAC+P,EAAAA,CAAoBA,CAAAA,CAAC5B,cAAeA,EAAeC,eAAgBA,EAAgB9N,sBAAoB,uBAAuBE,0BAAwB,kBACvJ,GAAA4L,EAAApM,GAAA,EAACgQ,EAAAA,CAAGA,CAAAA,CAACvM,GAAI,CACTwM,cAAe,CACjB,EAAG3P,sBAAoB,MAAME,0BAAwB,yBACjD,GAAA4L,EAAApM,GAAA,EAACkQ,EAAAA,CAAIA,CAAAA,CAACrQ,SAAU,CAAC2B,EAAGS,KACpB+L,EAAY/L,EACd,EAAG3E,MAAO4O,EAAUnI,QAAQ,YAAYzD,sBAAoB,OAAOE,0BAAwB,yBACtF,CAAE,OAAQ,QAAQ,CAA2BxC,GAAG,CAACmS,GAAa,GAAA/D,EAAApM,GAAA,EAACoQ,EAAAA,CAAGA,CAAAA,CAAiBjQ,MAAOgQ,EAAW7S,MAAO6S,GAApCA,QAG7E,GAAA/D,EAAAjL,IAAA,EAACC,EAAAA,CAAKA,CAAAA,CAACC,QAAS,EAAGf,sBAAoB,QAAQE,0BAAwB,0BACrE,GAAA4L,EAAApM,GAAA,EAACqQ,EAAOA,CAAgBzQ,SAAU,CAAC,CAACsO,GAAkBE,YAAAA,EAA8BxN,OAAQsL,SAAAA,EAAsByD,EAAad,EAAa5C,UAAW,CAAC,CAACiC,EAAgBxC,SAAUA,EAAUQ,SAAUA,EAAU5L,sBAAoB,UAAUE,0BAAwB,iBAAzP0L,GACbgC,EAAiB,GAAA9B,EAAApM,GAAA,EAACsQ,EAAAA,CAAiBA,CAAAA,CAACnQ,MAAO+N,EAAe/N,KAAK,CAAEoQ,SAAUrC,EAAeqC,QAAQ,GAAO,UAGlH,ECnHAC,EAX0B,KACxB,GAAM,CACJC,QAAAA,CAAO,CACR,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,IACJ,MAAO,GAAAtE,EAAAjL,IAAA,EAAAiL,EAAAc,QAAA,YACH,GAAAd,EAAApM,GAAA,EAAC2Q,IAAIA,CAACrQ,sBAAoB,OAAOE,0BAAwB,mBACvD,GAAA4L,EAAApM,GAAA,EAAC3B,QAAAA,UAAO,gBAAwBjB,MAAA,CAARqT,OAE1B,GAAArE,EAAApM,GAAA,EAAC4N,EAASA,CAACtN,sBAAoB,YAAYE,0BAAwB,cAEzE,4FCEO,IAAMkB,EAAwB,CAAC,SAAU,UAAW,YAAY,CA4C1Df,EAA6B,CAACiQ,EAAqBhM,IAC9D,CACG,CACCiM,WAAY,oBAAgCzT,MAAA,CAAZwT,EAAY,kBAC5CE,SAAU,gBAA4B1T,MAAA,CAAZwT,GAC1BG,OAAQ,oBAAgC3T,MAAA,CAAZwT,EAAY,IAC1C,EACD,CAAChM,EAAK","sources":["webpack://_N_E/?cc48","webpack://_N_E/./src/utils/reports/MetadataUtils.ts","webpack://_N_E/./src/utils/reports/ReportAggregationUtils.ts","webpack://_N_E/./src/components/reportFetcher/common/CSVGroupingPicker.tsx","webpack://_N_E/./src/components/reportFetcher/common/ReportDateRangePicker.tsx","webpack://_N_E/./src/components/reportFetcher/common/ReportMarketplaceSelect.tsx","webpack://_N_E/./src/utils/reports/sqp/SQPAggregationUtils.ts","webpack://_N_E/./src/utils/reports/sqp/SQPDownloadUtils.ts","webpack://_N_E/./src/utils/reports/sqp/SQPMetadataUtils.ts","webpack://_N_E/./src/components/reportFetcher/sqp/SQPForm.tsx","webpack://_N_E/./src/components/reportFetcher/sqp/SQPReport.tsx","webpack://_N_E/./src/pages/report-fetcher/sqp.tsx","webpack://_N_E/../../packages/seller-utilities/types/src/api/reports/common.ts"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/report-fetcher/sqp\",\n      function () {\n        return require(\"private-next-pages/report-fetcher/sqp.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/report-fetcher/sqp\"])\n      });\n    }\n  ","import type { MetadataValue } from '@seller-utilities/types';\nimport moment from 'moment-timezone';\n\ninterface MappedPeriod {\n  date: moment.Moment;\n  title: string;\n}\n\nexport default class MetadataUtils {\n  private static readonly transformWeeklyDateString = (input: string): string => {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'] as const;\n\n    // Split the input string into individual parts\n    const parts = input.split(' | ');\n    const weekPart: string = parts[0];\n    const datePart = parts[1].split(', ');\n    const dateRange = datePart[0].split(' - ');\n    const year = datePart[1];\n\n    // Extract week number from \"Week 12\" or \"Week 47\"\n    const weekNumber: string = weekPart.replace(/Week\\s/, '');\n\n    // Split the date range into start and end dates\n    const [startDate, endDate]: Array<string> = dateRange;\n\n    // Convert start and end dates to Date objects\n    const startDateObj: Date = new Date(startDate);\n    const endDateObj: Date = new Date(endDate);\n\n    // Get month names and dates\n    const startMonth = months[startDateObj.getMonth()];\n    const startDay = startDateObj.getDate();\n    const endMonth = months[endDateObj.getMonth()];\n    const endDay = endDateObj.getDate();\n\n    // Construct the new formatted string\n    return `W${weekNumber} | ${startMonth} ${startDay}, ${year} - ${endMonth} ${endDay}, ${year}`;\n  };\n\n  private static readonly transformMonthlyDateString = (value: string, month: string) => {\n    const year = value.split('-')[0];\n    return `${month} ${year}`;\n  };\n\n  private static readonly transformQuarterlyDateString = (value: string, quarter: string) => {\n    const year = value.split('-')[0];\n    return `Q${quarter} ${year}`;\n  };\n\n  static readonly mapWeeklyPeriods = (reportingRanges?: Array<MetadataValue>) =>\n    reportingRanges\n      ?.find((item) => item.value === 'weekly')\n      ?.child?.values?.map(({ value, localizedDisplayValue }: { value: string; localizedDisplayValue: string }) => ({\n        date: moment.utc(value),\n        title: this.transformWeeklyDateString(localizedDisplayValue)\n      })) ?? [];\n\n  static readonly mapMonthlyPeriods = (reportingRanges?: Array<MetadataValue>) =>\n    reportingRanges\n      ?.find((item) => item.value === 'monthly')\n      ?.child?.values?.reduce((months, currentYear) => {\n        const values =\n          currentYear?.child?.values.map(\n            ({ value, localizedDisplayValue }: { value: string; localizedDisplayValue: string }) => ({\n              date: moment.utc(value),\n              title: this.transformMonthlyDateString(value, localizedDisplayValue)\n            })\n          ) ?? [];\n\n        return months.concat(values);\n      }, [] as Array<MappedPeriod>) ?? [];\n\n  static readonly mapQuarterlyPeriods = (reportingRanges?: Array<MetadataValue>) =>\n    reportingRanges\n      ?.find((item) => item.value === 'quarterly')\n      ?.child?.values?.reduce((quarter, currentYear) => {\n        const values =\n          currentYear?.child?.values.map(\n            ({ value, localizedDisplayValue }: { value: string; localizedDisplayValue: string }) => ({\n              date: moment.utc(value),\n              title: this.transformQuarterlyDateString(value, localizedDisplayValue)\n            })\n          ) ?? [];\n\n        return quarter.concat(values);\n      }, [] as Array<MappedPeriod>) ?? [];\n}\n","import { NumberUtils } from '@riptech/utils';\n\nexport default class ReportAggregationUtils {\n  static readonly sum = (nums: Array<number>): number => nums.reduce((acc, val) => acc + val, 0);\n\n  static readonly average = (nums: Array<number>, precision: number) => {\n    if (!nums.length) {\n      return '';\n    }\n\n    const total = this.sum(nums);\n    const result = total / nums.length;\n    return NumberUtils.roundToDecimalPoints(result, precision);\n  };\n\n  static readonly calculatePercentage = (numerator: number, denominator: number) =>\n    NumberUtils.formatPercentage(numerator / (denominator || 1));\n}\n","import { MenuItem, TextField } from '@mui/material';\nimport type { ReportFileGroupingType, SCPReportForm } from '@seller-utilities/types';\nimport { getReportFileGroupingLabel } from '@seller-utilities/types';\nimport type { ChangeEvent, FC } from 'react';\ninterface CSVGroupingPickerProps {\n  readonly disabled: boolean;\n  readonly value: ReportFileGroupingType;\n  readonly onChange: (e: ChangeEvent) => void;\n  readonly groupingLabel: string;\n}\nconst CSVGroupingPicker: FC<CSVGroupingPickerProps> = ({\n  disabled,\n  value,\n  onChange,\n  groupingLabel\n}) => <TextField disabled={disabled} fullWidth label=\"CSV grouping\" name=\"reportFileGroupingType\" onChange={onChange} select value={value} data-sentry-element=\"TextField\" data-sentry-component=\"CSVGroupingPicker\" data-sentry-source-file=\"CSVGroupingPicker.tsx\">\n    {(['Single', 'Multiple', 'Aggregated'] satisfies Array<SCPReportForm['reportFileGroupingType']>).map(reportFileGroupingType => <MenuItem key={reportFileGroupingType} value={reportFileGroupingType}>\n          {getReportFileGroupingLabel(groupingLabel, reportFileGroupingType)}\n        </MenuItem>)}\n  </TextField>;\nexport default CSVGroupingPicker;","import { Autocomplete, Checkbox, MenuItem, Stack, TextField } from '@mui/material';\nimport type { BaseReportForm, ReportingRanges, SQPFetcherForm } from '@seller-utilities/types';\nimport { REPORTING_RANGE_TYPES } from '@seller-utilities/types';\nimport type { FormikProps } from 'formik';\nimport type { ChangeEvent, FC } from 'react';\nimport { useMemo } from 'react';\ninterface ReportDateRangePickerProps {\n  readonly disabled: boolean;\n  readonly formik: FormikProps<BaseReportForm>;\n  readonly reportingRanges: ReportingRanges;\n}\nconst ReportDateRangePicker: FC<ReportDateRangePickerProps> = ({\n  disabled,\n  formik,\n  reportingRanges\n}) => {\n  const handleChangeRangeType = (e: ChangeEvent<HTMLInputElement>) => {\n    formik.setValues({\n      ...formik.values,\n      periods: [],\n      reportingRange: e.target.value as SQPFetcherForm['reportingRange']\n    });\n  };\n  const {\n    label,\n    options\n  } = useMemo(() => {\n    switch (formik.values.reportingRange) {\n      case 'Weekly':\n        return {\n          label: 'Weeks',\n          options: reportingRanges?.weekly\n        };\n      case 'Monthly':\n        return {\n          label: 'Months',\n          options: reportingRanges?.monthly\n        };\n      case 'Quarterly':\n        return {\n          label: 'Quarters',\n          options: reportingRanges?.quarterly\n        };\n      default:\n        throw new Error('Unknown reporting range type');\n    }\n  }, [formik.values.reportingRange, reportingRanges]);\n  return <Stack spacing={2} data-sentry-element=\"Stack\" data-sentry-component=\"ReportDateRangePicker\" data-sentry-source-file=\"ReportDateRangePicker.tsx\">\n      <TextField disabled={disabled} fullWidth label=\"Reporting range\" name=\"rangeType\" onChange={handleChangeRangeType} select value={formik.values.reportingRange} data-sentry-element=\"TextField\" data-sentry-source-file=\"ReportDateRangePicker.tsx\">\n        {REPORTING_RANGE_TYPES.map(rangeTypeItem => <MenuItem key={rangeTypeItem} value={rangeTypeItem}>\n            {rangeTypeItem}\n          </MenuItem>)}\n      </TextField>\n      <Autocomplete disableCloseOnSelect disabled={disabled} fullWidth getOptionLabel={option => option.title} multiple onChange={(e, v) => formik.setFieldValue('periods', v)} options={options} renderInput={params => <TextField {...params} label={label} placeholder={`Search and select ${label.toLowerCase()}`} />} renderOption={(props, option, {\n      selected\n    }) => <li {...props} key={option.title}>\n            <Checkbox checked={selected} style={{\n        marginRight: 8\n      }} />\n            {option.title}\n          </li>} value={formik.values.periods} data-sentry-element=\"Autocomplete\" data-sentry-source-file=\"ReportDateRangePicker.tsx\" />\n    </Stack>;\n};\nexport default ReportDateRangePicker;","import type { TextFieldProps } from '@mui/material';\nimport { Avatar, MenuItem, Stack, TextField, Typography } from '@mui/material';\nimport { Iconify } from '@riptech/minimal-ui/src/components/iconify';\nimport { SUPPORTED_MARKETPLACES } from '@seller-utilities/database';\nimport type { FC } from 'react';\ninterface ReportMarketplaceSelectProps {\n  readonly disabled: boolean;\n  readonly onChange: TextFieldProps['onChange'];\n}\nconst ReportMarketplaceSelect: FC<ReportMarketplaceSelectProps> = ({\n  disabled,\n  onChange\n}) => <TextField disabled={disabled} fullWidth label=\"Marketplace\" onChange={onChange} placeholder=\"Search and select marketplaces\" select data-sentry-element=\"TextField\" data-sentry-component=\"ReportMarketplaceSelect\" data-sentry-source-file=\"ReportMarketplaceSelect.tsx\">\n    {Object.entries(SUPPORTED_MARKETPLACES).map(([code, {\n    name\n  }]) => <MenuItem key={name} value={code}>\n        <Stack alignItems=\"center\" direction=\"row\" spacing={1}>\n          <Avatar sx={{\n        height: 24,\n        width: 24\n      }}>\n            <Iconify icon={`circle-flags:${code}`} sx={{\n          height: '100%',\n          width: '100%'\n        }} />\n          </Avatar>\n          <Typography variant=\"body2\">{name}</Typography>\n        </Stack>\n      </MenuItem>)}\n  </TextField>;\nexport default ReportMarketplaceSelect;","import type { Arrayify, SQPASINDataRow, SQPBrandsDataRow } from '@seller-utilities/types';\n\nimport type SQPRequestUtils from '../../request/SellerCentralRequest/utils/SQPRequestUtils';\nimport ReportAggregationUtils from '../ReportAggregationUtils';\n\ntype AggregatedASINDataRow = Arrayify<SQPASINDataRow>;\ntype AggregatedBrandDataRow = Arrayify<SQPBrandsDataRow>;\n\nexport default class SQPAggregationUtils {\n  private static readonly ASIN_AGGREGATORS: Record<\n    keyof typeof SQPRequestUtils.SQP_ASIN_DATA_COLUMNS,\n    (asinData: AggregatedASINDataRow) => number | string | undefined\n  > = {\n    asin: (asinData) => asinData.asin[0],\n    'qp-asin-query': (asinData) => asinData['qp-asin-query'][0],\n    'qp-asin-query-rank': (asinData) =>\n      ReportAggregationUtils.average(asinData['qp-asin-query-rank'] as unknown as Array<number>, 0),\n    'qp-asin-query-volume': (asinData) => ReportAggregationUtils.sum(asinData['qp-asin-query-volume']),\n    'qp-asin-impressions': (asinData) => ReportAggregationUtils.sum(asinData['qp-asin-impressions']),\n    'qp-asin-count-impressions': (asinData) => ReportAggregationUtils.sum(asinData['qp-asin-count-impressions']),\n    'qp-asin-share-impressions': (asinData) =>\n      ReportAggregationUtils.calculatePercentage(\n        ReportAggregationUtils.sum(asinData['qp-asin-count-impressions']),\n        ReportAggregationUtils.sum(asinData['qp-asin-impressions'])\n      ),\n    'qp-asin-clicks': (asinData) => ReportAggregationUtils.sum(asinData['qp-asin-clicks']),\n    'qp-click-rate': (asinData) =>\n      ReportAggregationUtils.calculatePercentage(\n        ReportAggregationUtils.sum(asinData['qp-asin-clicks']),\n        ReportAggregationUtils.sum(asinData['qp-asin-query-volume'])\n      ),\n    'qp-asin-count-clicks': (asinData) => ReportAggregationUtils.sum(asinData['qp-asin-count-clicks']),\n    'qp-asin-share-clicks': (asinData) =>\n      ReportAggregationUtils.calculatePercentage(\n        ReportAggregationUtils.sum(asinData['qp-asin-count-clicks']),\n        ReportAggregationUtils.sum(asinData['qp-asin-clicks'])\n      ),\n    'qp-asin-median-query-price-clicks': (asinData) =>\n      ReportAggregationUtils.average(asinData['qp-asin-median-query-price-clicks'], 2),\n    'qp-asin-median-price-clicks': (asinData) =>\n      ReportAggregationUtils.average(asinData['qp-asin-median-price-clicks'], 2),\n    'qp-asin-same-day-shipping-clicks': (asinData) =>\n      ReportAggregationUtils.sum(asinData['qp-asin-same-day-shipping-clicks']),\n    'qp-asin-one-day-shipping-clicks': (asinData) =>\n      ReportAggregationUtils.sum(asinData['qp-asin-one-day-shipping-clicks']),\n    'qp-asin-two-day-shipping-clicks': (asinData) =>\n      ReportAggregationUtils.sum(asinData['qp-asin-two-day-shipping-clicks']),\n    'qp-asin-cart-adds': (asinData) => ReportAggregationUtils.sum(asinData['qp-asin-cart-adds']),\n    'qp-asin-cart-add-rate': (asinData) =>\n      ReportAggregationUtils.calculatePercentage(\n        ReportAggregationUtils.sum(asinData['qp-asin-cart-adds']),\n        ReportAggregationUtils.sum(asinData['qp-asin-query-volume'])\n      ),\n    'qp-asin-count-cart-adds': (asinData) => ReportAggregationUtils.sum(asinData['qp-asin-count-cart-adds']),\n    'qp-asin-share-cart-adds': (asinData) =>\n      ReportAggregationUtils.calculatePercentage(\n        ReportAggregationUtils.sum(asinData['qp-asin-count-cart-adds']),\n        ReportAggregationUtils.sum(asinData['qp-asin-cart-adds'])\n      ),\n    'qp-asin-median-query-price-cart-adds': (asinData) =>\n      ReportAggregationUtils.average(asinData['qp-asin-median-query-price-cart-adds'], 2),\n    'qp-asin-median-price-cart-adds': (asinData) =>\n      ReportAggregationUtils.average(asinData['qp-asin-median-price-cart-adds'], 2),\n    'qp-asin-same-day-shipping-cart-adds': (asinData) =>\n      ReportAggregationUtils.sum(asinData['qp-asin-same-day-shipping-cart-adds']),\n    'qp-asin-one-day-shipping-cart-adds': (asinData) =>\n      ReportAggregationUtils.sum(asinData['qp-asin-one-day-shipping-cart-adds']),\n    'qp-asin-two-day-shipping-cart-adds': (asinData) =>\n      ReportAggregationUtils.sum(asinData['qp-asin-two-day-shipping-cart-adds']),\n    'qp-asin-purchases': (asinData) => ReportAggregationUtils.sum(asinData['qp-asin-purchases']),\n    'qp-asin-purchase-rate': (asinData) =>\n      ReportAggregationUtils.calculatePercentage(\n        ReportAggregationUtils.sum(asinData['qp-asin-purchases']),\n        ReportAggregationUtils.sum(asinData['qp-asin-query-volume'])\n      ),\n    'qp-asin-count-purchases': (asinData) => ReportAggregationUtils.sum(asinData['qp-asin-count-purchases']),\n    'qp-asin-share-purchases': (asinData) =>\n      ReportAggregationUtils.calculatePercentage(\n        ReportAggregationUtils.sum(asinData['qp-asin-count-purchases']),\n        ReportAggregationUtils.sum(asinData['qp-asin-purchases'])\n      ),\n    'qp-asin-median-query-price-purchases': (asinData) =>\n      ReportAggregationUtils.average(asinData['qp-asin-median-query-price-purchases'], 2),\n    'qp-asin-median-price-purchases': (asinData) =>\n      ReportAggregationUtils.average(asinData['qp-asin-median-price-purchases'], 2),\n    'qp-asin-same-day-shipping-purchases': (asinData) =>\n      ReportAggregationUtils.average(asinData['qp-asin-same-day-shipping-purchases'], 2),\n    'qp-asin-one-day-shipping-purchases': (asinData) =>\n      ReportAggregationUtils.average(asinData['qp-asin-one-day-shipping-purchases'], 2),\n    'qp-asin-two-day-shipping-purchases': (asinData) =>\n      ReportAggregationUtils.average(asinData['qp-asin-two-day-shipping-purchases'], 2),\n    marketplace: (asinData) => asinData.marketplace[0],\n    period: (asinData) => asinData.period.join(';')\n  };\n\n  private static readonly BRAND_AGGREGATORS: Record<\n    keyof typeof SQPRequestUtils.SQP_BRAND_DATA_COLUMNS,\n    (asinData: AggregatedBrandDataRow) => number | string | undefined\n  > = {\n    brand: (brandData) => brandData.brand[0],\n    'qp-brand-query': (brandData) => brandData['qp-brand-query'][0],\n    'qp-query-rank': (brandData) =>\n      ReportAggregationUtils.average(brandData['qp-query-rank'] as unknown as Array<number>, 0),\n    'qp-query-volume': (brandData) => ReportAggregationUtils.sum(brandData['qp-query-volume']),\n    'qp-impressions': (brandData) => ReportAggregationUtils.sum(brandData['qp-impressions']),\n    'qp-brand-count-impressions': (brandData) => ReportAggregationUtils.sum(brandData['qp-brand-count-impressions']),\n    'qp-brand-share-impressions': (brandData) =>\n      ReportAggregationUtils.calculatePercentage(\n        ReportAggregationUtils.sum(brandData['qp-brand-count-impressions']),\n        ReportAggregationUtils.sum(brandData['qp-impressions'])\n      ),\n    'qp-clicks': (brandData) => ReportAggregationUtils.sum(brandData['qp-clicks']),\n    'qp-click-rate': (brandData) =>\n      ReportAggregationUtils.calculatePercentage(\n        ReportAggregationUtils.sum(brandData['qp-clicks']),\n        ReportAggregationUtils.sum(brandData['qp-query-volume'])\n      ),\n    'qp-brand-count-clicks': (brandData) => ReportAggregationUtils.sum(brandData['qp-brand-count-clicks']),\n    'qp-brand-share-clicks': (brandData) =>\n      ReportAggregationUtils.calculatePercentage(\n        ReportAggregationUtils.sum(brandData['qp-brand-count-clicks']),\n        ReportAggregationUtils.sum(brandData['qp-clicks'])\n      ),\n    'qp-clicks-price': (brandData) => ReportAggregationUtils.average(brandData['qp-clicks-price'], 2),\n    'qp-clicks-brand-price': (brandData) => ReportAggregationUtils.average(brandData['qp-clicks-brand-price'], 2),\n    'qp-same-day-shipping-clicks': (brandData) => ReportAggregationUtils.sum(brandData['qp-same-day-shipping-clicks']),\n    'qp-one-day-shipping-clicks': (brandData) => ReportAggregationUtils.sum(brandData['qp-one-day-shipping-clicks']),\n    'qp-two-day-shipping-clicks': (brandData) => ReportAggregationUtils.sum(brandData['qp-two-day-shipping-clicks']),\n    'qp-cart-adds': (brandData) => ReportAggregationUtils.sum(brandData['qp-cart-adds']),\n    'qp-cart-add-rate': (brandData) =>\n      ReportAggregationUtils.calculatePercentage(\n        ReportAggregationUtils.sum(brandData['qp-cart-adds']),\n        ReportAggregationUtils.sum(brandData['qp-query-volume'])\n      ),\n    'qp-cart-adds-brand-count': (brandData) => ReportAggregationUtils.sum(brandData['qp-cart-adds-brand-count']),\n    'qp-cart-adds-brand-share': (brandData) =>\n      ReportAggregationUtils.calculatePercentage(\n        ReportAggregationUtils.sum(brandData['qp-cart-adds-brand-count']),\n        ReportAggregationUtils.sum(brandData['qp-cart-adds'])\n      ),\n    'qp-cart-adds-price': (brandData) => ReportAggregationUtils.average(brandData['qp-cart-adds-price'], 2),\n    'qp-same-day-shipping-cart-adds': (brandData) =>\n      ReportAggregationUtils.sum(brandData['qp-same-day-shipping-cart-adds']),\n    'qp-one-day-shipping-cart-adds': (brandData) =>\n      ReportAggregationUtils.sum(brandData['qp-one-day-shipping-cart-adds']),\n    'qp-two-day-shipping-cart-adds': (brandData) =>\n      ReportAggregationUtils.sum(brandData['qp-two-day-shipping-cart-adds']),\n    'qp-purchases': (brandData) => ReportAggregationUtils.sum(brandData['qp-purchases']),\n    'qp-purchase-rate': (brandData) =>\n      ReportAggregationUtils.calculatePercentage(\n        ReportAggregationUtils.sum(brandData['qp-purchases']),\n        ReportAggregationUtils.sum(brandData['qp-query-volume'])\n      ),\n    'qp-purchases-brand-count': (brandData) => ReportAggregationUtils.sum(brandData['qp-purchases-brand-count']),\n    'qp-purchases-brand-share': (brandData) =>\n      ReportAggregationUtils.calculatePercentage(\n        ReportAggregationUtils.sum(brandData['qp-purchases-brand-count']),\n        ReportAggregationUtils.sum(brandData['qp-purchases'])\n      ),\n    'qp-purchase-price': (brandData) => ReportAggregationUtils.average(brandData['qp-purchase-price'], 2),\n    'qp-purchases-brand-price': (brandData) => ReportAggregationUtils.average(brandData['qp-purchases-brand-price'], 2),\n    'qp-same-day-shipping-purchases': (brandData) =>\n      ReportAggregationUtils.average(brandData['qp-same-day-shipping-purchases'], 2),\n    'qp-one-day-shipping-purchases': (brandData) =>\n      ReportAggregationUtils.average(brandData['qp-one-day-shipping-purchases'], 2),\n    'qp-two-day-shipping-purchases': (brandData) =>\n      ReportAggregationUtils.average(brandData['qp-two-day-shipping-purchases'], 2),\n    marketplace: (brandData) => brandData.marketplace[0],\n    period: (brandData) => brandData.period.join(';')\n  };\n\n  static aggregateData = (\n    sqpRows: Array<SQPASINDataRow & SQPBrandsDataRow>,\n    type: 'asin' | 'brand'\n  ): Array<SQPASINDataRow | SQPBrandsDataRow> => {\n    const rowMap = new Map<string, AggregatedASINDataRow & AggregatedBrandDataRow>();\n\n    sqpRows.forEach(({ [type]: asinOrBrand, [`qp-${type}-query` as const]: query, marketplace, period, ...rest }) => {\n      const key = `${asinOrBrand} ${query}`;\n\n      if (!rowMap.has(key)) {\n        const newValues: Partial<AggregatedASINDataRow & AggregatedBrandDataRow> = {\n          marketplace: [marketplace],\n          period: [],\n          [`qp-${type}-query` as const]: [query],\n          [type]: [asinOrBrand]\n        };\n\n        rowMap.set(key, newValues as AggregatedASINDataRow & AggregatedBrandDataRow);\n      }\n\n      const values = rowMap.get(key)!;\n      values.period.push(period);\n      Object.entries(rest).forEach(([restKey, value]) => {\n        if (!(restKey in values) || value === '-') {\n          values[restKey as keyof typeof rest] = [];\n        }\n        if (value !== '-') {\n          (values[restKey as keyof typeof rest] as Array<number>).push(+value);\n        }\n      });\n    });\n\n    const aggregators = type === 'asin' ? this.ASIN_AGGREGATORS : this.BRAND_AGGREGATORS;\n    return Array.from(rowMap.values()).map((brandData) => {\n      const aggregatedRow: Record<string, string> = {};\n      (Object.keys(aggregators) as Array<keyof typeof aggregators>).forEach((key) => {\n        aggregatedRow[key] = String(aggregators[key](brandData));\n      });\n\n      if (type === 'asin') {\n        return aggregatedRow as unknown as SQPASINDataRow;\n      }\n\n      return aggregatedRow as unknown as SQPBrandsDataRow;\n    });\n  };\n}\n","import Utils, { NA_TIMEZONE } from '@riptech/utils';\nimport { type SellerCentralMarketplace, SUPPORTED_MARKETPLACES } from '@seller-utilities/database';\nimport type { SQPASINDataRow, SQPBrandsDataRow, SQPFetcherForm, SQPMetadata, SQPType } from '@seller-utilities/types';\nimport _ from 'lodash';\nimport type { Moment } from 'moment-timezone';\nimport moment from 'moment-timezone';\n\nimport type { DownloadReportInputType } from '../../../components/reportFetcher/useReportFetcher';\nimport SellerCentralRequestManager from '../../request/SellerCentralRequest/SellerCentralRequestManager';\nimport SQPRequestUtils from '../../request/SellerCentralRequest/utils/SQPRequestUtils';\nimport ReportDownloadUtils from '../ReportDownloadUtils';\nimport SQPAggregationUtils from './SQPAggregationUtils';\n\nexport default class SQPDownloadUtils {\n  private static readonly generateSingleFetchInput = (\n    marketplaceCode: SellerCentralMarketplace,\n    reportingRange: SQPFetcherForm['reportingRange'],\n    value: string,\n    type: SQPType,\n    periodEndDate: Moment\n  ) => {\n    const rangeFilters = ReportDownloadUtils.getRangeFiltersByReportingRange(reportingRange, periodEndDate);\n\n    const isASIN = type === 'ASIN';\n    const payload = {\n      filterSelections: [\n        { id: isASIN ? 'asin' : 'brand', value, valueType: isASIN ? 'ASIN' : null },\n        { id: 'reporting-range', value: reportingRange.toLowerCase(), valueType: null },\n        ...rangeFilters\n      ],\n      reportId: isASIN ? 'query-performance-asin-report-table' : 'query-performance-brand-report-table',\n      reportOperations: [\n        {\n          ascending: true,\n          pageNumber: 1,\n          pageSize: 100,\n          reportId: isASIN ? 'query-performance-asin-report-table' : 'query-performance-brand-report-table',\n          reportType: 'TABLE',\n          sortByColumnId: isASIN ? 'qp-asin-query-rank' : 'qp-query-rank'\n        }\n      ],\n      selectedCountries: [marketplaceCode],\n      viewId: isASIN ? 'query-performance-asin-view' : 'query-performance-brands-view'\n    } as const;\n\n    return { payload, periodEndDate: periodEndDate.toISOString() };\n  };\n\n  private static readonly generateAPIInputs = (\n    marketplaceCode: SellerCentralMarketplace,\n    periodEndDates: Array<string>,\n    reportingRange: SQPFetcherForm['reportingRange'],\n    type: SQPType,\n    values: Array<string>\n  ) => {\n    const response: Record<\n      string,\n      Array<{ payload: ReturnType<typeof SQPDownloadUtils.generateSingleFetchInput>['payload']; periodEndDate: string }>\n    > = {};\n\n    values.forEach((value) => {\n      response[value] = periodEndDates.map((periodEndDate) =>\n        this.generateSingleFetchInput(\n          marketplaceCode,\n          reportingRange,\n          value,\n          type,\n          moment.tz(periodEndDate, NA_TIMEZONE)\n        )\n      );\n    });\n\n    return response;\n  };\n\n  static downloadAllData = async (\n    activeMarketplace: SellerCentralMarketplace,\n    type: SQPType,\n    setDownloadProgress: (newProgress: number) => void,\n    downloadReport: (options: DownloadReportInputType) => void,\n    brandNames: SQPMetadata['brands']['options'],\n    sqpFormData: SQPFetcherForm\n  ) => {\n    const isBrands = type === 'Brand';\n\n    const {\n      marketplaceCode,\n      reportingRange,\n      reportFileGroupingType,\n      downloadDestinationType: downloadDestination\n    } = sqpFormData;\n\n    const failedValues = [];\n    const combinedCSVData = [];\n\n    const apiInputs = this.generateAPIInputs(\n      marketplaceCode,\n      sqpFormData.periods.map(({ date }) => date.utc().toISOString()),\n      reportingRange,\n      type,\n      ReportDownloadUtils.convertMultilineTextToArray(type === 'Brand' ? sqpFormData.brands : sqpFormData.asins)\n    );\n\n    const COLUMNS = isBrands ? SQPRequestUtils.SQP_BRAND_DATA_COLUMNS : SQPRequestUtils.SQP_ASIN_DATA_COLUMNS;\n\n    const NUM_PAGES = isBrands ? 10 : 1;\n    const apiInputsEntries = Object.entries(apiInputs);\n    const totalAPICalls = apiInputsEntries.length * (apiInputsEntries[0]?.[1]?.length || 0) * NUM_PAGES;\n\n    for (const [i, [value, fetchData]] of apiInputsEntries.entries()) {\n      const returnData = [];\n\n      let hadError = false;\n      for (const [j, { payload: singlePayload, periodEndDate }] of fetchData.entries()) {\n        const payloads = _.range(NUM_PAGES).map((pageNumIndex) =>\n          _.cloneDeep({\n            ...singlePayload,\n            reportOperations: singlePayload.reportOperations.map((operation) => ({\n              ...operation,\n              pageNumber: pageNumIndex + 1\n            }))\n          })\n        );\n\n        const combinedPayloadData: Array<SQPASINDataRow & SQPBrandsDataRow> = [];\n        for (const [k, payload] of payloads.entries()) {\n          try {\n            const { rows } = await SellerCentralRequestManager.fetchSQPAPIData(activeMarketplace, payload, isBrands);\n            rows.forEach((row) => {\n              if (isBrands) {\n                row.brand = brandNames.find((brand) => brand.value === value)?.localizedDisplayValue ?? value;\n              } else {\n                row.asin = value;\n              }\n              row.marketplace = SUPPORTED_MARKETPLACES[marketplaceCode].name;\n              row.period = ReportDownloadUtils.getFormattedPeriod(reportingRange, periodEndDate);\n\n              // Wrap 'Search Query' in quotes if it contains a comma\n              const queryKey = isBrands\n                ? ('qp-brand-query' satisfies keyof SQPBrandsDataRow)\n                : ('qp-asin-query' satisfies keyof SQPASINDataRow);\n              ReportDownloadUtils.sanitizeValuesWithComma([queryKey], row);\n            });\n\n            combinedPayloadData.push(...rows);\n          } catch (err: unknown) {\n            ReportDownloadUtils.handleNetworkError(err);\n            hadError = true;\n            if (isBrands) {\n              failedValues.push(brandNames.find((brand) => brand.value === value)?.localizedDisplayValue ?? value);\n            } else {\n              failedValues.push(value);\n            }\n\n            break;\n          } finally {\n            const currentIteration = NUM_PAGES * (i * fetchData.length + j) + (k + 1);\n\n            setDownloadProgress((currentIteration / totalAPICalls) * 100);\n\n            const sleepTime =\n              i !== apiInputsEntries.length - 1 || j !== fetchData.length - 1 || k !== payloads.length - 1\n                ? ReportDownloadUtils.getSellerCentralSleepTime()\n                : 0;\n            await Utils.sleep(sleepTime);\n          }\n        }\n\n        if (hadError) {\n          break;\n        } else {\n          const queryRankKey = isBrands ? 'qp-query-rank' : 'qp-asin-query-rank';\n          returnData.push(\n            ...combinedPayloadData.sort((a, b) => parseInt(a[queryRankKey], 10) - parseInt(b[queryRankKey], 10))\n          );\n        }\n      }\n\n      if (!hadError) {\n        if (reportFileGroupingType === 'Multiple') {\n          downloadReport({\n            ...(downloadDestination !== 'Local'\n              ? {\n                  ...(downloadDestination === 'Google Sheet'\n                    ? { csvData: returnData }\n                    : {\n                        sheetDataToWriteToDrive: ReportDownloadUtils.generateSheetData<typeof COLUMNS>(\n                          returnData,\n                          COLUMNS\n                        )\n                      })\n                }\n              : { csvText: ReportDownloadUtils.generateCSVText<typeof COLUMNS>(returnData, COLUMNS) }),\n            fileName: `${value}-sqp-data-${moment().toISOString().split('.')[0]}`,\n            destination: downloadDestination,\n            reportFormData: sqpFormData\n          });\n        } else {\n          combinedCSVData.push(...returnData);\n        }\n      }\n    }\n\n    if (reportFileGroupingType !== 'Multiple' && failedValues.length !== apiInputsEntries.length) {\n      const isAggregated = reportFileGroupingType === 'Aggregated';\n      const csvData = isAggregated\n        ? SQPAggregationUtils.aggregateData(combinedCSVData, isBrands ? 'brand' : 'asin')\n        : combinedCSVData;\n      downloadReport({\n        ...(downloadDestination !== 'Local'\n          ? {\n              ...(downloadDestination === 'Google Sheet'\n                ? { csvData }\n                : {\n                    sheetDataToWriteToDrive: ReportDownloadUtils.generateSheetData<typeof COLUMNS>(\n                      isAggregated\n                        ? SQPAggregationUtils.aggregateData(combinedCSVData, isBrands ? 'brand' : 'asin')\n                        : combinedCSVData,\n                      COLUMNS\n                    )\n                  })\n            }\n          : {\n              csvText: ReportDownloadUtils.generateCSVText<typeof COLUMNS>(\n                isAggregated\n                  ? SQPAggregationUtils.aggregateData(combinedCSVData, isBrands ? 'brand' : 'asin')\n                  : combinedCSVData,\n                COLUMNS\n              )\n            }),\n        fileName: `multi-${isBrands ? 'brand' : 'asin'}${isAggregated ? '-agg' : ''}-sqp-data-${moment().toISOString().split('.')[0]}`,\n        destination: downloadDestination,\n        reportFormData: sqpFormData\n      });\n    }\n\n    return failedValues;\n  };\n}\n","import type { SellerCentralMarketplace } from '@seller-utilities/database';\nimport type { SQPMetadata } from '@seller-utilities/types';\n\nimport SellerCentralRequestManager from '../../request/SellerCentralRequest/SellerCentralRequestManager';\nimport MetadataUtils from '../MetadataUtils';\n\nexport default class SQPMetadataUtils {\n  static getMetadata = async (activeMarketplace: SellerCentralMarketplace): Promise<SQPMetadata> => {\n    const response = await SellerCentralRequestManager.fetchSQPMetadata(activeMarketplace);\n\n    const brandsMetadata = response?.metadata?.viewsRoot?.views.find(\n      (item: any) => item.id === 'query-performance-brands-view'\n    );\n    const asinReportingRanges = response?.metadata?.viewsRoot?.views\n      ?.find((item: any) => item.id === 'query-performance-asin-view')\n      ?.filters?.find((item: any) => item.id === 'reporting-range')?.values;\n\n    const brands = brandsMetadata?.filters.find((item: any) => item.id === 'brand')?.values ?? [];\n    const brandsReportingRanges = brandsMetadata?.filters.find((item: any) => item.id === 'reporting-range')?.values;\n\n    return {\n      asins: {\n        reportingRanges: {\n          monthly: MetadataUtils.mapMonthlyPeriods(asinReportingRanges),\n          quarterly: MetadataUtils.mapQuarterlyPeriods(asinReportingRanges),\n          weekly: MetadataUtils.mapWeeklyPeriods(asinReportingRanges)\n        }\n      },\n      brands: {\n        options: brands,\n        reportingRanges: {\n          monthly: MetadataUtils.mapMonthlyPeriods(brandsReportingRanges),\n          quarterly: MetadataUtils.mapQuarterlyPeriods(brandsReportingRanges),\n          weekly: MetadataUtils.mapWeeklyPeriods(brandsReportingRanges)\n        }\n      }\n    };\n  };\n}\n","import { LoadingButton } from '@mui/lab';\nimport { Autocomplete, Checkbox, TextField } from '@mui/material';\nimport type { BaseReportForm, SQPFetcherForm, SQPMetadata, SQPType } from '@seller-utilities/types';\nimport type { FormikProps } from 'formik';\nimport type { FC } from 'react';\nimport { useMemo } from 'react';\nimport ReportFormUtils from '../../../utils/reports/ReportFormUtils';\nimport DataDestinationPicker from '../../dataDestination/DataDestinationPicker';\nimport CSVGroupingPicker from '../common/CSVGroupingPicker';\nimport ReportDateRangePicker from '../common/ReportDateRangePicker';\nimport ReportMarketplaceSelect from '../common/ReportMarketplaceSelect';\ninterface SQPFormProps {\n  readonly isLoading: boolean;\n  readonly tabValue: SQPType;\n  readonly formik: FormikProps<SQPFetcherForm>;\n  readonly disabled: boolean;\n  readonly metadata: SQPMetadata;\n}\nconst SQPForm: FC<SQPFormProps> = ({\n  isLoading,\n  tabValue,\n  formik,\n  disabled,\n  metadata\n}) => {\n  const reportingRanges = tabValue === 'ASIN' ? metadata?.asins?.reportingRanges : metadata?.brands?.reportingRanges;\n  const inputTextField = useMemo(() => {\n    if (tabValue === 'ASIN') {\n      return <TextField disabled={disabled} error={!!(formik.errors.asins && formik.touched.asins)} fullWidth helperText={formik.touched.asins ? formik.errors.asins : null} id=\"asins\" label=\"Enter ASINs separated by new lines\" multiline name=\"asins\" onBlur={formik.handleBlur} onChange={formik.handleChange} rows={8} value={formik.values.asins} variant=\"outlined\" />;\n    }\n    return <Autocomplete disableCloseOnSelect disabled={disabled} fullWidth getOptionLabel={option => option?.localizedDisplayValue} multiple onChange={(_, selectedOptions) => {\n      const selectedBrands = selectedOptions.map(option => option.value).join('\\n');\n      formik.setFieldValue('brands', selectedBrands);\n    }} options={metadata?.brands?.options || []} renderInput={params => <TextField {...params} label=\"Brands\" placeholder=\"Search and select brands\" />} renderOption={(props, option, {\n      selected\n    }) => <li {...props} key={option.localizedDisplayValue}>\n            <Checkbox checked={selected} style={{\n        marginRight: 8\n      }} />\n            {option.localizedDisplayValue}\n          </li>} />;\n  }, [disabled, formik, metadata, tabValue]);\n  const isInvalidDestination = ReportFormUtils.isInvalidDestination(formik.values);\n  return <>\n      {inputTextField}\n      <ReportMarketplaceSelect disabled={disabled} onChange={e => formik.setFieldValue('marketplaceCode', e.target.value)} data-sentry-element=\"ReportMarketplaceSelect\" data-sentry-source-file=\"SQPForm.tsx\" />\n      <CSVGroupingPicker disabled={disabled} groupingLabel={tabValue === 'ASIN' ? 'ASIN' : 'Brand'} onChange={formik.handleChange} value={formik.values.reportFileGroupingType} data-sentry-element=\"CSVGroupingPicker\" data-sentry-source-file=\"SQPForm.tsx\" />\n      <ReportDateRangePicker disabled={disabled} formik={formik as unknown as FormikProps<BaseReportForm>} reportingRanges={reportingRanges} data-sentry-element=\"ReportDateRangePicker\" data-sentry-source-file=\"SQPForm.tsx\" />\n      <DataDestinationPicker disabled={disabled} formik={formik} reportType={tabValue === 'ASIN' ? 'SQPASINs' : 'SQPBrands'} data-sentry-element=\"DataDestinationPicker\" data-sentry-source-file=\"SQPForm.tsx\" />\n      <LoadingButton disabled={!formik.isValid || isInvalidDestination || disabled} loading={isLoading} onClick={formik.submitForm} variant=\"contained\" data-sentry-element=\"LoadingButton\" data-sentry-source-file=\"SQPForm.tsx\">\n        Submit\n      </LoadingButton>\n    </>;\n};\nexport default SQPForm;","import { Box, Stack, Tab, Tabs } from '@mui/material';\nimport { enqueueSnackbar } from '@riptech/minimal-ui/src/components/snackbar';\nimport type { SellerCentralMarketplace } from '@seller-utilities/database';\nimport type { SQPFetcherForm, SQPType } from '@seller-utilities/types';\nimport { useFormik } from 'formik';\nimport { type FC, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport UserSelectors from '../../../redux/selectors/userSelectors';\nimport ReportDownloadUtils from '../../../utils/reports/ReportDownloadUtils';\nimport SQPDownloadUtils from '../../../utils/reports/sqp/SQPDownloadUtils';\nimport SQPMetadataUtils from '../../../utils/reports/sqp/SQPMetadataUtils';\nimport NoActiveSessionAlert from '../common/NoActiveSessionAlert';\nimport ReportFormContainer from '../common/ReportFormContainer';\nimport ReportProgressBar from '../common/ReportProgressBar';\nimport useReportFetcher from '../useReportFetcher';\nimport SQPForm from './SQPForm';\nconst ReportFetcher: FC = () => {\n  const activeMarketplace = useSelector(UserSelectors.activeMarketplaceSelector);\n  const [tabValue, setTabValue] = useState<SQPType>('ASIN');\n  const {\n    loadingDetails,\n    downloadReport,\n    fetchMetadata,\n    metadata,\n    metadataStatus,\n    setUploadProgress,\n    setDownloadProgress\n  } = useReportFetcher(SQPMetadataUtils.getMetadata, {\n    asins: {\n      reportingRanges: {\n        monthly: [],\n        quarterly: [],\n        weekly: []\n      }\n    },\n    brands: {\n      options: [],\n      reportingRanges: {\n        monthly: [],\n        quarterly: [],\n        weekly: []\n      }\n    }\n  });\n  const downloadSQPData = async (formData: SQPFetcherForm) => {\n    try {\n      const failedValues = await SQPDownloadUtils.downloadAllData(activeMarketplace!, tabValue, setDownloadProgress, downloadReport, metadata.brands.options, formData);\n      if (failedValues.length) {\n        enqueueSnackbar(`The following ${tabValue === 'Brand' ? 'Brands' : `ASINs`} failed to download data: ${failedValues.join(', ')}`, {\n          persist: true,\n          preventDuplicate: false,\n          variant: 'error'\n        });\n      }\n    } catch (err: any) {\n      enqueueSnackbar(err?.message || 'Something went wrong', {\n        variant: 'error'\n      });\n    } finally {\n      setUploadProgress(0);\n      setDownloadProgress(null);\n    }\n  };\n  const brandFormik = useFormik<SQPFetcherForm>({\n    initialValues: {\n      asins: '',\n      brands: '',\n      reportFileGroupingType: 'Single',\n      downloadDestinationType: 'Local',\n      menuItemDestination: 'Local',\n      dataConfigurationId: '',\n      marketplaceCode: '' as SellerCentralMarketplace,\n      isSavingToPreviousDestination: false,\n      periods: [],\n      reportingRange: 'Weekly',\n      reportType: 'SQPBrands'\n    },\n    onSubmit: async (values, formikHelpers) => {\n      setDownloadProgress(0);\n      await downloadSQPData(values);\n      formikHelpers.setSubmitting(false);\n    },\n    validationSchema: Yup.object().shape({\n      brands: Yup.string().required('You must enter at least one brand'),\n      marketplaceCode: Yup.string().required('You must select a marketplace'),\n      periods: Yup.array().required().test('periods', 'You must select at least one period', periods => !!periods.length)\n    })\n  });\n  const asinFormik = useFormik<SQPFetcherForm>({\n    initialValues: {\n      asins: '',\n      brands: '',\n      reportFileGroupingType: 'Single',\n      downloadDestinationType: 'Local',\n      menuItemDestination: 'Local',\n      dataConfigurationId: '',\n      marketplaceCode: '' as SellerCentralMarketplace,\n      isSavingToPreviousDestination: false,\n      periods: [],\n      reportingRange: 'Weekly',\n      reportType: 'SQPBrands'\n    },\n    onSubmit: async (values, formikHelpers) => {\n      setDownloadProgress(0);\n      await downloadSQPData(values);\n      formikHelpers.setSubmitting(false);\n    },\n    validationSchema: Yup.object().shape({\n      asins: Yup.string().required('You must enter at least one ASIN').test('asins', 'One of your ASINs contains invalid characters', asins => ReportDownloadUtils.convertMultilineTextToArray(asins).every(asin => !/[^A-Z0-9]/.test(asin))),\n      marketplaceCode: Yup.string().required('You must select a marketplace'),\n      periods: Yup.array().required().test('periods', 'You must select at least one period', periods => !!periods.length)\n    })\n  });\n  return <ReportFormContainer title=\"Search Query Performance\" tutorialUrl=\"https://www.youtube.com/watch?v=Gt9ABKv_qnc\" data-sentry-element=\"ReportFormContainer\" data-sentry-component=\"ReportFetcher\" data-sentry-source-file=\"SQPReport.tsx\">\n      <NoActiveSessionAlert fetchMetadata={fetchMetadata} metadataStatus={metadataStatus} data-sentry-element=\"NoActiveSessionAlert\" data-sentry-source-file=\"SQPReport.tsx\" />\n      <Box sx={{\n      paddingBottom: 2\n    }} data-sentry-element=\"Box\" data-sentry-source-file=\"SQPReport.tsx\">\n        <Tabs onChange={(e, v) => {\n        setTabValue(v);\n      }} value={tabValue} variant=\"fullWidth\" data-sentry-element=\"Tabs\" data-sentry-source-file=\"SQPReport.tsx\">\n          {(['ASIN', 'Brand'] satisfies Array<SQPType>).map(tabOption => <Tab key={tabOption} label={tabOption} value={tabOption} />)}\n        </Tabs>\n      </Box>\n      <Stack spacing={2} data-sentry-element=\"Stack\" data-sentry-source-file=\"SQPReport.tsx\">\n        <SQPForm key={tabValue} disabled={!!loadingDetails || metadataStatus !== 'success'} formik={tabValue === 'ASIN' ? asinFormik : brandFormik} isLoading={!!loadingDetails} metadata={metadata} tabValue={tabValue} data-sentry-element=\"SQPForm\" data-sentry-source-file=\"SQPReport.tsx\" />\n        {loadingDetails ? <ReportProgressBar label={loadingDetails.label} progress={loadingDetails.progress} /> : null}\n      </Stack>\n    </ReportFormContainer>;\n};\nexport default ReportFetcher;","import { useAppContext } from '@riptech/shared-ui/src/hooks/useAppContext';\nimport Head from 'next/head';\nimport type { FC } from 'react';\nimport SQPReport from '../../components/reportFetcher/sqp/SQPReport';\nconst SQPReportPage: FC = () => {\n  const {\n    appName\n  } = useAppContext();\n  return <>\n      <Head data-sentry-element=\"Head\" data-sentry-source-file=\"sqp.tsx\">\n        <title>{`SQP Report | ${appName}`}</title>\n      </Head>\n      <SQPReport data-sentry-element=\"SQPReport\" data-sentry-source-file=\"sqp.tsx\" />\n    </>;\n};\nexport default SQPReportPage;","import type {\n  GoogleSheet,\n  GoogleSheetColumnMappings,\n  ReportDataType,\n  SellerCentralMarketplace\n} from '@seller-utilities/database';\nimport type { Moment } from 'moment-timezone';\n\nimport type { GoogleDriveItem } from '../google-drive';\n\nexport type ReportFileGroupingType = 'Single' | 'Multiple' | 'Aggregated';\n\nexport type DownloadDestinationType = 'Local' | 'Google Drive' | 'Google Sheet';\n\nexport type ReportPeriodsList = Array<{ date: Moment; title: string }>;\n\nexport const REPORTING_RANGE_TYPES = ['Weekly', 'Monthly', 'Quarterly'] as const;\n\nexport interface BaseReportForm {\n  marketplaceCode: SellerCentralMarketplace;\n  periods: ReportPeriodsList;\n  downloadDestinationType: DownloadDestinationType;\n  menuItemDestination: string;\n\n  reportingRange: (typeof REPORTING_RANGE_TYPES)[number];\n  reportType: ReportDataType;\n  googleDriveItem?: GoogleDriveItem;\n\n  isSavingToPreviousDestination: boolean;\n\n  // The following fields are only used when downloadDestinationType is 'Google Sheet'.\n  googleSheetSheet?: GoogleSheet;\n  dataConfigurationId?: string;\n  columnMappings?: GoogleSheetColumnMappings;\n  headerRowsToSkip?: number;\n}\n\nexport interface MetadataValue {\n  localizedDisplayValue: string;\n  value: string;\n  child?: { valueType: string; values: Array<MetadataValue> };\n}\n\nexport interface ReportingRanges {\n  weekly: ReportPeriodsList;\n  monthly: ReportPeriodsList;\n  quarterly: ReportPeriodsList;\n}\n\nexport interface RawReportMetadataResponse {\n  metadata: {\n    viewsRoot: {\n      views: Array<{\n        id: string;\n        filters: Array<{ id: string; values: Array<MetadataValue> }>;\n      }>;\n    };\n  };\n}\n\nexport const getReportFileGroupingLabel = (reportLabel: string, type: ReportFileGroupingType): string =>\n  (\n    ({\n      Aggregated: `One file for all ${reportLabel}s - Aggregated`,\n      Multiple: `One file per-${reportLabel}`,\n      Single: `One file for all ${reportLabel}s`\n    }) satisfies Record<ReportFileGroupingType, string>\n  )[type];\n\nexport type Arrayify<T> = {\n  [K in keyof T]: Array<T[K]>;\n};\n\nexport type ValueOf<T> = T[keyof T];\n"],"names":["window","__NEXT_P","push","__webpack_require__","MetadataUtils","transformWeeklyDateString","months","parts","input","split","weekPart","datePart","dateRange","year","weekNumber","replace","startDate","endDate","startDateObj","Date","endDateObj","startMonth","getMonth","startDay","getDate","endMonth","endDay","concat","transformMonthlyDateString","value","month","transformQuarterlyDateString","quarter","mapWeeklyPeriods","reportingRanges","find","item","child","values","map","localizedDisplayValue","param","date","moment","title","mapMonthlyPeriods","reduce","currentYear","mapQuarterlyPeriods","ReportAggregationUtils","sum","nums","acc","val","average","precision","length","result","total","NumberUtils","roundToDecimalPoints","calculatePercentage","numerator","denominator","formatPercentage","__webpack_exports__","Z","disabled","onChange","groupingLabel","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","TextField","fullWidth","label","name","select","data-sentry-element","data-sentry-component","data-sentry-source-file","reportFileGroupingType","MenuItem","getReportFileGroupingLabel","formik","options","useMemo","reportingRange","weekly","monthly","quarterly","jsxs","Stack","spacing","setValues","periods","e","target","REPORTING_RANGE_TYPES","rangeTypeItem","Autocomplete","disableCloseOnSelect","getOptionLabel","option","multiple","v","setFieldValue","renderInput","params","placeholder","toLowerCase","renderOption","props","selected","react__WEBPACK_IMPORTED_MODULE_1__","createElement","li","key","Checkbox","checked","style","marginRight","Object","entries","SUPPORTED_MARKETPLACES","code","alignItems","direction","Avatar","sx","height","width","Iconify","icon","Typography","variant","SQPAggregationUtils","ASIN_AGGREGATORS","asin","asinData","marketplace","period","join","BRAND_AGGREGATORS","brand","brandData","aggregateData","sqpRows","type","rowMap","Map","forEach","asinOrBrand","query","rest","has","set","get","restKey","aggregators","Array","from","aggregatedRow","keys","String","SQPDownloadUtils","generateSingleFetchInput","marketplaceCode","periodEndDate","rangeFilters","ReportDownloadUtils","getRangeFiltersByReportingRange","isASIN","payload","filterSelections","id","valueType","reportId","reportOperations","ascending","pageNumber","pageSize","reportType","sortByColumnId","selectedCountries","viewId","toISOString","generateAPIInputs","periodEndDates","response","NA_TIMEZONE","downloadAllData","activeMarketplace","setDownloadProgress","downloadReport","brandNames","sqpFormData","apiInputsEntries","isBrands","downloadDestinationType","downloadDestination","failedValues","combinedCSVData","apiInputs","utc","convertMultilineTextToArray","brands","asins","COLUMNS","SQPRequestUtils","SQP_BRAND_DATA_COLUMNS","SQP_ASIN_DATA_COLUMNS","NUM_PAGES","totalAPICalls","i","fetchData","returnData","hadError","j","singlePayload","payloads","_","operation","pageNumIndex","combinedPayloadData","k","rows","SellerCentralRequestManager","fetchSQPAPIData","row","getFormattedPeriod","queryKey","sanitizeValuesWithComma","err","handleNetworkError","currentIteration","sleepTime","getSellerCentralSleepTime","Utils","sleep","queryRankKey","sort","a","b","parseInt","csvData","sheetDataToWriteToDrive","generateSheetData","csvText","generateCSVText","fileName","destination","reportFormData","isAggregated","SQPMetadataUtils","getMetadata","brandsMetadata","fetchSQPMetadata","metadata","viewsRoot","views","asinReportingRanges","filters","brandsReportingRanges","sqp_SQPForm","isLoading","tabValue","inputTextField","jsx_runtime","error","errors","touched","helperText","multiline","onBlur","handleBlur","handleChange","selectedOptions","selectedBrands","react","isInvalidDestination","ReportFormUtils","Fragment","ReportMarketplaceSelect","CSVGroupingPicker","ReportDateRangePicker","DataDestinationPicker","LoadingButton","isValid","loading","onClick","submitForm","SQPReport","useSelector","UserSelectors","activeMarketplaceSelector","setTabValue","useState","loadingDetails","fetchMetadata","metadataStatus","setUploadProgress","useReportFetcher","downloadSQPData","formData","enqueueSnackbar","persist","preventDuplicate","message","brandFormik","useFormik","initialValues","menuItemDestination","dataConfigurationId","isSavingToPreviousDestination","onSubmit","formikHelpers","setSubmitting","validationSchema","Yup","shape","required","test","asinFormik","every","ReportFormContainer","tutorialUrl","NoActiveSessionAlert","Box","paddingBottom","Tabs","tabOption","Tab","SQPForm","ReportProgressBar","progress","sqp","appName","useAppContext","Head","reportLabel","Aggregated","Multiple","Single"],"sourceRoot":""}