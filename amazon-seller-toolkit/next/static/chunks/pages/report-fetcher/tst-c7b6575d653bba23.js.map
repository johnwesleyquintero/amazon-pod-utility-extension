{"version":3,"file":"static/chunks/pages/report-fetcher/tst-c7b6575d653bba23.js","mappings":"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","sources":["webpack://_N_E/?c78e","webpack://_N_E/./src/utils/reports/MetadataUtils.ts","webpack://_N_E/./src/components/reportFetcher/common/ReportDateRangePicker.tsx","webpack://_N_E/./src/components/reportFetcher/common/ReportMarketplaceSelect.tsx","webpack://_N_E/./src/utils/reports/tst/TSTMetadataUtils.ts","webpack://_N_E/./src/utils/reports/tst/TSTDownloadUtils.ts","webpack://_N_E/./src/components/reportFetcher/tst/TSTForm.tsx","webpack://_N_E/./src/components/reportFetcher/tst/TSTReport.tsx","webpack://_N_E/./src/pages/report-fetcher/tst.tsx","webpack://_N_E/../../packages/seller-utilities/types/src/api/reports/common.ts"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/report-fetcher/tst\",\n      function () {\n        return require(\"private-next-pages/report-fetcher/tst.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/report-fetcher/tst\"])\n      });\n    }\n  ","import type { MetadataValue } from '@seller-utilities/types';\nimport moment from 'moment-timezone';\n\ninterface MappedPeriod {\n  date: moment.Moment;\n  title: string;\n}\n\nexport default class MetadataUtils {\n  private static readonly transformWeeklyDateString = (input: string): string => {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'] as const;\n\n    // Split the input string into individual parts\n    const parts = input.split(' | ');\n    const weekPart: string = parts[0];\n    const datePart = parts[1].split(', ');\n    const dateRange = datePart[0].split(' - ');\n    const year = datePart[1];\n\n    // Extract week number from \"Week 12\" or \"Week 47\"\n    const weekNumber: string = weekPart.replace(/Week\\s/, '');\n\n    // Split the date range into start and end dates\n    const [startDate, endDate]: Array<string> = dateRange;\n\n    // Convert start and end dates to Date objects\n    const startDateObj: Date = new Date(startDate);\n    const endDateObj: Date = new Date(endDate);\n\n    // Get month names and dates\n    const startMonth = months[startDateObj.getMonth()];\n    const startDay = startDateObj.getDate();\n    const endMonth = months[endDateObj.getMonth()];\n    const endDay = endDateObj.getDate();\n\n    // Construct the new formatted string\n    return `W${weekNumber} | ${startMonth} ${startDay}, ${year} - ${endMonth} ${endDay}, ${year}`;\n  };\n\n  private static readonly transformMonthlyDateString = (value: string, month: string) => {\n    const year = value.split('-')[0];\n    return `${month} ${year}`;\n  };\n\n  private static readonly transformQuarterlyDateString = (value: string, quarter: string) => {\n    const year = value.split('-')[0];\n    return `Q${quarter} ${year}`;\n  };\n\n  static readonly mapWeeklyPeriods = (reportingRanges?: Array<MetadataValue>) =>\n    reportingRanges\n      ?.find((item) => item.value === 'weekly')\n      ?.child?.values?.map(({ value, localizedDisplayValue }: { value: string; localizedDisplayValue: string }) => ({\n        date: moment.utc(value),\n        title: this.transformWeeklyDateString(localizedDisplayValue)\n      })) ?? [];\n\n  static readonly mapMonthlyPeriods = (reportingRanges?: Array<MetadataValue>) =>\n    reportingRanges\n      ?.find((item) => item.value === 'monthly')\n      ?.child?.values?.reduce((months, currentYear) => {\n        const values =\n          currentYear?.child?.values.map(\n            ({ value, localizedDisplayValue }: { value: string; localizedDisplayValue: string }) => ({\n              date: moment.utc(value),\n              title: this.transformMonthlyDateString(value, localizedDisplayValue)\n            })\n          ) ?? [];\n\n        return months.concat(values);\n      }, [] as Array<MappedPeriod>) ?? [];\n\n  static readonly mapQuarterlyPeriods = (reportingRanges?: Array<MetadataValue>) =>\n    reportingRanges\n      ?.find((item) => item.value === 'quarterly')\n      ?.child?.values?.reduce((quarter, currentYear) => {\n        const values =\n          currentYear?.child?.values.map(\n            ({ value, localizedDisplayValue }: { value: string; localizedDisplayValue: string }) => ({\n              date: moment.utc(value),\n              title: this.transformQuarterlyDateString(value, localizedDisplayValue)\n            })\n          ) ?? [];\n\n        return quarter.concat(values);\n      }, [] as Array<MappedPeriod>) ?? [];\n}\n","import { Autocomplete, Checkbox, MenuItem, Stack, TextField } from '@mui/material';\nimport type { BaseReportForm, ReportingRanges, SQPFetcherForm } from '@seller-utilities/types';\nimport { REPORTING_RANGE_TYPES } from '@seller-utilities/types';\nimport type { FormikProps } from 'formik';\nimport type { ChangeEvent, FC } from 'react';\nimport { useMemo } from 'react';\ninterface ReportDateRangePickerProps {\n  readonly disabled: boolean;\n  readonly formik: FormikProps<BaseReportForm>;\n  readonly reportingRanges: ReportingRanges;\n}\nconst ReportDateRangePicker: FC<ReportDateRangePickerProps> = ({\n  disabled,\n  formik,\n  reportingRanges\n}) => {\n  const handleChangeRangeType = (e: ChangeEvent<HTMLInputElement>) => {\n    formik.setValues({\n      ...formik.values,\n      periods: [],\n      reportingRange: e.target.value as SQPFetcherForm['reportingRange']\n    });\n  };\n  const {\n    label,\n    options\n  } = useMemo(() => {\n    switch (formik.values.reportingRange) {\n      case 'Weekly':\n        return {\n          label: 'Weeks',\n          options: reportingRanges?.weekly\n        };\n      case 'Monthly':\n        return {\n          label: 'Months',\n          options: reportingRanges?.monthly\n        };\n      case 'Quarterly':\n        return {\n          label: 'Quarters',\n          options: reportingRanges?.quarterly\n        };\n      default:\n        throw new Error('Unknown reporting range type');\n    }\n  }, [formik.values.reportingRange, reportingRanges]);\n  return <Stack spacing={2} data-sentry-element=\"Stack\" data-sentry-component=\"ReportDateRangePicker\" data-sentry-source-file=\"ReportDateRangePicker.tsx\">\n      <TextField disabled={disabled} fullWidth label=\"Reporting range\" name=\"rangeType\" onChange={handleChangeRangeType} select value={formik.values.reportingRange} data-sentry-element=\"TextField\" data-sentry-source-file=\"ReportDateRangePicker.tsx\">\n        {REPORTING_RANGE_TYPES.map(rangeTypeItem => <MenuItem key={rangeTypeItem} value={rangeTypeItem}>\n            {rangeTypeItem}\n          </MenuItem>)}\n      </TextField>\n      <Autocomplete disableCloseOnSelect disabled={disabled} fullWidth getOptionLabel={option => option.title} multiple onChange={(e, v) => formik.setFieldValue('periods', v)} options={options} renderInput={params => <TextField {...params} label={label} placeholder={`Search and select ${label.toLowerCase()}`} />} renderOption={(props, option, {\n      selected\n    }) => <li {...props} key={option.title}>\n            <Checkbox checked={selected} style={{\n        marginRight: 8\n      }} />\n            {option.title}\n          </li>} value={formik.values.periods} data-sentry-element=\"Autocomplete\" data-sentry-source-file=\"ReportDateRangePicker.tsx\" />\n    </Stack>;\n};\nexport default ReportDateRangePicker;","import type { TextFieldProps } from '@mui/material';\nimport { Avatar, MenuItem, Stack, TextField, Typography } from '@mui/material';\nimport { Iconify } from '@riptech/minimal-ui/src/components/iconify';\nimport { SUPPORTED_MARKETPLACES } from '@seller-utilities/database';\nimport type { FC } from 'react';\ninterface ReportMarketplaceSelectProps {\n  readonly disabled: boolean;\n  readonly onChange: TextFieldProps['onChange'];\n}\nconst ReportMarketplaceSelect: FC<ReportMarketplaceSelectProps> = ({\n  disabled,\n  onChange\n}) => <TextField disabled={disabled} fullWidth label=\"Marketplace\" onChange={onChange} placeholder=\"Search and select marketplaces\" select data-sentry-element=\"TextField\" data-sentry-component=\"ReportMarketplaceSelect\" data-sentry-source-file=\"ReportMarketplaceSelect.tsx\">\n    {Object.entries(SUPPORTED_MARKETPLACES).map(([code, {\n    name\n  }]) => <MenuItem key={name} value={code}>\n        <Stack alignItems=\"center\" direction=\"row\" spacing={1}>\n          <Avatar sx={{\n        height: 24,\n        width: 24\n      }}>\n            <Iconify icon={`circle-flags:${code}`} sx={{\n          height: '100%',\n          width: '100%'\n        }} />\n          </Avatar>\n          <Typography variant=\"body2\">{name}</Typography>\n        </Stack>\n      </MenuItem>)}\n  </TextField>;\nexport default ReportMarketplaceSelect;","import type { SellerCentralMarketplace } from '@seller-utilities/database';\nimport type { TSTMetadata } from '@seller-utilities/types';\n\nimport SellerCentralRequestManager from '../../request/SellerCentralRequest/SellerCentralRequestManager';\nimport MetadataUtils from '../MetadataUtils';\n\nexport default class TSTMetadataUtils {\n  static getMetadata = async (activeMarketplace: SellerCentralMarketplace): Promise<TSTMetadata> => {\n    const response = await SellerCentralRequestManager.fetchTSTMetadata(activeMarketplace);\n\n    const searchMetadata = response?.metadata?.viewsRoot?.views.find(\n      (item) => item.id === 'top-search-terms-default-view'\n    );\n\n    const reportingRanges = searchMetadata?.filters.find((item) => item.id === 'reporting-range')?.values;\n    const topClickedCategories = searchMetadata?.filters.find((item) => item.id === 'category-dropdown')?.values ?? [];\n\n    return {\n      options: topClickedCategories,\n      reportingRanges: {\n        monthly: MetadataUtils.mapMonthlyPeriods(reportingRanges),\n        quarterly: MetadataUtils.mapQuarterlyPeriods(reportingRanges),\n        weekly: MetadataUtils.mapWeeklyPeriods(reportingRanges)\n      }\n    };\n  };\n}\n","import Utils, { NA_TIMEZONE } from '@riptech/utils';\nimport type { SellerCentralMarketplace } from '@seller-utilities/database';\nimport type { TSTDataRow, TSTReportForm } from '@seller-utilities/types';\nimport _ from 'lodash';\nimport type { Moment } from 'moment-timezone';\nimport moment from 'moment-timezone';\n\nimport type { DownloadReportInputType } from '../../../components/reportFetcher/useReportFetcher';\nimport SellerCentralRequestManager from '../../request/SellerCentralRequest/SellerCentralRequestManager';\nimport TSTRequestUtils from '../../request/SellerCentralRequest/utils/TSTRequestUtils';\nimport ReportDownloadUtils from '../ReportDownloadUtils';\n\ninterface GenerateSingleTSTFetchInput {\n  marketplaceCode: SellerCentralMarketplace;\n  reportingRange: TSTReportForm['reportingRange'];\n  asins?: string;\n  brand?: string;\n  category?: string;\n  searchTerm?: string;\n  periodEndDate: Moment;\n}\n\ninterface GenerateAPIInputs extends Omit<GenerateSingleTSTFetchInput, 'periodEndDate' | 'searchTerm'> {\n  periodEndDates: Array<string>;\n  searchTerms?: Array<string>;\n  brands?: Array<string>;\n}\n\nexport default class TSTDownloadUtils {\n  private static readonly PAGE_SIZE = 100;\n\n  private static readonly generateSingleFetchInput = (input: GenerateSingleTSTFetchInput) => {\n    const { marketplaceCode, reportingRange, asins, brand, category, periodEndDate, searchTerm } = input;\n    const rangeFilters = ReportDownloadUtils.getRangeFiltersByReportingRange(reportingRange, periodEndDate);\n    const filterSelections = [\n      { id: 'reporting-range', value: reportingRange.toLowerCase(), valueType: null },\n      ...rangeFilters\n    ];\n\n    if (asins) {\n      filterSelections.push({ id: 'asins', value: asins, valueType: 'ASIN' });\n    }\n\n    if (brand) {\n      filterSelections.push({ id: 'brand-freeform', value: brand, valueType: 'BRAND' });\n    }\n\n    if (category) {\n      filterSelections.push({ id: 'category-dropdown', value: category, valueType: null });\n    }\n\n    if (searchTerm) {\n      filterSelections.push({ id: 'search-term-freeform', value: searchTerm, valueType: 'SEARCH_TERM' });\n    }\n\n    return {\n      payload: {\n        filterSelections,\n        reportId: 'top-search-terms-report-table',\n        viewId: 'top-search-terms-default-view',\n        selectedCountries: [marketplaceCode],\n        reportOperations: [\n          {\n            ascending: true,\n            pageNumber: 1,\n            pageSize: this.PAGE_SIZE,\n            reportId: 'top-search-terms-report-table',\n            reportType: 'TABLE',\n            sortByColumnId: 'st-search-frequency'\n          }\n        ]\n      } as const,\n      periodEndDate: periodEndDate.toISOString(),\n      keyword: searchTerm,\n      brand\n    };\n  };\n\n  private static readonly generateAPIInputs = (inputs: GenerateAPIInputs) => {\n    const { periodEndDates, searchTerms = [], brands = [], ...others } = inputs;\n\n    return periodEndDates.flatMap((endDate) => {\n      const periodEndDate = moment.tz(endDate, NA_TIMEZONE);\n\n      if (searchTerms.length && brands.length) {\n        return searchTerms.flatMap((term) =>\n          brands.map((brand) => this.generateSingleFetchInput({ ...others, brand, searchTerm: term, periodEndDate }))\n        );\n      }\n\n      if (searchTerms.length) {\n        return searchTerms.map((term) => this.generateSingleFetchInput({ ...others, searchTerm: term, periodEndDate }));\n      }\n\n      if (brands.length) {\n        return brands.map((brand) => this.generateSingleFetchInput({ ...others, brand, periodEndDate }));\n      }\n\n      return this.generateSingleFetchInput({ ...others, periodEndDate });\n    });\n  };\n\n  private static readonly fetchTSTAPIData = async (\n    activeMarketPlace: SellerCentralMarketplace,\n    input: ReturnType<typeof this.generateSingleFetchInput>,\n    combinedResults: Array<TSTDataRow>,\n    reportingRange: TSTReportForm['reportingRange'],\n    apiInputIndex: number,\n    totalApiInputs: number,\n    setDownloadProgress: (newProgress: number) => void\n  ) => {\n    const progressPerInput = this.PAGE_SIZE / totalApiInputs;\n\n    let pageNumber = 0;\n    let totalPages: number | undefined;\n\n    do {\n      const { totalItems, rows } = await SellerCentralRequestManager.fetchTSTAPIData(\n        activeMarketPlace,\n        _.cloneDeep({\n          ...input.payload,\n          reportOperations: input.payload.reportOperations.map((operation) => ({\n            ...operation,\n            pageNumber: pageNumber + 1\n          }))\n        })\n      );\n\n      if (totalPages === undefined) {\n        totalPages = Math.ceil(totalItems / this.PAGE_SIZE);\n      }\n\n      if (!totalItems) {\n        setDownloadProgress((apiInputIndex + 1) * progressPerInput);\n        continue;\n      }\n\n      rows.forEach((row) => {\n        row.period = ReportDownloadUtils.getFormattedPeriod(reportingRange, input.periodEndDate);\n        row.keywords = input.keyword ?? '';\n        row.brands = input.brand ?? '';\n        ReportDownloadUtils.sanitizeValuesWithComma<TSTDataRow>(\n          [\n            'st-top-asin-title-1',\n            'st-top-asin-title-2',\n            'st-top-asin-title-3',\n            'st-search-term',\n            'st-top-category-1',\n            'st-top-category-2',\n            'st-top-category-3',\n            'st-top-brand-1',\n            'st-top-brand-2',\n            'st-top-brand-3'\n          ],\n          row\n        );\n        combinedResults.push(row);\n      });\n\n      const inputProgress = (pageNumber++ / totalPages) * progressPerInput;\n      setDownloadProgress(apiInputIndex * progressPerInput + inputProgress);\n\n      if (pageNumber !== totalPages || apiInputIndex !== totalApiInputs - 1) {\n        await Utils.sleep(ReportDownloadUtils.getSellerCentralSleepTime());\n      }\n    } while (pageNumber < totalPages);\n  };\n\n  static downloadData = async (\n    activeMarketPlace: SellerCentralMarketplace,\n    tstFormData: TSTReportForm,\n    setDownloadProgress: (newProgress: number) => void,\n    downloadReport: (options: DownloadReportInputType) => void\n  ) => {\n    const { marketplaceCode, searchTerms, asins, brands, reportingRange, downloadDestinationType, category } =\n      tstFormData;\n\n    const apiInputs = this.generateAPIInputs({\n      asins,\n      marketplaceCode,\n      reportingRange,\n      periodEndDates: tstFormData.periods.map(({ date }) => date.utc().toISOString()),\n      ...(category && { category }),\n      ...(brands && { brands: ReportDownloadUtils.convertMultilineTextToArray(brands) }),\n      ...(searchTerms && { searchTerms: ReportDownloadUtils.convertMultilineTextToArray(searchTerms) })\n    });\n\n    const COLUMNS = TSTRequestUtils.TST_DATA_COLUMNS;\n    const combinedResults: Array<TSTDataRow> = [];\n    const failedValues = [];\n\n    for (const [i, apiInput] of apiInputs.entries()) {\n      try {\n        await this.fetchTSTAPIData(\n          activeMarketPlace,\n          apiInput,\n          combinedResults,\n          reportingRange,\n          i,\n          apiInputs.length,\n          setDownloadProgress\n        );\n      } catch (error) {\n        ReportDownloadUtils.handleNetworkError(error);\n        failedValues.push(`${reportingRange} - (${(apiInput.keyword, apiInput.brand)})`);\n      }\n    }\n\n    downloadReport({\n      ...(downloadDestinationType !== 'Local'\n        ? {\n            ...(downloadDestinationType === 'Google Sheet'\n              ? { csvData: combinedResults }\n              : {\n                  sheetDataToWriteToDrive: ReportDownloadUtils.generateSheetData<typeof COLUMNS>(\n                    combinedResults,\n                    COLUMNS\n                  )\n                })\n          }\n        : { csvText: ReportDownloadUtils.generateCSVText<typeof COLUMNS>(combinedResults, COLUMNS) }),\n      fileName: `${reportingRange.toLowerCase()}-tst-data-${moment().toISOString().split('.')[0]}`,\n      destination: downloadDestinationType,\n      reportFormData: tstFormData\n    });\n\n    return failedValues;\n  };\n}\n","import { LoadingButton } from '@mui/lab';\nimport { Alert, Autocomplete, TextField } from '@mui/material';\nimport { enqueueSnackbar } from '@riptech/minimal-ui/src/components/snackbar';\nimport type { SellerCentralMarketplace } from '@seller-utilities/database';\nimport type { TSTMetadata, TSTReportForm } from '@seller-utilities/types';\nimport { useFormik } from 'formik';\nimport type { FC } from 'react';\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport UserSelectors from '../../../redux/selectors/userSelectors';\nimport ReportFormUtils from '../../../utils/reports/ReportFormUtils';\nimport TSTDownloadUtils from '../../../utils/reports/tst/TSTDownloadUtils';\nimport DataDestinationPicker from '../../dataDestination/DataDestinationPicker';\nimport ReportDateRangePicker from '../common/ReportDateRangePicker';\nimport ReportMarketplaceSelect from '../common/ReportMarketplaceSelect';\nimport type { DownloadReportInputType } from '../useReportFetcher';\ninterface TSTFormProps {\n  readonly isLoading: boolean;\n  readonly disabled: boolean;\n  readonly metadata: TSTMetadata;\n  readonly setDownloadProgress: (newProgress: number | null) => void;\n  readonly setUploadProgress: (newProgress: number) => void;\n  readonly downloadReport: (options: DownloadReportInputType) => void;\n}\nconst TSTForm: FC<TSTFormProps> = ({\n  isLoading,\n  disabled,\n  metadata,\n  setDownloadProgress,\n  setUploadProgress,\n  downloadReport\n}) => {\n  const activeMarketplace = useSelector(UserSelectors.activeMarketplaceSelector);\n  const downloadTSTData = async (formData: TSTReportForm) => {\n    try {\n      const failedValues = await TSTDownloadUtils.downloadData(activeMarketplace!, formData, setDownloadProgress, downloadReport);\n      if (failedValues.length) {\n        enqueueSnackbar(`Some of the data for the following reporing ranges failed to download: ${failedValues.join(', ')}`, {\n          persist: true,\n          preventDuplicate: false,\n          variant: 'error'\n        });\n      }\n    } catch (err: any) {\n      enqueueSnackbar(err?.message ?? 'Something went wrong', {\n        variant: 'error'\n      });\n    } finally {\n      setUploadProgress(0);\n      setDownloadProgress(null);\n    }\n  };\n  const formik = useFormik<TSTReportForm>({\n    initialValues: {\n      downloadDestinationType: 'Local',\n      menuItemDestination: 'Local',\n      dataConfigurationId: '',\n      marketplaceCode: '' as SellerCentralMarketplace,\n      isSavingToPreviousDestination: false,\n      periods: [],\n      reportingRange: 'Weekly',\n      reportType: 'TST'\n    },\n    onSubmit: async (values, formikHelpers) => {\n      setDownloadProgress(0);\n      await downloadTSTData(values);\n      formikHelpers.setSubmitting(false);\n    },\n    validationSchema: Yup.object().shape({\n      asins: Yup.string().test('maxAsins', 'You cannot enter more than 100 ASINs at a time', value => (value?.split?.('\\n')?.length ?? 0) <= 100),\n      brands: Yup.string(),\n      marketplaceCode: Yup.string().required('You must select a marketplace'),\n      periods: Yup.array().required().test('periods', 'You must select at least one period', periods => !!periods.length)\n    })\n  });\n  const showSearchTermsAlert = useMemo(() => (formik.values.searchTerms?.split('\\n').length ?? 0) > 1, [formik.values.searchTerms]);\n  const isInvalidDestination = ReportFormUtils.isInvalidDestination(formik.values);\n  return <>\n      <ReportMarketplaceSelect disabled={disabled} onChange={e => formik.setFieldValue('marketplaceCode', e.target.value)} data-sentry-element=\"ReportMarketplaceSelect\" data-sentry-source-file=\"TSTForm.tsx\" />\n      <ReportDateRangePicker disabled={disabled} formik={formik} reportingRanges={metadata.reportingRanges} data-sentry-element=\"ReportDateRangePicker\" data-sentry-source-file=\"TSTForm.tsx\" />\n\n      <TextField disabled={disabled} error={!!formik.errors.asins} fullWidth helperText={formik.touched.asins ? formik.errors.asins : null} id=\"asins\" label=\"Top clicked products (optional)\" multiline name=\"asins\" onBlur={formik.handleBlur} onChange={formik.handleChange} placeholder=\"Enter up to 100 ASINs separated by new lines\" rows={4} value={formik.values.asins} variant=\"outlined\" data-sentry-element=\"TextField\" data-sentry-source-file=\"TSTForm.tsx\" />\n      <TextField disabled={disabled} error={!!formik.errors.brands} fullWidth helperText={formik.touched.brands ? formik.errors.brands : null} id=\"brands\" label=\"Top clicked brands (optional)\" multiline name=\"brands\" onBlur={formik.handleBlur} onChange={formik.handleChange} placeholder=\"Enter brands separated by new lines\" rows={4} value={formik.values.brands} variant=\"outlined\" data-sentry-element=\"TextField\" data-sentry-source-file=\"TSTForm.tsx\" />\n      <Autocomplete disabled={disabled} fullWidth getOptionLabel={option => option?.localizedDisplayValue} onChange={(_, selectedOption) => {\n      formik.setFieldValue('category', selectedOption?.value ?? '');\n    }} options={metadata?.options || []} renderInput={params => <TextField {...params} label=\"Category (optional)\" placeholder=\"Search and select a category\" />} renderOption={(props, option) => <li {...props} key={option.localizedDisplayValue}>\n            {option.localizedDisplayValue}\n          </li>} data-sentry-element=\"Autocomplete\" data-sentry-source-file=\"TSTForm.tsx\" />\n      {showSearchTermsAlert ? <Alert severity=\"info\">\n          Adding multiple search terms lengthens the run time as each unique search term yields unique results.\n        </Alert> : null}\n      <TextField disabled={disabled} error={!!formik.errors.searchTerms} fullWidth helperText={formik.touched.searchTerms ? formik.errors.searchTerms : null} id=\"searchTerms\" label=\"Search terms (optional)\" multiline name=\"searchTerms\" onBlur={formik.handleBlur} onChange={formik.handleChange} placeholder=\"Enter search terms separated by new lines\" rows={4} value={formik.values.searchTerms} variant=\"outlined\" data-sentry-element=\"TextField\" data-sentry-source-file=\"TSTForm.tsx\" />\n      <DataDestinationPicker disabled={disabled} formik={formik} reportType=\"TST\" data-sentry-element=\"DataDestinationPicker\" data-sentry-source-file=\"TSTForm.tsx\" />\n      <LoadingButton disabled={!formik.isValid || isInvalidDestination || disabled} loading={isLoading} onClick={formik.submitForm} variant=\"contained\" data-sentry-element=\"LoadingButton\" data-sentry-source-file=\"TSTForm.tsx\">\n        Submit\n      </LoadingButton>\n    </>;\n};\nexport default TSTForm;","import { Stack } from '@mui/material';\nimport type { FC } from 'react';\nimport TSTMetadataUtils from '../../../utils/reports/tst/TSTMetadataUtils';\nimport NoActiveSessionAlert from '../common/NoActiveSessionAlert';\nimport ReportFormContainer from '../common/ReportFormContainer';\nimport ReportProgressBar from '../common/ReportProgressBar';\nimport useReportFetcher from '../useReportFetcher';\nimport TSTForm from './TSTForm';\nconst TSTReport: FC = () => {\n  const {\n    metadata,\n    loadingDetails,\n    downloadReport,\n    setUploadProgress,\n    setDownloadProgress,\n    fetchMetadata,\n    metadataStatus\n  } = useReportFetcher(TSTMetadataUtils.getMetadata, {\n    options: [],\n    reportingRanges: {\n      monthly: [],\n      quarterly: [],\n      weekly: []\n    }\n  });\n  return <ReportFormContainer title=\"Top Search Terms\" data-sentry-element=\"ReportFormContainer\" data-sentry-component=\"TSTReport\" data-sentry-source-file=\"TSTReport.tsx\">\n      <NoActiveSessionAlert fetchMetadata={fetchMetadata} metadataStatus={metadataStatus} data-sentry-element=\"NoActiveSessionAlert\" data-sentry-source-file=\"TSTReport.tsx\" />\n      <Stack spacing={2} data-sentry-element=\"Stack\" data-sentry-source-file=\"TSTReport.tsx\">\n        <TSTForm disabled={!!loadingDetails || metadataStatus !== 'success'} downloadReport={downloadReport} isLoading={!!loadingDetails} metadata={metadata} setDownloadProgress={setDownloadProgress} setUploadProgress={setUploadProgress} data-sentry-element=\"TSTForm\" data-sentry-source-file=\"TSTReport.tsx\" />\n        {loadingDetails ? <ReportProgressBar label={loadingDetails.label} progress={loadingDetails.progress} /> : null}\n      </Stack>\n    </ReportFormContainer>;\n};\nexport default TSTReport;","import { useAppContext } from '@riptech/shared-ui/src/hooks/useAppContext';\nimport Head from 'next/head';\nimport type { FC } from 'react';\nimport TSTReport from '../../components/reportFetcher/tst/TSTReport';\nconst TSTReportPage: FC = () => {\n  const {\n    appName\n  } = useAppContext();\n  return <>\n      <Head data-sentry-element=\"Head\" data-sentry-source-file=\"tst.tsx\">\n        <title>{`TST Report | ${appName}`}</title>\n      </Head>\n      <TSTReport data-sentry-element=\"TSTReport\" data-sentry-source-file=\"tst.tsx\" />\n    </>;\n};\nexport default TSTReportPage;","import type {\n  GoogleSheet,\n  GoogleSheetColumnMappings,\n  ReportDataType,\n  SellerCentralMarketplace\n} from '@seller-utilities/database';\nimport type { Moment } from 'moment-timezone';\n\nimport type { GoogleDriveItem } from '../google-drive';\n\nexport type ReportFileGroupingType = 'Single' | 'Multiple' | 'Aggregated';\n\nexport type DownloadDestinationType = 'Local' | 'Google Drive' | 'Google Sheet';\n\nexport type ReportPeriodsList = Array<{ date: Moment; title: string }>;\n\nexport const REPORTING_RANGE_TYPES = ['Weekly', 'Monthly', 'Quarterly'] as const;\n\nexport interface BaseReportForm {\n  marketplaceCode: SellerCentralMarketplace;\n  periods: ReportPeriodsList;\n  downloadDestinationType: DownloadDestinationType;\n  menuItemDestination: string;\n\n  reportingRange: (typeof REPORTING_RANGE_TYPES)[number];\n  reportType: ReportDataType;\n  googleDriveItem?: GoogleDriveItem;\n\n  isSavingToPreviousDestination: boolean;\n\n  // The following fields are only used when downloadDestinationType is 'Google Sheet'.\n  googleSheetSheet?: GoogleSheet;\n  dataConfigurationId?: string;\n  columnMappings?: GoogleSheetColumnMappings;\n  headerRowsToSkip?: number;\n}\n\nexport interface MetadataValue {\n  localizedDisplayValue: string;\n  value: string;\n  child?: { valueType: string; values: Array<MetadataValue> };\n}\n\nexport interface ReportingRanges {\n  weekly: ReportPeriodsList;\n  monthly: ReportPeriodsList;\n  quarterly: ReportPeriodsList;\n}\n\nexport interface RawReportMetadataResponse {\n  metadata: {\n    viewsRoot: {\n      views: Array<{\n        id: string;\n        filters: Array<{ id: string; values: Array<MetadataValue> }>;\n      }>;\n    };\n  };\n}\n\nexport const getReportFileGroupingLabel = (reportLabel: string, type: ReportFileGroupingType): string =>\n  (\n    ({\n      Aggregated: `One file for all ${reportLabel}s - Aggregated`,\n      Multiple: `One file per-${reportLabel}`,\n      Single: `One file for all ${reportLabel}s`\n    }) satisfies Record<ReportFileGroupingType, string>\n  )[type];\n\nexport type Arrayify<T> = {\n  [K in keyof T]: Array<T[K]>;\n};\n\nexport type ValueOf<T> = T[keyof T];\n"],"names":["window","__NEXT_P","push","__webpack_require__","MetadataUtils","transformWeeklyDateString","months","parts","input","split","weekPart","datePart","dateRange","year","weekNumber","replace","startDate","endDate","startDateObj","Date","endDateObj","startMonth","getMonth","startDay","getDate","endMonth","endDay","concat","transformMonthlyDateString","value","month","transformQuarterlyDateString","quarter","mapWeeklyPeriods","reportingRanges","find","item","child","values","map","localizedDisplayValue","param","date","moment","title","mapMonthlyPeriods","reduce","currentYear","mapQuarterlyPeriods","__webpack_exports__","Z","disabled","formik","label","options","useMemo","reportingRange","weekly","monthly","quarterly","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Stack","spacing","data-sentry-element","data-sentry-component","data-sentry-source-file","jsx","TextField","fullWidth","name","onChange","setValues","periods","e","target","select","REPORTING_RANGE_TYPES","rangeTypeItem","MenuItem","Autocomplete","disableCloseOnSelect","getOptionLabel","option","multiple","v","setFieldValue","renderInput","params","placeholder","toLowerCase","renderOption","props","selected","react__WEBPACK_IMPORTED_MODULE_1__","createElement","li","key","Checkbox","checked","style","marginRight","Object","entries","SUPPORTED_MARKETPLACES","code","alignItems","direction","Avatar","sx","height","width","Iconify","icon","Typography","variant","TSTMetadataUtils","getMetadata","activeMarketplace","response","searchMetadata","SellerCentralRequestManager","fetchTSTMetadata","metadata","viewsRoot","views","id","filters","TSTDownloadUtils","PAGE_SIZE","generateSingleFetchInput","marketplaceCode","asins","brand","category","periodEndDate","searchTerm","rangeFilters","ReportDownloadUtils","getRangeFiltersByReportingRange","filterSelections","valueType","payload","reportId","viewId","selectedCountries","reportOperations","ascending","pageNumber","pageSize","reportType","sortByColumnId","toISOString","keyword","generateAPIInputs","periodEndDates","searchTerms","brands","others","inputs","flatMap","NA_TIMEZONE","length","term","fetchTSTAPIData","activeMarketPlace","combinedResults","apiInputIndex","totalApiInputs","setDownloadProgress","totalPages","progressPerInput","totalItems","rows","_","operation","undefined","Math","ceil","forEach","row","period","getFormattedPeriod","keywords","sanitizeValuesWithComma","inputProgress","Utils","sleep","getSellerCentralSleepTime","downloadData","tstFormData","downloadReport","downloadDestinationType","apiInputs","utc","convertMultilineTextToArray","COLUMNS","TSTRequestUtils","TST_DATA_COLUMNS","failedValues","i","apiInput","error","handleNetworkError","csvData","sheetDataToWriteToDrive","generateSheetData","csvText","generateCSVText","fileName","destination","reportFormData","tst_TSTForm","isLoading","setUploadProgress","useSelector","UserSelectors","activeMarketplaceSelector","downloadTSTData","formData","enqueueSnackbar","join","persist","preventDuplicate","err","message","useFormik","initialValues","menuItemDestination","dataConfigurationId","isSavingToPreviousDestination","onSubmit","formikHelpers","setSubmitting","validationSchema","Yup","shape","test","required","showSearchTermsAlert","isInvalidDestination","ReportFormUtils","jsx_runtime","Fragment","ReportMarketplaceSelect","ReportDateRangePicker","errors","helperText","touched","multiline","onBlur","handleBlur","handleChange","selectedOption","react","Alert","severity","DataDestinationPicker","LoadingButton","isValid","loading","onClick","submitForm","tst_TSTReport","loadingDetails","fetchMetadata","metadataStatus","useReportFetcher","ReportFormContainer","NoActiveSessionAlert","TSTForm","ReportProgressBar","progress","tst","appName","useAppContext","Head","TSTReport","getReportFileGroupingLabel","reportLabel","type","Aggregated","Multiple","Single"],"sourceRoot":""}