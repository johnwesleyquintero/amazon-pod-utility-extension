{"version":3,"file":"static/chunks/pages/report-fetcher/scp-521c5e31279dd16b.js","mappings":"2aACA,CAAAA,OAAAC,QAAA,CAAAD,OAAAC,QAAA,MAAAC,IAAA,EACA,sBACA,WACA,OAAeC,EAAQ,KACvB,EACA,6FCEe,OAAMC,EA8ErB,CA9EqBA,EACKC,yBAAAA,CAA4B,IAClD,IAAMC,EAAS,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAM,CAG7FC,EAAQC,EAAMC,KAAK,CAAC,OACpBC,EAAmBH,CAAK,CAAC,EAAE,CAC3BI,EAAWJ,CAAK,CAAC,EAAE,CAACE,KAAK,CAAC,MAC1BG,EAAYD,CAAQ,CAAC,EAAE,CAACF,KAAK,CAAC,OAC9BI,EAAOF,CAAQ,CAAC,EAAE,CAGlBG,EAAqBJ,EAASK,OAAO,CAAC,SAAU,IAGhD,CAACC,EAAWC,EAAQ,CAAkBL,EAGtCM,EAAqB,IAAIC,KAAKH,GAC9BI,EAAmB,IAAID,KAAKF,GAG5BI,EAAaf,CAAM,CAACY,EAAaI,QAAQ,GAAG,CAC5CC,EAAWL,EAAaM,OAAO,GAC/BC,EAAWnB,CAAM,CAACc,EAAWE,QAAQ,GAAG,CACxCI,EAASN,EAAWI,OAAO,GAGjC,MAAO,IAAoBH,MAAAA,CAAhBP,EAAW,OAAmBS,MAAAA,CAAdF,EAAW,KAAgBR,MAAAA,CAAbU,EAAS,MAAcE,MAAAA,CAAVZ,EAAK,OAAiBa,MAAAA,CAAZD,EAAS,KAAcZ,MAAAA,CAAXa,EAAO,MAASC,MAAA,CAALd,EACzF,EA7BmBT,EA+BKwB,0BAAAA,CAA6B,CAACC,EAAeC,KACnE,IAAMjB,EAAOgB,EAAMpB,KAAK,CAAC,IAAI,CAAC,EAAE,CAChC,MAAO,GAAYI,MAAAA,CAATiB,EAAM,KAAQH,MAAA,CAALd,EACrB,EAlCmBT,EAoCK2B,4BAAAA,CAA+B,CAACF,EAAeG,KACrE,IAAMnB,EAAOgB,EAAMpB,KAAK,CAAC,IAAI,CAAC,EAAE,CAChC,MAAO,IAAeI,MAAAA,CAAXmB,EAAQ,KAAQL,MAAA,CAALd,EACxB,EAvCmBT,EAyCH6B,gBAAAA,CAAmB,QACjCC,EAAAA,EAAAA,EAAAA,SAAAA,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EACIC,IAAI,CAAC,GAAUC,WAAAA,EAAKP,KAAK,CAAK,GADlCK,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAEIG,KAAK,GAFTH,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAEWI,MAAM,GAFjBJ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAEmBK,GAAG,CAAC,OAAC,CAAEV,MAAAA,CAAK,CAAEW,sBAAAA,CAAqB,CAAoD,CAAAC,QAAM,CAC5GC,KAAMC,IAAAA,GAAU,CAACd,GACjBe,MAAOxC,EAAKC,yBAAyB,CAACmC,EACxC,MALFN,KAAAA,IAAAA,EAAAA,EAKS,EAAE,EA/CM9B,EAiDHyC,iBAAAA,CAAoB,QAClCX,EAAAA,EAAAA,EAAAA,SAAAA,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EACIC,IAAI,CAAC,GAAUC,YAAAA,EAAKP,KAAK,CAAK,GADlCK,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAEIG,KAAK,GAFTH,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAEWI,MAAM,GAFjBJ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAEmBY,MAAM,CAAC,CAACxC,EAAQyC,SAE7BA,EAAAA,EADF,IAAMT,EACJS,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAaV,KAAK,GAAlBU,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAoBT,MAAM,CAACC,GAAG,CAC5B,OAAC,CAAEV,MAAAA,CAAK,CAAEW,sBAAAA,CAAqB,CAAoD,CAAAC,QAAM,CACvFC,KAAMC,IAAAA,GAAU,CAACd,GACjBe,MAAOxC,EAAKwB,0BAA0B,CAACC,EAAOW,EAChD,MAJFO,KAAAA,IAAAA,EAAAA,EAKK,EAAE,CAET,OAAOzC,EAAOqB,MAAM,CAACW,EACvB,EAAG,EAAE,IAZPJ,KAAAA,IAAAA,EAAAA,EAYmC,EAAE,EA9DpB9B,EAgEH4C,mBAAAA,CAAsB,QACpCd,EAAAA,EAAAA,EAAAA,SAAAA,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EACIC,IAAI,CAAC,GAAUC,cAAAA,EAAKP,KAAK,CAAK,GADlCK,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAEIG,KAAK,GAFTH,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAEWI,MAAM,GAFjBJ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAEmBY,MAAM,CAAC,CAACd,EAASe,SAE9BA,EAAAA,EADF,IAAMT,EACJS,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAaV,KAAK,GAAlBU,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAoBT,MAAM,CAACC,GAAG,CAC5B,OAAC,CAAEV,MAAAA,CAAK,CAAEW,sBAAAA,CAAqB,CAAoD,CAAAC,QAAM,CACvFC,KAAMC,IAAAA,GAAU,CAACd,GACjBe,MAAOxC,EAAK2B,4BAA4B,CAACF,EAAOW,EAClD,MAJFO,KAAAA,IAAAA,EAAAA,EAKK,EAAE,CAET,OAAOf,EAAQL,MAAM,CAACW,EACxB,EAAG,EAAE,IAZPJ,KAAAA,IAAAA,EAAAA,EAYmC,EAAE,oFCnF1B,OAAMe,EAerB,CAfqBA,EACHC,GAAAA,CAAM,GAAiCC,EAAKL,MAAM,CAAC,CAACM,EAAKC,IAAQD,EAAMC,EAAK,GADzEJ,EAGHK,OAAAA,CAAU,CAACH,EAAqBI,KAC9C,GAAI,CAACJ,EAAKK,MAAM,CACd,MAAO,GAIT,IAAMC,EAASC,EADIR,GAAG,CAACC,GACAA,EAAKK,MAAM,CAClC,OAAOG,EAAAA,EAAWA,CAACC,oBAAoB,CAACH,EAAQF,EAClD,EAXmBN,EAaHY,mBAAAA,CAAsB,CAACC,EAAmBC,IACxDJ,EAAAA,EAAWA,CAACK,gBAAgB,CAACF,EAAaC,CAAAA,GAAe,qFCI7DE,CAAAA,EAAAC,CAAA,CAVsD,OAAC,CACrDC,SAAAA,CAAQ,CACRtC,MAAAA,CAAK,CACLuC,SAAAA,CAAQ,CACRC,cAAAA,CAAa,CACd,CAAA5B,QAAK,GAAA6B,EAAAC,GAAA,EAACC,EAAAA,CAASA,CAAAA,CAACL,SAAUA,EAAUM,UAAS,GAACC,MAAM,eAAeC,KAAK,yBAAyBP,SAAUA,EAAUQ,OAAM,GAAC/C,MAAOA,EAAOgD,sBAAoB,YAAYC,wBAAsB,oBAAoBC,0BAAwB,iCACxO,CAAE,SAAU,WAAY,aAAa,CAA2DxC,GAAG,CAACyC,GAA0B,GAAAV,EAAAC,GAAA,EAACU,EAAAA,CAAQA,CAAAA,CAA8BpD,MAAOmD,WACtKE,CAAAA,EAAAA,EAAAA,CAAAA,EAA2Bb,EAAeW,IAD6FA,oIC+ClJf,CAAAA,EAAAC,CAAA,CApD8D,OAAC,CAC7DC,SAAAA,CAAQ,CACRgB,OAAAA,CAAM,CACNjD,gBAAAA,CAAe,CAChB,CAAAO,EAQO,CACJiC,MAAAA,CAAK,CACLU,QAAAA,CAAO,CACR,CAAGC,CAAAA,EAAAA,EAAAA,OAAAA,EAAQ,KACV,OAAQF,EAAO7C,MAAM,CAACgD,cAAc,EAClC,IAAK,SACH,MAAO,CACLZ,MAAO,QACPU,QAASlD,MAAAA,EAAAA,KAAAA,EAAAA,EAAiBqD,MAAM,CAEpC,KAAK,UACH,MAAO,CACLb,MAAO,SACPU,QAASlD,MAAAA,EAAAA,KAAAA,EAAAA,EAAiBsD,OAAO,CAErC,KAAK,YACH,MAAO,CACLd,MAAO,WACPU,QAASlD,MAAAA,EAAAA,KAAAA,EAAAA,EAAiBuD,SAAS,CAEvC,SACE,MAAM,MAAU,+BACpB,CACF,EAAG,CAACN,EAAO7C,MAAM,CAACgD,cAAc,CAAEpD,EAAgB,EAClD,MAAO,GAAAoC,EAAAoB,IAAA,EAACC,EAAAA,CAAKA,CAAAA,CAACC,QAAS,EAAGf,sBAAoB,QAAQC,wBAAsB,wBAAwBC,0BAAwB,sCACxH,GAAAT,EAAAC,GAAA,EAACC,EAAAA,CAASA,CAAAA,CAACL,SAAUA,EAAUM,UAAS,GAACC,MAAM,kBAAkBC,KAAK,YAAYP,SAhCxD,IAC5Be,EAAOU,SAAS,CAAC,CACf,GAAGV,EAAO7C,MAAM,CAChBwD,QAAS,EAAE,CACXR,eAAgBS,EAAEC,MAAM,CAACnE,KAAK,EAElC,EA0BuH+C,OAAM,GAAC/C,MAAOsD,EAAO7C,MAAM,CAACgD,cAAc,CAAET,sBAAoB,YAAYE,0BAAwB,qCACpNkB,EAAAA,CAAqBA,CAAC1D,GAAG,CAAC2D,GAAiB,GAAA5B,EAAAC,GAAA,EAACU,EAAAA,CAAQA,CAAAA,CAAqBpD,MAAOqE,WAC5EA,GADsDA,MAI7D,GAAA5B,EAAAC,GAAA,EAAC4B,EAAAA,CAAYA,CAAAA,CAACC,qBAAoB,GAACjC,SAAUA,EAAUM,UAAS,GAAC4B,eAAgBC,GAAUA,EAAO1D,KAAK,CAAE2D,SAAQ,GAACnC,SAAU,CAAC2B,EAAGS,IAAMrB,EAAOsB,aAAa,CAAC,UAAWD,GAAIpB,QAASA,EAASsB,YAAaC,GAAU,GAAArC,EAAAC,GAAA,EAACC,EAAAA,CAASA,CAAAA,CAAE,GAAGmC,CAAM,CAAEjC,MAAOA,EAAOkC,YAAa,qBAAyCjF,MAAA,CAApB+C,EAAMmC,WAAW,MAAUC,aAAc,CAACC,EAAOT,EAAAA,QAAQ,CACnVU,SAAAA,CAAQ,CACT,CAAAvE,QAAK,GAAAwE,EAAAC,aAAA,EAACC,KAAAA,CAAI,GAAGJ,CAAK,CAAEK,IAAKd,EAAO1D,KAAK,WAC9B,GAAA0B,EAAAC,GAAA,EAAC8C,EAAAA,CAAQA,CAAAA,CAACC,QAASN,EAAUO,MAAO,CACxCC,YAAa,CACf,IACOlB,EAAO1D,KAAK,KACRf,MAAOsD,EAAO7C,MAAM,CAACwD,OAAO,CAAEjB,sBAAoB,eAAeE,0BAAwB,gCAE1G,gIChCAd,CAAAA,EAAAC,CAAA,CArBkE,OAAC,CACjEC,SAAAA,CAAQ,CACRC,SAAAA,CAAQ,CACT,CAAA3B,QAAK,GAAA6B,EAAAC,GAAA,EAACC,EAAAA,CAASA,CAAAA,CAACL,SAAUA,EAAUM,UAAS,GAACC,MAAM,cAAcN,SAAUA,EAAUwC,YAAY,iCAAiChC,OAAM,GAACC,sBAAoB,YAAYC,wBAAsB,0BAA0BC,0BAAwB,uCAC9O0C,OAAOC,OAAO,CAACC,EAAAA,EAAsBA,EAAEpF,GAAG,CAAC,OAAC,CAACqF,EAAM,CACpDjD,KAAAA,CAAI,CACL,CAAC,CAAAlC,QAAK,GAAA6B,EAAAC,GAAA,EAACU,EAAAA,CAAQA,CAAAA,CAAYpD,MAAO+F,WAC7B,GAAAtD,EAAAoB,IAAA,EAACC,EAAAA,CAAKA,CAAAA,CAACkC,WAAW,SAASC,UAAU,MAAMlC,QAAS,YAClD,GAAAtB,EAAAC,GAAA,EAACwD,EAAAA,CAAMA,CAAAA,CAACC,GAAI,CACdC,OAAQ,GACRC,MAAO,EACT,WACM,GAAA5D,EAAAC,GAAA,EAAC4D,EAAAA,CAAOA,CAAAA,CAACC,KAAM,gBAAqBzG,MAAA,CAALiG,GAAQI,GAAI,CAC7CC,OAAQ,OACRC,MAAO,MACT,MAEE,GAAA5D,EAAAC,GAAA,EAAC8D,EAAAA,CAAUA,CAAAA,CAACC,QAAQ,iBAAS3D,QAXfA,sKCTT,OAAM4D,EA2BrB,CA3BqBA,EACZC,WAAAA,CAAc,MAAOC,QAEHC,EAAAA,EAKrBC,EAAAA,EAQ4BA,EAR5BA,EANF,IAAMD,EAAW,MAAME,EAAAA,CAA2BA,CAACC,gBAAgB,CAACJ,GAC9DE,EAAiBD,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAUI,QAAQ,GAAlBJ,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAoBK,SAAS,GAA7BL,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAA+BM,KAAK,CAAC7G,IAAI,CAC9D,GAAUC,2CAAAA,EAAK6G,EAAE,EAGbC,EACJP,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAgBQ,OAAO,CACpBhH,IAAI,CAAC,GAAUC,UAAAA,EAAK6G,EAAE,CAAK,GAD9BN,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAEIrG,MAAM,GAFVqG,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAEYpG,GAAG,CAAC,QAGAc,EAA6CA,QAHnC,CACtBb,sBAAuBa,EAAIb,qBAAqB,CAChDX,MAAOwB,EAAIxB,KAAK,CAChBuH,WAAY/F,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAKhB,KAAK,GAAVgB,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAYgG,SAAS,IAAK,iBAAmBhG,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAKhB,KAAK,GAAVgB,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAYf,MAAM,CAAG,EAAE,MALpFqG,KAAAA,IAAAA,EAAAA,EAMS,EAAE,CAEPW,EAAwBX,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAgBQ,OAAO,CAAChH,IAAI,CAAC,GAAUC,oBAAAA,EAAK6G,EAAE,CAAK,GAAnDN,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAuErG,MAAM,CAE3G,MAAO,CACL8C,QAAS8D,EACThH,gBAAiB,CACfsD,QAASpF,EAAAA,CAAaA,CAACyC,iBAAiB,CAACyG,GACzC7D,UAAWrF,EAAAA,CAAaA,CAAC4C,mBAAmB,CAACsG,GAC7C/D,OAAQnF,EAAAA,CAAaA,CAAC6B,gBAAgB,CAACqH,EACzC,CACF,CACF,6PCzBa,OAAMC,EA6ErB,CA7EqBA,EACZC,aAAAA,CAAgB,IACrB,IAAMC,EAAS,IAAIC,IA0BnB,OAxBAC,EAAQC,OAAO,CAAC,OAAC,CAAEC,OAAAA,CAAM,CAAEC,YAAAA,CAAW,CAAEC,KAAAA,CAAI,CAAE,aAAcC,CAAS,CAAEC,SAAAA,CAAQ,CAAE,GAAGC,EAAM,CAAAzH,EACnFgH,EAAOU,GAAG,CAACJ,IASdN,EAAOW,GAAG,CAACL,EARsC,CAC/CD,YAAa,CAACA,EAAY,CAC1BD,OAAQ,CAACA,EAAO,CAChBE,KAAM,CAACA,EAAK,CACZ,aAAc,CAACC,EAAU,CACzBC,SAAU,CAACA,EAAS,GAMxB,IAAM3H,EAASmH,EAAOY,GAAG,CAACN,GAC1BtC,OAAOC,OAAO,CAACwC,GAAMN,OAAO,CAAC,OAAC,CAACU,EAASzI,EAAM,CAAAY,EACtC6H,KAAWhI,GAAW,SAASX,MAAA,CAANE,IAC7BS,CAAAA,CAAM,CAACgI,EAA6B,CAAG,EAAE,EAExB,MAAf,GAAS3I,MAAA,CAANE,IACLS,CAAM,CAACgI,EAA6B,CAACpK,IAAI,CAAC,CAAC2B,EAE/C,EACF,GAEO0I,MAAMC,IAAI,CAACf,EAAOnH,MAAM,IAAIC,GAAG,CAAC,GACrCkF,OAAQgD,IAAI,CAAClB,EAAKmB,eAAe,EAA+C5H,MAAM,CACpF,CAACM,EAAKgE,IAAS,EACb,GAAGhE,CAAG,CACN,CAACgE,EAAI,CAAE,GAAyEzF,MAAA,CAAtE4H,EAAKmB,eAAe,CAACtD,EAAI,CAACuD,GACtC,GACA,CAAC,GAGP,EArCmBpB,EAuCKmB,eAAAA,CAAkB,CACxC,aAAc,GAAaE,CAAO,CAAC,aAAa,CAAC,EAAE,CACnDb,KAAM,GAAaa,EAAQb,IAAI,CAAC,EAAE,CAClCE,SAAU,GAAaW,EAAQX,QAAQ,CAAC,EAAE,CAC1C,oBAAqB,GAAahH,EAAAA,CAAsBA,CAACC,GAAG,CAAC0H,CAAO,CAAC,oBAAoB,EACzF,mBAAoB,GAAa3H,EAAAA,CAAsBA,CAACK,OAAO,CAACsH,CAAO,CAAC,mBAAmB,CAAE,GAC7F,gCAAiC,GAAa3H,EAAAA,CAAsBA,CAACC,GAAG,CAAC0H,CAAO,CAAC,gCAAgC,EACjH,+BAAgC,GAAa3H,EAAAA,CAAsBA,CAACC,GAAG,CAAC0H,CAAO,CAAC,+BAA+B,EAC/G,+BAAgC,GAAa3H,EAAAA,CAAsBA,CAACC,GAAG,CAAC0H,CAAO,CAAC,+BAA+B,EAC/GC,OAAQ,GAAa5H,EAAAA,CAAsBA,CAACC,GAAG,CAAC0H,EAAQC,MAAM,EAC9D,aAAc,GAAa5H,EAAAA,CAAsBA,CAACK,OAAO,CAACsH,CAAO,CAAC,aAAa,CAAE,GACjF,cAAe,GAAa3H,EAAAA,CAAsBA,CAACK,OAAO,CAACsH,CAAO,CAAC,cAAc,CAAE,GACnF,2BAA4B,GAAa3H,EAAAA,CAAsBA,CAACC,GAAG,CAAC0H,CAAO,CAAC,2BAA2B,EACvG,0BAA2B,GAAa3H,EAAAA,CAAsBA,CAACC,GAAG,CAAC0H,CAAO,CAAC,0BAA0B,EACrG,0BAA2B,GAAa3H,EAAAA,CAAsBA,CAACC,GAAG,CAAC0H,CAAO,CAAC,0BAA0B,EACrG,kBAAmB,GAAa3H,EAAAA,CAAsBA,CAACC,GAAG,CAAC0H,CAAO,CAAC,kBAAkB,EACrF,kBAAmB,GAAa3H,EAAAA,CAAsBA,CAACK,OAAO,CAACsH,CAAO,CAAC,kBAAkB,CAAE,GAC3F,8BAA+B,GAAa3H,EAAAA,CAAsBA,CAACC,GAAG,CAAC0H,CAAO,CAAC,8BAA8B,EAC7G,6BAA8B,GAAa3H,EAAAA,CAAsBA,CAACC,GAAG,CAAC0H,CAAO,CAAC,6BAA6B,EAC3G,6BAA8B,GAAa3H,EAAAA,CAAsBA,CAACC,GAAG,CAAC0H,CAAO,CAAC,6BAA6B,EAC3G,kBAAmB,GAAa3H,EAAAA,CAAsBA,CAACC,GAAG,CAAC0H,CAAO,CAAC,kBAAkB,EACrF,wBAAyB,GAAa3H,EAAAA,CAAsBA,CAACC,GAAG,CAAC0H,CAAO,CAAC,wBAAwB,EACjG,kBAAmB,GACjB3H,EAAAA,CAAsBA,CAACY,mBAAmB,CACxCZ,EAAAA,CAAsBA,CAACC,GAAG,CAAC0H,CAAO,CAAC,kBAAkB,EACrD3H,EAAAA,CAAsBA,CAACC,GAAG,CAAC0H,EAAQC,MAAM,GAE7C,iBAAkB,GAAa5H,EAAAA,CAAsBA,CAACK,OAAO,CAACsH,CAAO,CAAC,iBAAiB,CAAE,GACzF,8BAA+B,GAC7B3H,EAAAA,CAAsBA,CAACK,OAAO,CAACsH,CAAO,CAAC,8BAA8B,CAAE,GACzE,6BAA8B,GAAa3H,EAAAA,CAAsBA,CAACC,GAAG,CAAC0H,CAAO,CAAC,6BAA6B,EAC3G,6BAA8B,GAAa3H,EAAAA,CAAsBA,CAACC,GAAG,CAAC0H,CAAO,CAAC,6BAA6B,EAC3Gd,YAAa,GAAac,EAAQd,WAAW,CAAC,EAAE,CAChDD,OAAQ,GAAae,EAAQf,MAAM,CAAC,EAAE,CClD3B,OAAMiB,EA8MrB,CA9MqBA,EACKC,SAAAA,CAAY,IADjBD,EAGKE,wBAAAA,CAA2B,IACjD,GAAM,CAAEC,gBAAAA,CAAe,CAAE3F,eAAAA,CAAc,CAAE4F,MAAAA,CAAK,CAAEC,MAAAA,CAAK,CAAEC,cAAAA,CAAa,CAAEC,cAAAA,CAAa,CAAE,CAAG7K,EACxF,GAAI4K,GAAiB,CAACD,EACpB,MAAM,MAAU,0DAElB,IAAMG,EAAeC,EAAAA,CAAmBA,CAACC,+BAA+B,CAAClG,EAAgB+F,GAEnFI,EAAmB,CACvB,CAAExC,GAAI,kBAAmBpH,MAAOyD,EAAeuB,WAAW,GAAIwC,UAAW,IAAK,KAC3EiC,EACJ,CAYD,OAVIH,GACFM,EAAiBvL,IAAI,CAAC,CAAE+I,GAAI,QAASpH,MAAOsJ,EAAO9B,UAAW,IAAK,GAEjE+B,GACFK,EAAiBvL,IAAI,CAAC,CAAE+I,GAAImC,EAAcnC,EAAE,CAAEpH,MAAOuJ,EAAcvJ,KAAK,CAAEwH,UAAW,gBAAiB,GAEpG6B,GACFO,EAAiBvL,IAAI,CAAC,CAAE+I,GAAI,QAASpH,MAAOqJ,EAAO7B,UAAW,MAAO,GAGhE,CACLqC,QAAS,CACPD,iBAAAA,EACAE,SAAU,yCACVC,OAAQ,yCACRC,kBAAmB,CAACZ,EAAgB,CACpCa,iBAAkB,CAChB,CACEC,UAAW,GACXC,WAAY,EACZC,SAAUnB,EAAKC,SAAS,CACxBY,SAAU,yCACVO,WAAY,QACZC,eAAgB,mBAClB,EACD,EAEHd,cAAeA,EAAce,WAAW,EAC1C,CACF,EA5CmBtB,EA8CKuB,iBAAAA,CAAoB,IAC1C,GAAM,CAAEC,eAAAA,CAAc,CAAE,GAAGC,EAAQ,CAAGC,EACtC,OAAOF,EAAe/J,GAAG,CAAC,GACxBuI,EAAKE,wBAAwB,CAAC,CAAE,GAAGuB,CAAM,CAAElB,cAAe1I,IAAAA,EAAS,CAAC0I,EAAeoB,EAAAA,EAAWA,CAAE,GAEpG,EAnDmB3B,EAqDK4B,eAAAA,CAAkB,MACxCC,EACA1B,EACAzK,EACAoM,EACAtH,EACAuH,EACAC,EACAC,SAMIC,EAJJ,IAAMC,EAAgC,EAAE,CAClCC,EAAmBpC,EAAKC,SAAS,CAAG+B,EAEtCd,EAAa,EAEjB,EAAG,CACD,GAAM,CAAEmB,WAAAA,CAAU,CAAEC,KAAAA,CAAI,CAAE,CAAG,MAAMxE,EAAAA,CAA2BA,CAAC8D,eAAe,CAC5EC,EACAU,IAAAA,SAAW,CAAC,CACV,GAAG7M,EAAMkL,OAAO,CAChBI,iBAAkBtL,EAAMkL,OAAO,CAACI,gBAAgB,CAACvJ,GAAG,CAAC,GAAgB,EACnE,GAAG+K,CAAS,CACZtB,WAAYA,EAAa,CAC3B,GACF,IAOF,GAJmBuB,KAAAA,IAAfP,GACFA,CAAAA,EAAaQ,KAAKC,IAAI,CAACN,EAAarC,EAAKC,SAAS,GAGhD,CAACoC,EAAY,CACfJ,EAAoB,CAACF,EAAgB,GAAKK,GAC1C,QACF,CAEAE,EAAKxD,OAAO,CAAC,IACX8D,EAAI5D,WAAW,CAAGnC,EAAAA,EAAsB,CAACsD,EAAgB,CAACtG,IAAI,CAC9D+I,EAAI7D,MAAM,CAAG0B,EAAAA,CAAmBA,CAACoC,kBAAkB,CAACrI,EAAgB9E,EAAM6K,aAAa,EACvFE,EAAAA,CAAmBA,CAACqC,uBAAuB,CAAa,CAAC,aAAa,CAAEF,GACxET,EAAW/M,IAAI,CAACwN,EAClB,GAEA,IAAMG,EAAgB7B,IAAgBgB,EAAcE,EACpDH,EAAoBF,EAAgBK,EAAmBW,GAEnD7B,CAAAA,IAAegB,GAAcH,IAAkBC,EAAiB,IAClE,MAAMgB,EAAAA,EAAKA,CAACC,KAAK,CAACxC,EAAAA,CAAmBA,CAACyC,yBAAyB,GAEnE,OAAShC,EAAagB,EAAY,CAElC,OAAOC,CACT,EAzGmBnC,EA2GZmD,YAAAA,CAAe,MACpBtB,EACAuB,EACAnB,EACAoB,KAEA,GAAM,CACJlD,gBAAAA,CAAe,CACf3F,eAAAA,CAAc,CACd6F,MAAAA,CAAK,CACLD,MAAAA,CAAK,CACLjB,SAAAA,CAAQ,CACRmE,wBAAyBC,CAAmB,CAC5CrJ,uBAAAA,CAAsB,CACvB,CAAGkJ,EAEEI,EAAYxD,EAAKuB,iBAAiB,CAAC,CACvCpB,gBAAAA,EACAqB,eAAgB4B,EAAYpI,OAAO,CAACvD,GAAG,CAAC,OAAC,CAAEG,KAAAA,CAAI,CAAE,CAAAD,SAAKC,EAAK6L,GAAG,GAAGnC,WAAW,KAC5E9G,eAAAA,EACA6F,MAAAA,EACAD,MAAAA,EACA,GAAIjB,GAAY,CAAEmB,cAAe,CAAEnC,GAAI,GAAStH,MAAA,CAANwJ,EAAM,aAAYtJ,MAAOoI,CAAS,CAAE,CAAC,GAG3EuE,EAAUC,EAAAA,CAAeA,CAACC,gBAAgB,CAC1C9B,EAAqC,EAAE,CACvC+B,EAAe,EAAE,CAEvB,IAAK,GAAM,CAACC,EAAGC,EAAS,GAAIP,EAAU5G,OAAO,GAC3C,GAAI,CACF,IAAMuF,EAAa,MAAMnC,EAAK4B,eAAe,CAC3CC,EACA1B,EACA4D,EACAjC,EACAtH,EACAsJ,EACAN,EAAU9K,MAAM,CAChBuJ,EAGE/H,CAA2B,aAA3BA,EACFmJ,EAAe,CACb,GAAIE,UAAAA,EACA,CACE,GAAIA,iBAAAA,EACA,CAAES,QAAS7B,CAAW,EACtB,CACE8B,wBAAyBxD,EAAAA,CAAmBA,CAACyD,iBAAiB,CAC5D/B,EACAuB,EAEJ,CAAC,EAEP,CAAES,QAAS1D,EAAAA,CAAmBA,CAAC2D,eAAe,CAAiBjC,EAAYuB,EAAS,CAAC,CACzFW,SAAU,GAAmCN,MAAAA,CAAhCvJ,EAAeuB,WAAW,GAAG,KAAoDlE,MAAAA,CAAjDkM,EAASxD,aAAa,CAAC5K,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,cAAiDkB,MAAA,CAArCgB,MAASyJ,WAAW,GAAG3L,KAAK,CAAC,IAAI,CAAC,EAAE,EAClI2O,YAAaf,EACbgB,eAAgBnB,CAClB,GAEAtB,EAAgB1M,IAAI,IAAI+M,EAE5B,CAAE,MAAOqC,EAAO,CACd/D,EAAAA,CAAmBA,CAACgE,kBAAkB,CAACD,GACvCX,EAAazO,IAAI,CAACoF,EACpB,CAGF,GAAIN,aAAAA,EAAuC,CACzC,IAAMwK,EAAexK,eAAAA,EACf8J,EAAUU,EAAejG,EAAoBC,aAAa,CAACoD,GAAmBA,EAC9EuC,EAAW,GAAmCK,MAAAA,CAAhClK,EAAeuB,WAAW,GAAG,KAAgDlE,MAAAA,CAA7C6M,EAAe,cAAgB,GAAG,aAAgD7N,MAAA,CAArCgB,MAASyJ,WAAW,GAAG3L,KAAK,CAAC,IAAI,CAAC,EAAE,EACrI0N,EAAe,CACb,GAAIE,UAAAA,EACA,CACE,GAAIA,iBAAAA,EACA,CAAES,QAAAA,CAAQ,EACV,CACEC,wBAAyBxD,EAAAA,CAAmBA,CAACyD,iBAAiB,CAC5DQ,EAAejG,EAAoBC,aAAa,CAACoD,GAAmBA,EACpE4B,EAEJ,CAAC,EAEP,CACES,QAAS1D,EAAAA,CAAmBA,CAAC2D,eAAe,CAC1CM,EAAejG,EAAoBC,aAAa,CAACoD,GAAmBA,EACpE4B,EAEJ,CAAC,CACLW,SAAAA,EACAC,YAAaf,EACbgB,eAAgBnB,CAClB,EACF,CAEA,OAAOS,CACT,kDCpIFc,EA5EkC,QAqDb3G,EAAAA,EAgBKM,KArES,CACjCjF,SAAAA,CAAQ,CACR2E,SAAAA,CAAQ,CACR4G,UAAAA,CAAS,CACT3C,oBAAAA,CAAmB,CACnB4C,kBAAAA,CAAiB,CACjBxB,eAAAA,CAAc,CACf,CAAA1L,EACOgG,EAAoBmH,CAAAA,EAAAA,EAAAA,EAAAA,EAAYC,EAAAA,CAAaA,CAACC,yBAAyB,EACvEC,EAAiB,MAAOC,IAC5B,GAAI,CACF,IAAMrB,EAAe,MAAM7D,EAAiBmD,YAAY,CAACxF,EAAoBuH,EAAUjD,EAAqBoB,EACxGQ,CAAAA,EAAanL,MAAM,EACrByM,CAAAA,EAAAA,EAAAA,EAAAA,EAAgB,0EAAkGtO,MAAA,CAAxBgN,EAAauB,IAAI,CAAC,OAAS,CACnHC,QAAS,GACTC,iBAAkB,GAClB9H,QAAS,OACX,EAEJ,CAAE,MAAO+H,EAAU,KACDA,EAAhBJ,CAAAA,EAAAA,EAAAA,EAAAA,EAAgBI,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAKC,OAAO,GAAZD,KAAAA,IAAAA,EAAAA,EAAgB,uBAAwB,CACtD/H,QAAS,OACX,EACF,QAAU,CACRqH,EAAkB,GAClB5C,EAAoB,KACtB,CACF,EACM5H,EAASoL,CAAAA,EAAAA,EAAAA,EAAAA,EAAyB,CACtCC,cAAe,CACbpC,wBAAyB,QACzBqC,oBAAqB,QACrBC,oBAAqB,GACrBzF,gBAAiB,GACjB0F,8BAA+B,GAC/B7K,QAAS,EAAE,CACXR,eAAgB,SAChB4G,WAAY,MACZlH,uBAAwB,QAC1B,EACA4L,SAAU,MAAOtO,EAAQuO,KACvB9D,EAAoB,GACpB,MAAMgD,EAAezN,GACrBuO,EAAcC,aAAa,CAAC,GAC9B,EACAC,iBAAkBC,EAAAA,EAAU,GAAGC,KAAK,CAAC,CACnC/F,MAAO8F,EAAAA,EAAU,GAAGE,IAAI,CAAC,WAAY,iDAAkDrP,QAAUA,EAAAA,EAAAA,QAAD,CAACA,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAOpB,KAAK,GAAZoB,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAAA,IAAAA,CAAAA,EAAe,QAAfA,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAsB2B,MAAM,GAA5B3B,KAAAA,IAAAA,EAAAA,EAAgC,IAAM,GAAE,GACzIsJ,MAAO6F,EAAAA,EAAU,GACjB/F,gBAAiB+F,EAAAA,EAAU,GAAGG,QAAQ,CAAC,iCACvCrL,QAASkL,EAAAA,EAAS,GAAGG,QAAQ,GAAGD,IAAI,CAAC,UAAW,sCAAuCpL,GAAW,CAAC,CAACA,EAAQtC,MAAM,CACpH,EACF,GACM4N,EAAuBC,EAAAA,CAAeA,CAACD,oBAAoB,CAACjM,EAAO7C,MAAM,EACzE8G,EAAaN,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAU1D,OAAO,GAAjB0D,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,EAAAA,EAAmB3G,IAAI,CAACmP,GAAOA,EAAIzP,KAAK,GAAKsD,EAAO7C,MAAM,CAAC6I,KAAK,IAAhErC,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAmEM,UAAU,CAChG,MAAO,GAAAmI,EAAA7L,IAAA,EAAA6L,EAAAC,QAAA,YACH,GAAAD,EAAAhN,GAAA,EAACkN,EAAAA,CAAuBA,CAAAA,CAACtN,SAAUA,EAAUC,SAAU2B,GAAKZ,EAAOsB,aAAa,CAAC,kBAAmBV,EAAEC,MAAM,CAACnE,KAAK,EAAGgD,sBAAoB,0BAA0BE,0BAAwB,gBAC3L,GAAAwM,EAAAhN,GAAA,EAACmN,EAAAA,CAAiBA,CAAAA,CAACvN,SAAUA,EAAUE,cAAc,aAAaD,SAAUe,EAAOwM,YAAY,CAAE9P,MAAOsD,EAAO7C,MAAM,CAAC0C,sBAAsB,CAAEH,sBAAoB,oBAAoBE,0BAAwB,gBAC9M,GAAAwM,EAAAhN,GAAA,EAACqN,EAAAA,CAAqBA,CAAAA,CAACzN,SAAUA,EAAUgB,OAAQA,EAAkDjD,gBAAiB4G,EAAS5G,eAAe,CAAE2C,sBAAoB,wBAAwBE,0BAAwB,gBACpN,GAAAwM,EAAAhN,GAAA,EAACC,EAAAA,CAASA,CAAAA,CAACL,SAAUA,EAAUmL,MAAO,CAAC,CAACnK,EAAO0M,MAAM,CAAC3G,KAAK,CAAEzG,UAAS,GAACqN,WAAY3M,EAAO4M,OAAO,CAAC7G,KAAK,CAAG/F,EAAO0M,MAAM,CAAC3G,KAAK,CAAG,KAAMjC,GAAG,QAAQvE,MAAM,mCAAmCsN,UAAS,GAACrN,KAAK,QAAQsN,OAAQ9M,EAAO+M,UAAU,CAAE9N,SAAUe,EAAOwM,YAAY,CAAE/K,YAAY,qCAAqCwG,KAAM,EAAGvL,MAAOsD,EAAO7C,MAAM,CAAC4I,KAAK,CAAE5C,QAAQ,WAAWzD,sBAAoB,YAAYE,0BAAwB,gBAC5a,GAAAwM,EAAAhN,GAAA,EAAC4B,EAAAA,CAAYA,CAAAA,CAAChC,SAAUA,EAAUM,UAAS,GAAC4B,eAAgBC,GAAUA,MAAAA,EAAAA,KAAAA,EAAAA,EAAQ9D,qBAAqB,CAAE4B,SAAU,CAACiJ,EAAG8E,SACrFA,EAA9BhN,EAAOsB,aAAa,CAAC,QAAS0L,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAgBtQ,KAAK,GAArBsQ,KAAAA,IAAAA,EAAAA,EAAyB,IACvDhN,EAAOsB,aAAa,CAAC,WAAY,GACnC,EAAGrB,QAAS0D,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAU1D,OAAO,GAAI,EAAE,CAAEsB,YAAaC,GAAU,GAAA4K,EAAAhN,GAAA,EAACC,EAAAA,CAASA,CAAAA,CAAE,GAAGmC,CAAM,CAAEjC,MAAM,mBAAmBkC,YAAY,8BAAgCE,aAAc,CAACC,EAAOT,IAAW,GAAA8L,EAAAlL,aAAA,EAACC,KAAAA,CAAI,GAAGJ,CAAK,CAAEK,IAAKd,EAAO9D,qBAAqB,EAChO8D,EAAO9D,qBAAqB,EACxBqC,sBAAoB,eAAeE,0BAAwB,gBACrEI,EAAO7C,MAAM,CAAC6I,KAAK,CAAG,GAAAoG,EAAAhN,GAAA,EAAC4B,EAAAA,CAAYA,CAAAA,CAA2BhC,SAAUA,EAAUM,UAAS,GAAC4B,eAAgBC,GAAUA,MAAAA,EAAAA,KAAAA,EAAAA,EAAQ9D,qBAAqB,CAAE4B,SAAU,CAACiJ,EAAG8E,SACnIA,EAAjChN,EAAOsB,aAAa,CAAC,WAAY0L,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAgBtQ,KAAK,GAArBsQ,KAAAA,IAAAA,EAAAA,EAAyB,GAC5D,EAAG/M,QAASgE,MAAAA,EAAAA,EAAc,EAAE,CAAE1C,YAAaC,GAAU,GAAA4K,EAAAhN,GAAA,EAACC,EAAAA,CAASA,CAAAA,CAAE,GAAGmC,CAAM,CAAEjC,MAAM,sBAAsBkC,YAAY,iCAAmCE,aAAc,CAACC,EAAOT,IAAW,GAAA8L,EAAAlL,aAAA,EAACC,KAAAA,CAAI,GAAGJ,CAAK,CAAEK,IAAKd,EAAO9D,qBAAqB,EAC7N8D,EAAO9D,qBAAqB,EACxBX,MAAOuH,OAAAA,CAAAA,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,EAAYjH,IAAI,CAACkQ,GAAOA,EAAIxQ,KAAK,GAAKsD,EAAO7C,MAAM,CAAC2H,QAAQ,IAA5Db,KAAAA,IAAAA,EAAAA,EAAiE,MAJ3CjE,EAAO7C,MAAM,CAAC6I,KAAK,EAImC,KAChG,GAAAoG,EAAAhN,GAAA,EAAC+N,EAAAA,CAAqBA,CAAAA,CAACnO,SAAUA,EAAUgB,OAAQA,EAAQ+G,WAAW,MAAMrH,sBAAoB,wBAAwBE,0BAAwB,gBAChJ,GAAAwM,EAAAhN,GAAA,EAACgO,EAAAA,CAAaA,CAAAA,CAACpO,SAAU,CAACgB,EAAOqN,OAAO,EAAIpB,GAAwBjN,EAAUsO,QAAS/C,EAAWgD,QAASvN,EAAOwN,UAAU,CAAErK,QAAQ,YAAYzD,sBAAoB,gBAAgBE,0BAAwB,uBAAc,aAIlO,ECpEA6N,EAzBsB,KACpB,GAAM,CACJC,eAAAA,CAAc,CACdC,cAAAA,CAAa,CACbhK,SAAAA,CAAQ,CACRiK,eAAAA,CAAc,CACdhG,oBAAAA,CAAmB,CACnBoB,eAAAA,CAAc,CACdwB,kBAAAA,CAAiB,CAClB,CAAGqD,CAAAA,EAAAA,EAAAA,CAAAA,EAAiBzK,EAAiBC,WAAW,CAAE,CACjDpD,QAAS,EAAE,CACXlD,gBAAiB,CACfsD,QAAS,EAAE,CACXC,UAAW,EAAE,CACbF,OAAQ,EAAE,CAEd,GACA,MAAO,GAAAgM,EAAA7L,IAAA,EAACuN,EAAAA,CAAmBA,CAAAA,CAACrQ,MAAM,6BAA6BiC,sBAAoB,sBAAsBC,wBAAsB,YAAYC,0BAAwB,0BAC/J,GAAAwM,EAAAhN,GAAA,EAAC2O,EAAAA,CAAoBA,CAAAA,CAACJ,cAAeA,EAAeC,eAAgBA,EAAgBlO,sBAAoB,uBAAuBE,0BAAwB,kBACvJ,GAAAwM,EAAA7L,IAAA,EAACC,EAAAA,CAAKA,CAAAA,CAACC,QAAS,EAAGf,sBAAoB,QAAQE,0BAAwB,0BACrE,GAAAwM,EAAAhN,GAAA,EAAC4O,EAAOA,CAAChP,SAAU,CAAC,CAAC0O,GAAkBE,YAAAA,EAA8B5E,eAAgBA,EAAgBuB,UAAW,CAAC,CAACmD,EAAgB/J,SAAUA,EAAUiE,oBAAqBA,EAAqB4C,kBAAmBA,EAAmB9K,sBAAoB,UAAUE,0BAAwB,kBAC3R8N,EAAiB,GAAAtB,EAAAhN,GAAA,EAAC6O,EAAAA,CAAiBA,CAAAA,CAAC1O,MAAOmO,EAAenO,KAAK,CAAE2O,SAAUR,EAAeQ,QAAQ,GAAO,UAGlH,ECjBAC,EAX0B,KACxB,GAAM,CACJC,QAAAA,CAAO,CACR,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,IACJ,MAAO,GAAAjC,EAAA7L,IAAA,EAAA6L,EAAAC,QAAA,YACH,GAAAD,EAAAhN,GAAA,EAACkP,IAAIA,CAAC5O,sBAAoB,OAAOE,0BAAwB,mBACvD,GAAAwM,EAAAhN,GAAA,EAAC3B,QAAAA,UAAO,gBAAwBjB,MAAA,CAAR4R,OAE1B,GAAAhC,EAAAhN,GAAA,EAACmP,EAASA,CAAC7O,sBAAoB,YAAYE,0BAAwB,cAEzE,4FCEO,IAAMkB,EAAwB,CAAC,SAAU,UAAW,YAAY,CA4C1Df,EAA6B,CAACyO,EAAqBC,IAC9D,CACG,CACCC,WAAY,oBAAgClS,MAAA,CAAZgS,EAAY,kBAC5CG,SAAU,gBAA4BnS,MAAA,CAAZgS,GAC1BI,OAAQ,oBAAgCpS,MAAA,CAAZgS,EAAY,IAC1C,EACD,CAACC,EAAK","sources":["webpack://_N_E/?6485","webpack://_N_E/./src/utils/reports/MetadataUtils.ts","webpack://_N_E/./src/utils/reports/ReportAggregationUtils.ts","webpack://_N_E/./src/components/reportFetcher/common/CSVGroupingPicker.tsx","webpack://_N_E/./src/components/reportFetcher/common/ReportDateRangePicker.tsx","webpack://_N_E/./src/components/reportFetcher/common/ReportMarketplaceSelect.tsx","webpack://_N_E/./src/utils/reports/scp/SCPMetadataUtils.ts","webpack://_N_E/./src/utils/reports/scp/SCPAggregationUtils.ts","webpack://_N_E/./src/utils/reports/scp/SCPDownloadUtils.ts","webpack://_N_E/./src/components/reportFetcher/scp/SCPForm.tsx","webpack://_N_E/./src/components/reportFetcher/scp/SCPReport.tsx","webpack://_N_E/./src/pages/report-fetcher/scp.tsx","webpack://_N_E/../../packages/seller-utilities/types/src/api/reports/common.ts"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/report-fetcher/scp\",\n      function () {\n        return require(\"private-next-pages/report-fetcher/scp.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/report-fetcher/scp\"])\n      });\n    }\n  ","import type { MetadataValue } from '@seller-utilities/types';\nimport moment from 'moment-timezone';\n\ninterface MappedPeriod {\n  date: moment.Moment;\n  title: string;\n}\n\nexport default class MetadataUtils {\n  private static readonly transformWeeklyDateString = (input: string): string => {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'] as const;\n\n    // Split the input string into individual parts\n    const parts = input.split(' | ');\n    const weekPart: string = parts[0];\n    const datePart = parts[1].split(', ');\n    const dateRange = datePart[0].split(' - ');\n    const year = datePart[1];\n\n    // Extract week number from \"Week 12\" or \"Week 47\"\n    const weekNumber: string = weekPart.replace(/Week\\s/, '');\n\n    // Split the date range into start and end dates\n    const [startDate, endDate]: Array<string> = dateRange;\n\n    // Convert start and end dates to Date objects\n    const startDateObj: Date = new Date(startDate);\n    const endDateObj: Date = new Date(endDate);\n\n    // Get month names and dates\n    const startMonth = months[startDateObj.getMonth()];\n    const startDay = startDateObj.getDate();\n    const endMonth = months[endDateObj.getMonth()];\n    const endDay = endDateObj.getDate();\n\n    // Construct the new formatted string\n    return `W${weekNumber} | ${startMonth} ${startDay}, ${year} - ${endMonth} ${endDay}, ${year}`;\n  };\n\n  private static readonly transformMonthlyDateString = (value: string, month: string) => {\n    const year = value.split('-')[0];\n    return `${month} ${year}`;\n  };\n\n  private static readonly transformQuarterlyDateString = (value: string, quarter: string) => {\n    const year = value.split('-')[0];\n    return `Q${quarter} ${year}`;\n  };\n\n  static readonly mapWeeklyPeriods = (reportingRanges?: Array<MetadataValue>) =>\n    reportingRanges\n      ?.find((item) => item.value === 'weekly')\n      ?.child?.values?.map(({ value, localizedDisplayValue }: { value: string; localizedDisplayValue: string }) => ({\n        date: moment.utc(value),\n        title: this.transformWeeklyDateString(localizedDisplayValue)\n      })) ?? [];\n\n  static readonly mapMonthlyPeriods = (reportingRanges?: Array<MetadataValue>) =>\n    reportingRanges\n      ?.find((item) => item.value === 'monthly')\n      ?.child?.values?.reduce((months, currentYear) => {\n        const values =\n          currentYear?.child?.values.map(\n            ({ value, localizedDisplayValue }: { value: string; localizedDisplayValue: string }) => ({\n              date: moment.utc(value),\n              title: this.transformMonthlyDateString(value, localizedDisplayValue)\n            })\n          ) ?? [];\n\n        return months.concat(values);\n      }, [] as Array<MappedPeriod>) ?? [];\n\n  static readonly mapQuarterlyPeriods = (reportingRanges?: Array<MetadataValue>) =>\n    reportingRanges\n      ?.find((item) => item.value === 'quarterly')\n      ?.child?.values?.reduce((quarter, currentYear) => {\n        const values =\n          currentYear?.child?.values.map(\n            ({ value, localizedDisplayValue }: { value: string; localizedDisplayValue: string }) => ({\n              date: moment.utc(value),\n              title: this.transformQuarterlyDateString(value, localizedDisplayValue)\n            })\n          ) ?? [];\n\n        return quarter.concat(values);\n      }, [] as Array<MappedPeriod>) ?? [];\n}\n","import { NumberUtils } from '@riptech/utils';\n\nexport default class ReportAggregationUtils {\n  static readonly sum = (nums: Array<number>): number => nums.reduce((acc, val) => acc + val, 0);\n\n  static readonly average = (nums: Array<number>, precision: number) => {\n    if (!nums.length) {\n      return '';\n    }\n\n    const total = this.sum(nums);\n    const result = total / nums.length;\n    return NumberUtils.roundToDecimalPoints(result, precision);\n  };\n\n  static readonly calculatePercentage = (numerator: number, denominator: number) =>\n    NumberUtils.formatPercentage(numerator / (denominator || 1));\n}\n","import { MenuItem, TextField } from '@mui/material';\nimport type { ReportFileGroupingType, SCPReportForm } from '@seller-utilities/types';\nimport { getReportFileGroupingLabel } from '@seller-utilities/types';\nimport type { ChangeEvent, FC } from 'react';\ninterface CSVGroupingPickerProps {\n  readonly disabled: boolean;\n  readonly value: ReportFileGroupingType;\n  readonly onChange: (e: ChangeEvent) => void;\n  readonly groupingLabel: string;\n}\nconst CSVGroupingPicker: FC<CSVGroupingPickerProps> = ({\n  disabled,\n  value,\n  onChange,\n  groupingLabel\n}) => <TextField disabled={disabled} fullWidth label=\"CSV grouping\" name=\"reportFileGroupingType\" onChange={onChange} select value={value} data-sentry-element=\"TextField\" data-sentry-component=\"CSVGroupingPicker\" data-sentry-source-file=\"CSVGroupingPicker.tsx\">\n    {(['Single', 'Multiple', 'Aggregated'] satisfies Array<SCPReportForm['reportFileGroupingType']>).map(reportFileGroupingType => <MenuItem key={reportFileGroupingType} value={reportFileGroupingType}>\n          {getReportFileGroupingLabel(groupingLabel, reportFileGroupingType)}\n        </MenuItem>)}\n  </TextField>;\nexport default CSVGroupingPicker;","import { Autocomplete, Checkbox, MenuItem, Stack, TextField } from '@mui/material';\nimport type { BaseReportForm, ReportingRanges, SQPFetcherForm } from '@seller-utilities/types';\nimport { REPORTING_RANGE_TYPES } from '@seller-utilities/types';\nimport type { FormikProps } from 'formik';\nimport type { ChangeEvent, FC } from 'react';\nimport { useMemo } from 'react';\ninterface ReportDateRangePickerProps {\n  readonly disabled: boolean;\n  readonly formik: FormikProps<BaseReportForm>;\n  readonly reportingRanges: ReportingRanges;\n}\nconst ReportDateRangePicker: FC<ReportDateRangePickerProps> = ({\n  disabled,\n  formik,\n  reportingRanges\n}) => {\n  const handleChangeRangeType = (e: ChangeEvent<HTMLInputElement>) => {\n    formik.setValues({\n      ...formik.values,\n      periods: [],\n      reportingRange: e.target.value as SQPFetcherForm['reportingRange']\n    });\n  };\n  const {\n    label,\n    options\n  } = useMemo(() => {\n    switch (formik.values.reportingRange) {\n      case 'Weekly':\n        return {\n          label: 'Weeks',\n          options: reportingRanges?.weekly\n        };\n      case 'Monthly':\n        return {\n          label: 'Months',\n          options: reportingRanges?.monthly\n        };\n      case 'Quarterly':\n        return {\n          label: 'Quarters',\n          options: reportingRanges?.quarterly\n        };\n      default:\n        throw new Error('Unknown reporting range type');\n    }\n  }, [formik.values.reportingRange, reportingRanges]);\n  return <Stack spacing={2} data-sentry-element=\"Stack\" data-sentry-component=\"ReportDateRangePicker\" data-sentry-source-file=\"ReportDateRangePicker.tsx\">\n      <TextField disabled={disabled} fullWidth label=\"Reporting range\" name=\"rangeType\" onChange={handleChangeRangeType} select value={formik.values.reportingRange} data-sentry-element=\"TextField\" data-sentry-source-file=\"ReportDateRangePicker.tsx\">\n        {REPORTING_RANGE_TYPES.map(rangeTypeItem => <MenuItem key={rangeTypeItem} value={rangeTypeItem}>\n            {rangeTypeItem}\n          </MenuItem>)}\n      </TextField>\n      <Autocomplete disableCloseOnSelect disabled={disabled} fullWidth getOptionLabel={option => option.title} multiple onChange={(e, v) => formik.setFieldValue('periods', v)} options={options} renderInput={params => <TextField {...params} label={label} placeholder={`Search and select ${label.toLowerCase()}`} />} renderOption={(props, option, {\n      selected\n    }) => <li {...props} key={option.title}>\n            <Checkbox checked={selected} style={{\n        marginRight: 8\n      }} />\n            {option.title}\n          </li>} value={formik.values.periods} data-sentry-element=\"Autocomplete\" data-sentry-source-file=\"ReportDateRangePicker.tsx\" />\n    </Stack>;\n};\nexport default ReportDateRangePicker;","import type { TextFieldProps } from '@mui/material';\nimport { Avatar, MenuItem, Stack, TextField, Typography } from '@mui/material';\nimport { Iconify } from '@riptech/minimal-ui/src/components/iconify';\nimport { SUPPORTED_MARKETPLACES } from '@seller-utilities/database';\nimport type { FC } from 'react';\ninterface ReportMarketplaceSelectProps {\n  readonly disabled: boolean;\n  readonly onChange: TextFieldProps['onChange'];\n}\nconst ReportMarketplaceSelect: FC<ReportMarketplaceSelectProps> = ({\n  disabled,\n  onChange\n}) => <TextField disabled={disabled} fullWidth label=\"Marketplace\" onChange={onChange} placeholder=\"Search and select marketplaces\" select data-sentry-element=\"TextField\" data-sentry-component=\"ReportMarketplaceSelect\" data-sentry-source-file=\"ReportMarketplaceSelect.tsx\">\n    {Object.entries(SUPPORTED_MARKETPLACES).map(([code, {\n    name\n  }]) => <MenuItem key={name} value={code}>\n        <Stack alignItems=\"center\" direction=\"row\" spacing={1}>\n          <Avatar sx={{\n        height: 24,\n        width: 24\n      }}>\n            <Iconify icon={`circle-flags:${code}`} sx={{\n          height: '100%',\n          width: '100%'\n        }} />\n          </Avatar>\n          <Typography variant=\"body2\">{name}</Typography>\n        </Stack>\n      </MenuItem>)}\n  </TextField>;\nexport default ReportMarketplaceSelect;","import type { SellerCentralMarketplace } from '@seller-utilities/database';\nimport type { SCPMetadata } from '@seller-utilities/types';\n\nimport SellerCentralRequestManager from '../../request/SellerCentralRequest/SellerCentralRequestManager';\nimport MetadataUtils from '../MetadataUtils';\n\nexport default class SCPMetadataUtils {\n  static getMetadata = async (activeMarketplace: SellerCentralMarketplace): Promise<SCPMetadata> => {\n    const response = await SellerCentralRequestManager.fetchSCPMetadata(activeMarketplace);\n    const brandsMetadata = response?.metadata?.viewsRoot?.views.find(\n      (item) => item.id === 'brand-catalog-performance-default-view'\n    );\n\n    const brands =\n      brandsMetadata?.filters\n        .find((item) => item.id === 'brand')\n        ?.values?.map((val) => ({\n          localizedDisplayValue: val.localizedDisplayValue,\n          value: val.value,\n          categories: val?.child?.valueType === 'brand-category' ? val?.child?.values : []\n        })) ?? [];\n\n    const brandsReportingRanges = brandsMetadata?.filters.find((item) => item.id === 'reporting-range')?.values;\n\n    return {\n      options: brands,\n      reportingRanges: {\n        monthly: MetadataUtils.mapMonthlyPeriods(brandsReportingRanges),\n        quarterly: MetadataUtils.mapQuarterlyPeriods(brandsReportingRanges),\n        weekly: MetadataUtils.mapWeeklyPeriods(brandsReportingRanges)\n      }\n    };\n  };\n}\n","import type { Arrayify, SCPDataRow } from '@seller-utilities/types';\n\nimport type SCPRequestUtils from '../../request/SellerCentralRequest/utils/SCPRequestUtils';\nimport ReportAggregationUtils from '../ReportAggregationUtils';\n\ntype AggregatedSCPDataRow = Arrayify<SCPDataRow>;\n\nexport default class SCPAggregationUtils {\n  static aggregateData = (scpRows: Array<SCPDataRow>) => {\n    const rowMap = new Map<string, AggregatedSCPDataRow>();\n\n    scpRows.forEach(({ period, marketplace, asin, 'asin-title': asinTitle, category, ...rest }) => {\n      if (!rowMap.has(asin)) {\n        const newValues: Partial<AggregatedSCPDataRow> = {\n          marketplace: [marketplace],\n          period: [period],\n          asin: [asin],\n          'asin-title': [asinTitle],\n          category: [category]\n        };\n\n        rowMap.set(asin, newValues as AggregatedSCPDataRow);\n      }\n\n      const values = rowMap.get(asin)!;\n      Object.entries(rest).forEach(([restKey, value]) => {\n        if (!(restKey in values) || `${value}` === '-') {\n          values[restKey as keyof typeof rest] = [];\n        }\n        if (`${value}` !== '-') {\n          values[restKey as keyof typeof rest].push(+value);\n        }\n      });\n    });\n\n    return Array.from(rowMap.values()).map((brandData) =>\n      (Object.keys(this.SCP_AGGREGATORS) as Array<keyof typeof this.SCP_AGGREGATORS>).reduce(\n        (acc, key) => ({\n          ...acc,\n          [key]: `${this.SCP_AGGREGATORS[key](brandData) satisfies SCPDataRow[typeof key]}`\n        }),\n        {} as SCPDataRow\n      )\n    );\n  };\n\n  private static readonly SCP_AGGREGATORS = {\n    'asin-title': (scpData) => scpData['asin-title'][0],\n    asin: (scpData) => scpData.asin[0],\n    category: (scpData) => scpData.category[0],\n    'impressions-count': (scpData) => ReportAggregationUtils.sum(scpData['impressions-count']),\n    'impression-price': (scpData) => ReportAggregationUtils.average(scpData['impression-price'], 2),\n    'same-day-shipping-impressions': (scpData) => ReportAggregationUtils.sum(scpData['same-day-shipping-impressions']),\n    'one-day-shipping-impressions': (scpData) => ReportAggregationUtils.sum(scpData['one-day-shipping-impressions']),\n    'two-day-shipping-impressions': (scpData) => ReportAggregationUtils.sum(scpData['two-day-shipping-impressions']),\n    clicks: (scpData) => ReportAggregationUtils.sum(scpData.clicks),\n    'ctr-clicks': (scpData) => ReportAggregationUtils.average(scpData['ctr-clicks'], 2),\n    'click-price': (scpData) => ReportAggregationUtils.average(scpData['click-price'], 2),\n    'same-day-shipping-clicks': (scpData) => ReportAggregationUtils.sum(scpData['same-day-shipping-clicks']),\n    'one-day-shipping-clicks': (scpData) => ReportAggregationUtils.sum(scpData['one-day-shipping-clicks']),\n    'two-day-shipping-clicks': (scpData) => ReportAggregationUtils.sum(scpData['two-day-shipping-clicks']),\n    'cart-adds-count': (scpData) => ReportAggregationUtils.sum(scpData['cart-adds-count']),\n    'cart-adds-price': (scpData) => ReportAggregationUtils.average(scpData['cart-adds-price'], 2),\n    'same-day-shipping-cart-adds': (scpData) => ReportAggregationUtils.sum(scpData['same-day-shipping-cart-adds']),\n    'one-day-shipping-cart-adds': (scpData) => ReportAggregationUtils.sum(scpData['one-day-shipping-cart-adds']),\n    'two-day-shipping-cart-adds': (scpData) => ReportAggregationUtils.sum(scpData['two-day-shipping-cart-adds']),\n    'purchases-count': (scpData) => ReportAggregationUtils.sum(scpData['purchases-count']),\n    'total-sales-purchases': (scpData) => ReportAggregationUtils.sum(scpData['total-sales-purchases']),\n    'conversion-rate': (scpData) =>\n      ReportAggregationUtils.calculatePercentage(\n        ReportAggregationUtils.sum(scpData['purchases-count']),\n        ReportAggregationUtils.sum(scpData.clicks)\n      ),\n    'purchase-price': (scpData) => ReportAggregationUtils.average(scpData['purchase-price'], 2),\n    'same-day-shipping-purchases': (scpData) =>\n      ReportAggregationUtils.average(scpData['same-day-shipping-purchases'], 2),\n    'one-day-shipping-purchases': (scpData) => ReportAggregationUtils.sum(scpData['one-day-shipping-purchases']),\n    'two-day-shipping-purchases': (scpData) => ReportAggregationUtils.sum(scpData['two-day-shipping-purchases']),\n    marketplace: (scpData) => scpData.marketplace[0],\n    period: (scpData) => scpData.period[0]\n  } as const satisfies Record<\n    keyof typeof SCPRequestUtils.SCP_DATA_COLUMNS,\n    (scpData: AggregatedSCPDataRow) => number | string | undefined\n  >;\n}\n","import Utils, { NA_TIMEZONE } from '@riptech/utils';\nimport { type SellerCentralMarketplace, SUPPORTED_MARKETPLACES } from '@seller-utilities/database';\nimport type { SCPDataRow, SCPReportForm } from '@seller-utilities/types';\nimport _ from 'lodash';\nimport type { Moment } from 'moment-timezone';\nimport moment from 'moment-timezone';\n\nimport type { DownloadReportInputType } from '../../../components/reportFetcher/useReportFetcher';\nimport SellerCentralRequestManager from '../../request/SellerCentralRequest/SellerCentralRequestManager';\nimport SCPRequestUtils from '../../request/SellerCentralRequest/utils/SCPRequestUtils';\nimport ReportDownloadUtils from '../ReportDownloadUtils';\nimport SCPAggregationUtils from './SCPAggregationUtils';\n\ninterface GenerateSingleSCPFectchInput {\n  marketplaceCode: SellerCentralMarketplace;\n  reportingRange: SCPReportForm['reportingRange'];\n  asins?: string;\n  brand?: string;\n  brandCategory?: {\n    id: string;\n    value: string;\n  };\n  periodEndDate: Moment;\n}\n\ninterface GenerateAPIInputs extends Omit<GenerateSingleSCPFectchInput, 'periodEndDate'> {\n  periodEndDates: Array<string>;\n}\n\nexport default class SCPDownloadUtils {\n  private static readonly PAGE_SIZE = 100;\n\n  private static readonly generateSingleFetchInput = (input: GenerateSingleSCPFectchInput) => {\n    const { marketplaceCode, reportingRange, asins, brand, brandCategory, periodEndDate } = input;\n    if (brandCategory && !brand) {\n      throw new Error('Brand id must be provided if there is a brand category');\n    }\n    const rangeFilters = ReportDownloadUtils.getRangeFiltersByReportingRange(reportingRange, periodEndDate);\n\n    const filterSelections = [\n      { id: 'reporting-range', value: reportingRange.toLowerCase(), valueType: null },\n      ...rangeFilters\n    ];\n\n    if (brand) {\n      filterSelections.push({ id: 'brand', value: brand, valueType: null });\n    }\n    if (brandCategory) {\n      filterSelections.push({ id: brandCategory.id, value: brandCategory.value, valueType: 'brand-category' });\n    }\n    if (asins) {\n      filterSelections.push({ id: 'asins', value: asins, valueType: 'ASIN' });\n    }\n\n    return {\n      payload: {\n        filterSelections,\n        reportId: 'brand-catalog-performance-report-table',\n        viewId: 'brand-catalog-performance-default-view',\n        selectedCountries: [marketplaceCode],\n        reportOperations: [\n          {\n            ascending: false,\n            pageNumber: 1,\n            pageSize: this.PAGE_SIZE,\n            reportId: 'brand-catalog-performance-report-table',\n            reportType: 'TABLE',\n            sortByColumnId: 'impressions-count'\n          }\n        ]\n      } as const,\n      periodEndDate: periodEndDate.toISOString()\n    };\n  };\n\n  private static readonly generateAPIInputs = (inputs: GenerateAPIInputs) => {\n    const { periodEndDates, ...others } = inputs;\n    return periodEndDates.map((periodEndDate) =>\n      this.generateSingleFetchInput({ ...others, periodEndDate: moment.tz(periodEndDate, NA_TIMEZONE) })\n    );\n  };\n\n  private static readonly fetchSCPAPIData = async (\n    activeMarketPlace: SellerCentralMarketplace,\n    marketplaceCode: SellerCentralMarketplace,\n    input: ReturnType<typeof this.generateSingleFetchInput>,\n    combinedResults: Array<SCPDataRow>,\n    reportingRange: SCPReportForm['reportingRange'],\n    apiInputIndex: number,\n    totalApiInputs: number,\n    setDownloadProgress: (newProgress: number) => void\n  ) => {\n    const returnData: Array<SCPDataRow> = [];\n    const progressPerInput = this.PAGE_SIZE / totalApiInputs;\n\n    let pageNumber = 0;\n    let totalPages: number | undefined;\n    do {\n      const { totalItems, rows } = await SellerCentralRequestManager.fetchSCPAPIData(\n        activeMarketPlace,\n        _.cloneDeep({\n          ...input.payload,\n          reportOperations: input.payload.reportOperations.map((operation) => ({\n            ...operation,\n            pageNumber: pageNumber + 1\n          }))\n        })\n      );\n\n      if (totalPages === undefined) {\n        totalPages = Math.ceil(totalItems / this.PAGE_SIZE);\n      }\n\n      if (!totalItems) {\n        setDownloadProgress((apiInputIndex + 1) * progressPerInput);\n        continue;\n      }\n\n      rows.forEach((row) => {\n        row.marketplace = SUPPORTED_MARKETPLACES[marketplaceCode].name;\n        row.period = ReportDownloadUtils.getFormattedPeriod(reportingRange, input.periodEndDate);\n        ReportDownloadUtils.sanitizeValuesWithComma<SCPDataRow>(['asin-title'], row);\n        returnData.push(row);\n      });\n\n      const inputProgress = (pageNumber++ / totalPages) * progressPerInput;\n      setDownloadProgress(apiInputIndex * progressPerInput + inputProgress);\n\n      if (pageNumber !== totalPages || apiInputIndex !== totalApiInputs - 1) {\n        await Utils.sleep(ReportDownloadUtils.getSellerCentralSleepTime());\n      }\n    } while (pageNumber < totalPages);\n\n    return returnData;\n  };\n\n  static downloadData = async (\n    activeMarketPlace: SellerCentralMarketplace,\n    scpFormData: SCPReportForm,\n    setDownloadProgress: (newProgress: number) => void,\n    downloadReport: (options: DownloadReportInputType) => void\n  ) => {\n    const {\n      marketplaceCode,\n      reportingRange,\n      brand,\n      asins,\n      category,\n      downloadDestinationType: downloadDestination,\n      reportFileGroupingType\n    } = scpFormData;\n\n    const apiInputs = this.generateAPIInputs({\n      marketplaceCode,\n      periodEndDates: scpFormData.periods.map(({ date }) => date.utc().toISOString()),\n      reportingRange,\n      brand,\n      asins,\n      ...(category && { brandCategory: { id: `${brand}-category`, value: category } })\n    });\n\n    const COLUMNS = SCPRequestUtils.SCP_DATA_COLUMNS;\n    const combinedResults: Array<SCPDataRow> = [];\n    const failedValues = [];\n\n    for (const [i, apiInput] of apiInputs.entries()) {\n      try {\n        const returnData = await this.fetchSCPAPIData(\n          activeMarketPlace,\n          marketplaceCode,\n          apiInput,\n          combinedResults,\n          reportingRange,\n          i,\n          apiInputs.length,\n          setDownloadProgress\n        );\n\n        if (reportFileGroupingType === 'Multiple') {\n          downloadReport({\n            ...(downloadDestination !== 'Local'\n              ? {\n                  ...(downloadDestination === 'Google Sheet'\n                    ? { csvData: returnData }\n                    : {\n                        sheetDataToWriteToDrive: ReportDownloadUtils.generateSheetData<typeof COLUMNS>(\n                          returnData,\n                          COLUMNS\n                        )\n                      })\n                }\n              : { csvText: ReportDownloadUtils.generateCSVText<typeof COLUMNS>(returnData, COLUMNS) }),\n            fileName: `${reportingRange.toLowerCase()}-${apiInput.periodEndDate.split('T')[0]}-scp-data-${moment().toISOString().split('.')[0]}`,\n            destination: downloadDestination,\n            reportFormData: scpFormData\n          });\n        } else {\n          combinedResults.push(...returnData);\n        }\n      } catch (error) {\n        ReportDownloadUtils.handleNetworkError(error);\n        failedValues.push(reportingRange);\n      }\n    }\n\n    if (reportFileGroupingType !== 'Multiple') {\n      const isAggregated = reportFileGroupingType === 'Aggregated';\n      const csvData = isAggregated ? SCPAggregationUtils.aggregateData(combinedResults) : combinedResults;\n      const fileName = `${reportingRange.toLowerCase()}-${isAggregated ? 'aggregated-' : ''}scp-data-${moment().toISOString().split('.')[0]}`;\n      downloadReport({\n        ...(downloadDestination !== 'Local'\n          ? {\n              ...(downloadDestination === 'Google Sheet'\n                ? { csvData }\n                : {\n                    sheetDataToWriteToDrive: ReportDownloadUtils.generateSheetData<typeof COLUMNS>(\n                      isAggregated ? SCPAggregationUtils.aggregateData(combinedResults) : combinedResults,\n                      COLUMNS\n                    )\n                  })\n            }\n          : {\n              csvText: ReportDownloadUtils.generateCSVText<typeof COLUMNS>(\n                isAggregated ? SCPAggregationUtils.aggregateData(combinedResults) : combinedResults,\n                COLUMNS\n              )\n            }),\n        fileName,\n        destination: downloadDestination,\n        reportFormData: scpFormData\n      });\n    }\n\n    return failedValues;\n  };\n}\n","import { LoadingButton } from '@mui/lab';\nimport { Autocomplete, TextField } from '@mui/material';\nimport { enqueueSnackbar } from '@riptech/minimal-ui/src/components/snackbar';\nimport type { SellerCentralMarketplace } from '@seller-utilities/database';\nimport type { BaseReportForm, SCPMetadata, SCPReportForm } from '@seller-utilities/types';\nimport type { FormikProps } from 'formik';\nimport { useFormik } from 'formik';\nimport type { FC } from 'react';\nimport { useSelector } from 'react-redux';\nimport * as Yup from 'yup';\nimport UserSelectors from '../../../redux/selectors/userSelectors';\nimport ReportFormUtils from '../../../utils/reports/ReportFormUtils';\nimport SCPDownloadUtils from '../../../utils/reports/scp/SCPDownloadUtils';\nimport DataDestinationPicker from '../../dataDestination/DataDestinationPicker';\nimport CSVGroupingPicker from '../common/CSVGroupingPicker';\nimport ReportDateRangePicker from '../common/ReportDateRangePicker';\nimport ReportMarketplaceSelect from '../common/ReportMarketplaceSelect';\nimport type { DownloadReportInputType } from '../useReportFetcher';\ninterface SCPFormProps {\n  readonly isLoading: boolean;\n  readonly disabled: boolean;\n  readonly metadata: SCPMetadata;\n  readonly setDownloadProgress: (newProgress: number | null) => void;\n  readonly setUploadProgress: (newProgress: number) => void;\n  readonly downloadReport: (options: DownloadReportInputType) => void;\n}\nconst SCPForm: FC<SCPFormProps> = ({\n  disabled,\n  metadata,\n  isLoading,\n  setDownloadProgress,\n  setUploadProgress,\n  downloadReport\n}) => {\n  const activeMarketplace = useSelector(UserSelectors.activeMarketplaceSelector);\n  const dowloadSCPData = async (formData: SCPReportForm) => {\n    try {\n      const failedValues = await SCPDownloadUtils.downloadData(activeMarketplace!, formData, setDownloadProgress, downloadReport);\n      if (failedValues.length) {\n        enqueueSnackbar(`Some of the data for the following reporing ranges failed to download: ${failedValues.join(', ')}`, {\n          persist: true,\n          preventDuplicate: false,\n          variant: 'error'\n        });\n      }\n    } catch (err: any) {\n      enqueueSnackbar(err?.message ?? 'Something went wrong', {\n        variant: 'error'\n      });\n    } finally {\n      setUploadProgress(0);\n      setDownloadProgress(null);\n    }\n  };\n  const formik = useFormik<SCPReportForm>({\n    initialValues: {\n      downloadDestinationType: 'Local',\n      menuItemDestination: 'Local',\n      dataConfigurationId: '',\n      marketplaceCode: '' as SellerCentralMarketplace,\n      isSavingToPreviousDestination: false,\n      periods: [],\n      reportingRange: 'Weekly',\n      reportType: 'SCP',\n      reportFileGroupingType: 'Single'\n    },\n    onSubmit: async (values, formikHelpers) => {\n      setDownloadProgress(0);\n      await dowloadSCPData(values);\n      formikHelpers.setSubmitting(false);\n    },\n    validationSchema: Yup.object().shape({\n      asins: Yup.string().test('maxLines', 'You cannot enter more than 100 ASINs at a time', value => (value?.split?.('\\n')?.length ?? 0) <= 100),\n      brand: Yup.string(),\n      marketplaceCode: Yup.string().required('You must select a marketplace'),\n      periods: Yup.array().required().test('periods', 'You must select at least one period', periods => !!periods.length)\n    })\n  });\n  const isInvalidDestination = ReportFormUtils.isInvalidDestination(formik.values);\n  const categories = metadata?.options?.find(opt => opt.value === formik.values.brand)?.categories;\n  return <>\n      <ReportMarketplaceSelect disabled={disabled} onChange={e => formik.setFieldValue('marketplaceCode', e.target.value)} data-sentry-element=\"ReportMarketplaceSelect\" data-sentry-source-file=\"SCPForm.tsx\" />\n      <CSVGroupingPicker disabled={disabled} groupingLabel=\"Date Range\" onChange={formik.handleChange} value={formik.values.reportFileGroupingType} data-sentry-element=\"CSVGroupingPicker\" data-sentry-source-file=\"SCPForm.tsx\" />\n      <ReportDateRangePicker disabled={disabled} formik={formik as unknown as FormikProps<BaseReportForm>} reportingRanges={metadata.reportingRanges} data-sentry-element=\"ReportDateRangePicker\" data-sentry-source-file=\"SCPForm.tsx\" />\n      <TextField disabled={disabled} error={!!formik.errors.asins} fullWidth helperText={formik.touched.asins ? formik.errors.asins : null} id=\"asins\" label=\"Enter up to 100 ASINs (optional)\" multiline name=\"asins\" onBlur={formik.handleBlur} onChange={formik.handleChange} placeholder=\"Enter ASINs separated by new lines\" rows={8} value={formik.values.asins} variant=\"outlined\" data-sentry-element=\"TextField\" data-sentry-source-file=\"SCPForm.tsx\" />\n      <Autocomplete disabled={disabled} fullWidth getOptionLabel={option => option?.localizedDisplayValue} onChange={(_, selectedOption) => {\n      formik.setFieldValue('brand', selectedOption?.value ?? '');\n      formik.setFieldValue('category', '');\n    }} options={metadata?.options || []} renderInput={params => <TextField {...params} label=\"Brand (optional)\" placeholder=\"Search and select a brand\" />} renderOption={(props, option) => <li {...props} key={option.localizedDisplayValue}>\n            {option.localizedDisplayValue}\n          </li>} data-sentry-element=\"Autocomplete\" data-sentry-source-file=\"SCPForm.tsx\" />\n      {formik.values.brand ? <Autocomplete key={formik.values.brand} disabled={disabled} fullWidth getOptionLabel={option => option?.localizedDisplayValue} onChange={(_, selectedOption) => {\n      formik.setFieldValue('category', selectedOption?.value ?? '');\n    }} options={categories ?? []} renderInput={params => <TextField {...params} label=\"Category (Optional)\" placeholder=\"Search and select a category\" />} renderOption={(props, option) => <li {...props} key={option.localizedDisplayValue}>\n              {option.localizedDisplayValue}\n            </li>} value={categories?.find(cat => cat.value === formik.values.category) ?? null} /> : null}\n      <DataDestinationPicker disabled={disabled} formik={formik} reportType=\"SCP\" data-sentry-element=\"DataDestinationPicker\" data-sentry-source-file=\"SCPForm.tsx\" />\n      <LoadingButton disabled={!formik.isValid || isInvalidDestination || disabled} loading={isLoading} onClick={formik.submitForm} variant=\"contained\" data-sentry-element=\"LoadingButton\" data-sentry-source-file=\"SCPForm.tsx\">\n        Submit\n      </LoadingButton>\n    </>;\n};\nexport default SCPForm;","import { Stack } from '@mui/material';\nimport type { FC } from 'react';\nimport SCPMetadataUtils from '../../../utils/reports/scp/SCPMetadataUtils';\nimport NoActiveSessionAlert from '../common/NoActiveSessionAlert';\nimport ReportFormContainer from '../common/ReportFormContainer';\nimport ReportProgressBar from '../common/ReportProgressBar';\nimport useReportFetcher from '../useReportFetcher';\nimport SCPForm from './SCPForm';\nconst SCPReport: FC = () => {\n  const {\n    loadingDetails,\n    fetchMetadata,\n    metadata,\n    metadataStatus,\n    setDownloadProgress,\n    downloadReport,\n    setUploadProgress\n  } = useReportFetcher(SCPMetadataUtils.getMetadata, {\n    options: [],\n    reportingRanges: {\n      monthly: [],\n      quarterly: [],\n      weekly: []\n    }\n  });\n  return <ReportFormContainer title=\"Search Catalog Performance\" data-sentry-element=\"ReportFormContainer\" data-sentry-component=\"SCPReport\" data-sentry-source-file=\"SCPReport.tsx\">\n      <NoActiveSessionAlert fetchMetadata={fetchMetadata} metadataStatus={metadataStatus} data-sentry-element=\"NoActiveSessionAlert\" data-sentry-source-file=\"SCPReport.tsx\" />\n      <Stack spacing={2} data-sentry-element=\"Stack\" data-sentry-source-file=\"SCPReport.tsx\">\n        <SCPForm disabled={!!loadingDetails || metadataStatus !== 'success'} downloadReport={downloadReport} isLoading={!!loadingDetails} metadata={metadata} setDownloadProgress={setDownloadProgress} setUploadProgress={setUploadProgress} data-sentry-element=\"SCPForm\" data-sentry-source-file=\"SCPReport.tsx\" />\n        {loadingDetails ? <ReportProgressBar label={loadingDetails.label} progress={loadingDetails.progress} /> : null}\n      </Stack>\n    </ReportFormContainer>;\n};\nexport default SCPReport;","import { useAppContext } from '@riptech/shared-ui/src/hooks/useAppContext';\nimport Head from 'next/head';\nimport type { FC } from 'react';\nimport SCPReport from '../../components/reportFetcher/scp/SCPReport';\nconst SQPReportPage: FC = () => {\n  const {\n    appName\n  } = useAppContext();\n  return <>\n      <Head data-sentry-element=\"Head\" data-sentry-source-file=\"scp.tsx\">\n        <title>{`SCP Report | ${appName}`}</title>\n      </Head>\n      <SCPReport data-sentry-element=\"SCPReport\" data-sentry-source-file=\"scp.tsx\" />\n    </>;\n};\nexport default SQPReportPage;","import type {\n  GoogleSheet,\n  GoogleSheetColumnMappings,\n  ReportDataType,\n  SellerCentralMarketplace\n} from '@seller-utilities/database';\nimport type { Moment } from 'moment-timezone';\n\nimport type { GoogleDriveItem } from '../google-drive';\n\nexport type ReportFileGroupingType = 'Single' | 'Multiple' | 'Aggregated';\n\nexport type DownloadDestinationType = 'Local' | 'Google Drive' | 'Google Sheet';\n\nexport type ReportPeriodsList = Array<{ date: Moment; title: string }>;\n\nexport const REPORTING_RANGE_TYPES = ['Weekly', 'Monthly', 'Quarterly'] as const;\n\nexport interface BaseReportForm {\n  marketplaceCode: SellerCentralMarketplace;\n  periods: ReportPeriodsList;\n  downloadDestinationType: DownloadDestinationType;\n  menuItemDestination: string;\n\n  reportingRange: (typeof REPORTING_RANGE_TYPES)[number];\n  reportType: ReportDataType;\n  googleDriveItem?: GoogleDriveItem;\n\n  isSavingToPreviousDestination: boolean;\n\n  // The following fields are only used when downloadDestinationType is 'Google Sheet'.\n  googleSheetSheet?: GoogleSheet;\n  dataConfigurationId?: string;\n  columnMappings?: GoogleSheetColumnMappings;\n  headerRowsToSkip?: number;\n}\n\nexport interface MetadataValue {\n  localizedDisplayValue: string;\n  value: string;\n  child?: { valueType: string; values: Array<MetadataValue> };\n}\n\nexport interface ReportingRanges {\n  weekly: ReportPeriodsList;\n  monthly: ReportPeriodsList;\n  quarterly: ReportPeriodsList;\n}\n\nexport interface RawReportMetadataResponse {\n  metadata: {\n    viewsRoot: {\n      views: Array<{\n        id: string;\n        filters: Array<{ id: string; values: Array<MetadataValue> }>;\n      }>;\n    };\n  };\n}\n\nexport const getReportFileGroupingLabel = (reportLabel: string, type: ReportFileGroupingType): string =>\n  (\n    ({\n      Aggregated: `One file for all ${reportLabel}s - Aggregated`,\n      Multiple: `One file per-${reportLabel}`,\n      Single: `One file for all ${reportLabel}s`\n    }) satisfies Record<ReportFileGroupingType, string>\n  )[type];\n\nexport type Arrayify<T> = {\n  [K in keyof T]: Array<T[K]>;\n};\n\nexport type ValueOf<T> = T[keyof T];\n"],"names":["window","__NEXT_P","push","__webpack_require__","MetadataUtils","transformWeeklyDateString","months","parts","input","split","weekPart","datePart","dateRange","year","weekNumber","replace","startDate","endDate","startDateObj","Date","endDateObj","startMonth","getMonth","startDay","getDate","endMonth","endDay","concat","transformMonthlyDateString","value","month","transformQuarterlyDateString","quarter","mapWeeklyPeriods","reportingRanges","find","item","child","values","map","localizedDisplayValue","param","date","moment","title","mapMonthlyPeriods","reduce","currentYear","mapQuarterlyPeriods","ReportAggregationUtils","sum","nums","acc","val","average","precision","length","result","total","NumberUtils","roundToDecimalPoints","calculatePercentage","numerator","denominator","formatPercentage","__webpack_exports__","Z","disabled","onChange","groupingLabel","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","TextField","fullWidth","label","name","select","data-sentry-element","data-sentry-component","data-sentry-source-file","reportFileGroupingType","MenuItem","getReportFileGroupingLabel","formik","options","useMemo","reportingRange","weekly","monthly","quarterly","jsxs","Stack","spacing","setValues","periods","e","target","REPORTING_RANGE_TYPES","rangeTypeItem","Autocomplete","disableCloseOnSelect","getOptionLabel","option","multiple","v","setFieldValue","renderInput","params","placeholder","toLowerCase","renderOption","props","selected","react__WEBPACK_IMPORTED_MODULE_1__","createElement","li","key","Checkbox","checked","style","marginRight","Object","entries","SUPPORTED_MARKETPLACES","code","alignItems","direction","Avatar","sx","height","width","Iconify","icon","Typography","variant","SCPMetadataUtils","getMetadata","activeMarketplace","response","brandsMetadata","SellerCentralRequestManager","fetchSCPMetadata","metadata","viewsRoot","views","id","brands","filters","categories","valueType","brandsReportingRanges","SCPAggregationUtils","aggregateData","rowMap","Map","scpRows","forEach","period","marketplace","asin","asinTitle","category","rest","has","set","get","restKey","Array","from","keys","SCP_AGGREGATORS","brandData","scpData","clicks","SCPDownloadUtils","PAGE_SIZE","generateSingleFetchInput","marketplaceCode","asins","brand","brandCategory","periodEndDate","rangeFilters","ReportDownloadUtils","getRangeFiltersByReportingRange","filterSelections","payload","reportId","viewId","selectedCountries","reportOperations","ascending","pageNumber","pageSize","reportType","sortByColumnId","toISOString","generateAPIInputs","periodEndDates","others","inputs","NA_TIMEZONE","fetchSCPAPIData","activeMarketPlace","combinedResults","apiInputIndex","totalApiInputs","setDownloadProgress","totalPages","returnData","progressPerInput","totalItems","rows","_","operation","undefined","Math","ceil","row","getFormattedPeriod","sanitizeValuesWithComma","inputProgress","Utils","sleep","getSellerCentralSleepTime","downloadData","scpFormData","downloadReport","downloadDestinationType","downloadDestination","apiInputs","utc","COLUMNS","SCPRequestUtils","SCP_DATA_COLUMNS","failedValues","i","apiInput","csvData","sheetDataToWriteToDrive","generateSheetData","csvText","generateCSVText","fileName","destination","reportFormData","error","handleNetworkError","isAggregated","scp_SCPForm","isLoading","setUploadProgress","useSelector","UserSelectors","activeMarketplaceSelector","dowloadSCPData","formData","enqueueSnackbar","join","persist","preventDuplicate","err","message","useFormik","initialValues","menuItemDestination","dataConfigurationId","isSavingToPreviousDestination","onSubmit","formikHelpers","setSubmitting","validationSchema","Yup","shape","test","required","isInvalidDestination","ReportFormUtils","opt","jsx_runtime","Fragment","ReportMarketplaceSelect","CSVGroupingPicker","handleChange","ReportDateRangePicker","errors","helperText","touched","multiline","onBlur","handleBlur","selectedOption","react","cat","DataDestinationPicker","LoadingButton","isValid","loading","onClick","submitForm","scp_SCPReport","loadingDetails","fetchMetadata","metadataStatus","useReportFetcher","ReportFormContainer","NoActiveSessionAlert","SCPForm","ReportProgressBar","progress","scp","appName","useAppContext","Head","SCPReport","reportLabel","type","Aggregated","Multiple","Single"],"sourceRoot":""}