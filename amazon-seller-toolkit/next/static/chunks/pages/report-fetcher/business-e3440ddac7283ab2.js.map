{"version":3,"file":"static/chunks/pages/report-fetcher/business-e3440ddac7283ab2.js","mappings":"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","sources":["webpack://_N_E/?4710","webpack://_N_E/./src/utils/ExtensionUtils.ts","webpack://_N_E/./src/utils/reports/business/BusinessReportMetadataUtils.ts","webpack://_N_E/./src/utils/reports/business/SalesAndTrafficReportDownloadUtils.ts","webpack://_N_E/../../packages/seller-utilities/types/src/api/reports/businessReports.ts","webpack://_N_E/./src/components/reportFetcher/business/common/BusinessReportSelections.tsx","webpack://_N_E/./src/components/reportFetcher/business/common/BusinessReportSubmitButton.tsx","webpack://_N_E/./src/components/reportFetcher/business/common/ColumnSelectionModal.tsx","webpack://_N_E/./src/components/reportFetcher/business/common/ComparisonColumnsModal.tsx","webpack://_N_E/../../packages/riptech/shared-ui/src/components/DateRangePicker.tsx","webpack://_N_E/./src/components/reportFetcher/business/common/DailyDateRangeModal.tsx","webpack://_N_E/./src/components/reportFetcher/business/common/MonthlyDateRangeModal.tsx","webpack://_N_E/./src/components/reportFetcher/business/common/QuarterlyDateRangeModal.tsx","webpack://_N_E/./src/components/reportFetcher/business/common/WeeklyDateRangeModal.tsx","webpack://_N_E/./src/components/reportFetcher/business/hooks/useBusinessReports.tsx","webpack://_N_E/./src/components/reportFetcher/business/ByASINReportForm.tsx","webpack://_N_E/./src/components/reportFetcher/business/ByDateReportForm.tsx","webpack://_N_E/./src/components/reportFetcher/business/BusinessReports.tsx","webpack://_N_E/./src/pages/report-fetcher/business.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/report-fetcher/business\",\n      function () {\n        return require(\"private-next-pages/report-fetcher/business.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/report-fetcher/business\"])\n      });\n    }\n  ","import type { Moment } from 'moment-timezone';\n\ntype WatchObjectChangeCallback = (method: string, ...args: Array<any>) => void;\n\nexport default class ExtensionUtils {\n  static getIsoDateOnly(value: Moment) {\n    return value.toISOString().split('T').shift()!;\n  }\n\n  static watchAnyObject = (\n    object: Record<string, any> = {},\n    methods: Array<string> = [],\n    callbackBefore: WatchObjectChangeCallback = () => null,\n    callbackAfter: WatchObjectChangeCallback = () => null\n  ) => {\n    for (const method of methods) {\n      const original = object[method].bind(object);\n      const newMethod = (...args: Array<any>) => {\n        callbackBefore(method, ...args);\n        // eslint-disable-next-line prefer-spread\n        const result = original.apply(null, args);\n        callbackAfter(method, ...args);\n        return result;\n      };\n      object[method] = newMethod.bind(object);\n    }\n  };\n}\n","import type { SellerCentralMarketplace } from '@seller-utilities/database';\n\nimport SellerCentralRequestManager from '../../request/SellerCentralRequest/SellerCentralRequestManager';\n\nexport default class BusinessMetadataUtils {\n  static getMetadata = async (activeMarketplace: SellerCentralMarketplace) => {\n    const sellerMetadata = await SellerCentralRequestManager.fetchSalesAndTrafficReportColumns(\n      activeMarketplace,\n      'Date'\n    );\n\n    const { columns } = sellerMetadata.data.getReportData;\n    return {\n      options: { columns }\n    };\n  };\n}\n","import Utils, { NumberUtils } from '@riptech/utils';\nimport type { BusinessReportsRequestType, SellerCentralMarketplace } from '@seller-utilities/database';\nimport type {\n  BusinessReportForm,\n  DownloadDestinationType,\n  SalesAndTrafficReportColumn,\n  SalesAndTrafficReportResponse\n} from '@seller-utilities/types';\nimport _ from 'lodash';\nimport moment from 'moment-timezone';\nimport type { Dispatch, SetStateAction } from 'react';\n\nimport type { DownloadReportInputType } from '../../../components/reportFetcher/useReportFetcher';\nimport ExtensionUtils from '../../ExtensionUtils';\nimport type { AmazonDateRange } from '../../request/InlinePageRequest/AdvRequest';\nimport SellerCentralRequestManager from '../../request/SellerCentralRequest/SellerCentralRequestManager';\nimport type {\n  BusinessReportColumnSelections,\n  SalesAndTrafficColumnLabel,\n  SalesAndTrafficDataRow\n} from '../../request/SellerCentralRequest/utils/BusinessReportRequestUtils';\nimport BusinessRequestUtils, {\n  BusinessReportDateKey,\n  BusinessReportTitleKey,\n  GrowthOpportunitiesRecommendationKey\n} from '../../request/SellerCentralRequest/utils/BusinessReportRequestUtils';\nimport ReportDownloadUtils from '../ReportDownloadUtils';\n\ninterface GenerateSingleSalesAndTrafficInput {\n  dateRange: BusinessReportForm['dateRanges'][number];\n  view: BusinessReportForm['view'];\n}\n\ninterface GenerateSalesAndTrafficInputs extends Omit<GenerateSingleSalesAndTrafficInput, 'dateRange'> {\n  dateRanges: BusinessReportForm['dateRanges'];\n}\n\nexport default class SalesAndTrafficReportDownloadUtils {\n  private static readonly INTEGER_COLUMNS = new Set<SalesAndTrafficColumnLabel>([\n    'Sessions - Mobile App',\n    'Sessions - Mobile App - B2B',\n    'Sessions - Browser',\n    'Sessions - Browser - B2B',\n    'Sessions - Total',\n    'Sessions - Total - B2B',\n    'Page Views - Mobile App',\n    'Page Views - Mobile App - B2B',\n    'Page Views - Browser',\n    'Page Views - Browser - B2B',\n    'Page Views - Total',\n    'Page Views - Total - B2B',\n    'Units Ordered',\n    'Units Ordered - B2B',\n    'Total Order Items',\n    'Total Order Items - B2B',\n    'Average Offer Count',\n    'Average Parent Items',\n    'Units Refunded',\n    'Feedback Received',\n    'Negative Feedback Received',\n    'A-to-z Claims Granted',\n    'Units Shipped',\n    'Orders Shipped'\n  ]);\n\n  private static readonly PERCENTAGE_COLUMNS = new Set<SalesAndTrafficColumnLabel>([\n    'Buy Box Percentage',\n    'Buy Box Percentage - B2B',\n    'Session Percentage - Browser',\n    'Session Percentage - Browser - B2B',\n    'Session Percentage - Mobile App',\n    'Session Percentage - Mobile App - B2B',\n    'Session Percentage - Total',\n    'Session Percentage - Total - B2B',\n    'Page Views Percentage - Browser',\n    'Page Views Percentage - Browser - B2B',\n    'Page Views Percentage - Mobile App',\n    'Page Views Percentage - Mobile App - B2B',\n    'Page Views Percentage - Total',\n    'Page Views Percentage - Total - B2B',\n    'Unit Session Percentage',\n    'Unit Session Percentage - B2B',\n    'Order Item Session Percentage',\n    'Order Item Session Percentage - B2B',\n    'Refund Rate',\n    'Received Negative Feedback Rate'\n  ]);\n\n  private static readonly CURRENCY_COLUMNS = new Set<SalesAndTrafficColumnLabel>([\n    'Sales per Order Item',\n    'Average Sales per Order Item - B2B',\n    'Shipped Product Sales',\n    'Ordered Product Sales',\n    'Ordered Product Sales - B2B',\n    'Claims Amount',\n    'Average Selling Price',\n    'Average Selling Price - B2B'\n  ]);\n\n  static downloadData = async (\n    activeMarketplace: SellerCentralMarketplace,\n    businessReportForm: BusinessReportForm,\n    setDownloadProgress: Dispatch<SetStateAction<number | null>>,\n    downloadReport: (options: DownloadReportInputType) => void\n  ) => {\n    const {\n      dateRanges,\n      downloadDestinationType,\n      view,\n      comparisonColumns,\n      isComparingColumns,\n      requestType,\n      columnSelections,\n      asins\n    } = businessReportForm;\n\n    if (!columnSelections) {\n      throw new Error('An error occured accessing report selections');\n    }\n\n    const amazonDateRanges = this.generateAmazonDateRanges({\n      view,\n      dateRanges\n    });\n\n    const combinedResults: Array<Array<Record<string, string>>> = [];\n    const failedValues = [];\n    const businessReportColumnsToInclude: Record<string, string> = {};\n    for (const [index, amazonDateRange] of amazonDateRanges.entries()) {\n      try {\n        await this.fetchSalesAndTrafficData(\n          activeMarketplace,\n          amazonDateRange,\n          index,\n          amazonDateRanges.length,\n          setDownloadProgress,\n          combinedResults,\n          businessReportColumnsToInclude,\n          columnSelections,\n          ReportDownloadUtils.convertMultilineTextToArray(asins),\n          requestType,\n          downloadDestinationType,\n          isComparingColumns ? new Set(Object.keys(comparisonColumns ?? {})) : undefined\n        );\n      } catch (error) {\n        ReportDownloadUtils.handleNetworkError(error);\n        failedValues.push(\n          `${moment(amazonDateRange.start).format('MMMM, D YYYY')} - ${moment(amazonDateRange.end).format('MMMM, D YYYY')}\"`\n        );\n      }\n    }\n\n    const flattenedResult = combinedResults.flat();\n    downloadReport({\n      ...(downloadDestinationType !== 'Local'\n        ? {\n            ...(downloadDestinationType === 'Google Sheet'\n              ? { csvData: flattenedResult }\n              : {\n                  sheetDataToWriteToDrive: ReportDownloadUtils.generateSheetData(\n                    flattenedResult,\n                    businessReportColumnsToInclude\n                  )\n                })\n          }\n        : { csvText: ReportDownloadUtils.generateCSVText(flattenedResult, businessReportColumnsToInclude) }),\n      fileName: `${view.toLowerCase()}-business-report-${moment().toISOString().split('.')[0]}`,\n      destination: downloadDestinationType,\n      reportFormData: businessReportForm\n    });\n\n    return failedValues;\n  };\n\n  private static readonly generateAmazonDateRanges = (inputs: GenerateSalesAndTrafficInputs) => {\n    const { dateRanges, view } = inputs;\n    dateRanges.sort((a, b) =>\n      moment(a.end).isBefore(moment(b.end)) || moment(a.start).isBefore(moment(b.start)) ? -1 : 1\n    );\n\n    return dateRanges.map((dateRange) => this.generateSingleFetchAmazonDateRange({ view, dateRange }));\n  };\n\n  private static readonly generateSingleFetchAmazonDateRange = (input: GenerateSingleSalesAndTrafficInput) => {\n    const { dateRange, view } = input;\n    const end = moment.utc(dateRange.end);\n    const start = moment.utc(dateRange.start);\n\n    const amazonDateRange: AmazonDateRange = {\n      end: end.valueOf(),\n      endISO: ExtensionUtils.getIsoDateOnly(end),\n      granularity: view.toUpperCase() as AmazonDateRange['granularity'],\n      start: start.valueOf(),\n      startISO: ExtensionUtils.getIsoDateOnly(start),\n      period: dateRange.label\n    };\n    return amazonDateRange;\n  };\n\n  private static readonly fetchSalesAndTrafficData = async <T extends Record<string, string>>(\n    activeMarketplace: SellerCentralMarketplace,\n    amazonDateRange: AmazonDateRange,\n    apiInputIndex: number,\n    totalApiInputs: number,\n    setDownloadProgress: Dispatch<SetStateAction<number | null>>,\n    combinedResults: Array<Array<T>>,\n    businessReportColumnsToInclude: Record<string, string>,\n    selections: BusinessReportColumnSelections,\n    asins: Array<string>,\n    requestType: BusinessReportsRequestType,\n    downloadDestinationType: DownloadDestinationType,\n    setOfColumnsToCompare?: Set<string>\n  ) => {\n    const progressPerInput = 100 / totalApiInputs;\n    let progress = 0;\n\n    let hasNextPage = false;\n    let page = 0;\n\n    do {\n      const { response, nextPage } = await this.fetchReportData(\n        activeMarketplace,\n        amazonDateRange,\n        asins,\n        requestType,\n        page\n      );\n      page = nextPage;\n\n      const { rows, hasNext, columns } = response.data.getReportData;\n      hasNextPage = hasNext;\n\n      combinedResults.push(\n        rows.map((row, rowIndex) =>\n          this.formatSalesAndTrafficRow(\n            row,\n            rowIndex,\n            apiInputIndex,\n            columns,\n            selections,\n            amazonDateRange,\n            combinedResults,\n            requestType,\n            downloadDestinationType,\n            setOfColumnsToCompare\n          )\n        )\n      );\n\n      if (hasNext) {\n        const increment = (progressPerInput - progress) / 2;\n        progress += increment;\n        setDownloadProgress((fullProgress) => (fullProgress ?? 0) + increment);\n      } else {\n        setDownloadProgress((fullProgress) => (fullProgress ?? 0) - progress + progressPerInput);\n      }\n\n      // Only update columns on the first page\n      if (Object.keys(selections).length !== Object.keys(businessReportColumnsToInclude).length) {\n        this.updateReportColumnsToInclude(\n          selections,\n          businessReportColumnsToInclude,\n          requestType,\n          setOfColumnsToCompare\n        );\n      }\n\n      await Utils.sleep(ReportDownloadUtils.getSellerCentralSleepTime());\n    } while (hasNextPage);\n\n    return businessReportColumnsToInclude;\n  };\n\n  private static readonly fetchReportData = async (\n    activeMarketplace: SellerCentralMarketplace,\n    amazonDateRange: AmazonDateRange,\n    asins: Array<string>,\n    requestType: BusinessReportsRequestType,\n    page: number\n  ) => {\n    switch (requestType) {\n      case 'Date':\n        return {\n          response: await SellerCentralRequestManager.fetchSalesAndTrafficReport(activeMarketplace, amazonDateRange),\n          nextPage: page + 1\n        };\n      case 'SKU':\n      case 'ChildASIN':\n      case 'ParentASIN':\n        return {\n          response: await SellerCentralRequestManager.fetchSalesAndTrafficReportByASIN(\n            activeMarketplace,\n            amazonDateRange,\n            requestType,\n            asins,\n            page\n          ),\n          nextPage: page + 1\n        };\n      default:\n        throw new Error('Unknown request type');\n    }\n  };\n\n  private static formatSalesAndTrafficRow<T extends Record<string, string>>(\n    row: SalesAndTrafficReportResponse['data']['getReportData']['rows'][number],\n    rowIndex: number,\n    apiInputIndex: number,\n    columns: Array<SalesAndTrafficReportColumn>,\n    selections: BusinessReportColumnSelections,\n    { period }: AmazonDateRange,\n    combinedResults: Array<Array<T>>,\n    requestType: BusinessReportsRequestType,\n    downloadDestinationType: DownloadDestinationType,\n    setOfColumnsToCompare?: Set<string>\n  ): T {\n    const dataRow: SalesAndTrafficDataRow = {\n      'Date Range': period.replaceAll(',', '')\n    };\n\n    for (const [columnTranslationKey, index] of Object.entries(selections)) {\n      const { labels } = BusinessRequestUtils.getColumns(requestType);\n      const columnLabel = labels[columnTranslationKey as keyof typeof labels];\n\n      if (columnTranslationKey === BusinessReportDateKey) {\n        dataRow[columnLabel] = moment.unix(row[index] as unknown as number).format('YYYY-MM-DD');\n        continue;\n      }\n\n      if (columnTranslationKey === BusinessReportTitleKey && downloadDestinationType === 'Local') {\n        dataRow[columnLabel] = ReportDownloadUtils.sanitizeValue(row[index]);\n        continue;\n      }\n\n      if (this.INTEGER_COLUMNS.has(columnLabel)) {\n        const value = NumberUtils.formatInteger(parseInt(row[index], 10));\n        dataRow[columnLabel] = downloadDestinationType === 'Local' ? `\"${value}\"` : value;\n      } else if (this.PERCENTAGE_COLUMNS.has(columnLabel)) {\n        dataRow[columnLabel] = `${row[index]}%`;\n      } else if (this.CURRENCY_COLUMNS.has(columnLabel)) {\n        const value = NumberUtils.formatCurrency('USD', parseFloat(row[index]));\n        dataRow[columnLabel] = downloadDestinationType === 'Local' ? `\"${value}\"` : value;\n      } else {\n        dataRow[columnLabel] = row[index];\n      }\n\n      if (setOfColumnsToCompare?.has(columnTranslationKey)) {\n        const key = `${columnLabel} Delta` as SalesAndTrafficColumnLabel;\n        if (apiInputIndex === 1) {\n          const firstRangeValue = combinedResults[0]?.[rowIndex]?.[columnLabel];\n          if (firstRangeValue) {\n            const divisor = parseInt(row[index], 10);\n            const firstRangeNumber = parseInt(firstRangeValue, 10);\n            if (Number.isNaN(divisor) || divisor === 0 || Number.isNaN(firstRangeNumber)) {\n              dataRow[key] = '0';\n              continue;\n            }\n            const ratio = (divisor - firstRangeNumber) / divisor;\n            dataRow[key] = `${NumberUtils.formatPercentage(ratio)}%`;\n          }\n        } else {\n          dataRow[key] = '0';\n        }\n      }\n    }\n\n    return dataRow as T;\n  }\n\n  private static updateReportColumnsToInclude(\n    selections: BusinessReportColumnSelections,\n    businessReportColumnsToInclude: Record<string, string>,\n    requestType: BusinessReportForm['requestType'],\n    setOfColumnsToCompare?: Set<string>\n  ) {\n    const { labels, order } = BusinessRequestUtils.getColumns(requestType);\n    const selectedColumns = _.pick(labels, Object.keys(selections)) as Record<string, string>;\n\n    order\n      .filter((col) => selections[col] !== undefined && col !== GrowthOpportunitiesRecommendationKey)\n      .forEach((col) => {\n        businessReportColumnsToInclude[selectedColumns[col]] = selectedColumns[col];\n        if (setOfColumnsToCompare?.has(col)) {\n          businessReportColumnsToInclude[`${selectedColumns[col]} Delta`] = `${selectedColumns[col]} Delta`;\n        }\n      });\n\n    // Set the date range column as the last column\n    businessReportColumnsToInclude['Date Range'] = 'Date Range';\n  }\n}\n","import type { businessReportsColumnSelections, BusinessReportsRequestType } from '@seller-utilities/database';\n\nimport type { BaseReportForm } from './common';\n\ninterface ReportsData {\n  reportDefinitionId: string;\n  title: string;\n  translationKey: string;\n  __typename: string;\n}\n\nexport interface BusinessReportsMetadataResponse {\n  data: {\n    getSellerMetaData: {\n      sellerId: string;\n      marketplaceId: string;\n      byDateReports: Array<ReportsData>;\n      byAsinReports: Array<ReportsData>;\n    };\n  };\n}\n\nexport type BusinessReportType = 'Date' | 'ASIN';\n\nexport const BUSINESS_REPORT_VIEWS = ['Day', 'Week', 'Month'] as const;\n\nexport const BUSINESS_REPORT_DATE_RANGE_OPTIONS = ['Daily', 'Weekly', 'Monthly', 'Quarterly'] as const;\n\nexport interface BusinessReportDateRangeOption {\n  label: string;\n  start: string;\n  end: string;\n}\n\nexport interface BusinessReportForm extends BaseReportForm {\n  dateRanges: Array<BusinessReportDateRangeOption>;\n  isComparingColumns: boolean;\n  view: (typeof BUSINESS_REPORT_VIEWS)[number];\n  comparisonColumns?: (typeof businessReportsColumnSelections.$inferSelect)['comparisonColumns'];\n  columnSelections: (typeof businessReportsColumnSelections.$inferSelect)['selections'];\n  requestType: BusinessReportsRequestType;\n  asins: string;\n  dateRangeGrouping: (typeof BUSINESS_REPORT_DATE_RANGE_OPTIONS)[number];\n}\n","import { Box, Checkbox, Chip, FormControlLabel, Stack, TextField, Tooltip } from '@mui/material';\nimport { Iconify } from '@riptech/minimal-ui/src/components/iconify';\nimport type { UseBooleanReturn } from '@riptech/minimal-ui/src/hooks/use-boolean';\nimport type { BusinessReportForm } from '@seller-utilities/types';\nimport type { FormikProps } from 'formik';\nimport type { FC } from 'react';\ninterface BusinessReportSelectionsProps {\n  readonly formik: FormikProps<BusinessReportForm>;\n  readonly disabled: boolean;\n  readonly dateRangeModal: UseBooleanReturn;\n  readonly columnSelectionModal: UseBooleanReturn;\n  readonly columnComparisonModal: UseBooleanReturn;\n  readonly countOfSelected: number;\n  readonly numColumnsToCompare: number;\n  readonly enableComparisionColumns: boolean;\n}\nconst BusinessReportSelections: FC<BusinessReportSelectionsProps> = ({\n  formik,\n  dateRangeModal,\n  disabled,\n  columnSelectionModal,\n  countOfSelected,\n  enableComparisionColumns,\n  columnComparisonModal,\n  numColumnsToCompare\n}) => <>\n    <TextField disabled={disabled} fullWidth id=\"dateRanges\" InputProps={{\n    readOnly: true,\n    startAdornment: <Box display=\"flex\" flexWrap=\"wrap\" gap={1} mt={1}>\n            {formik.values.dateRanges.map((range, index) => <Chip key={range.label} disabled={disabled} label={range.label} onDelete={() => formik.setFieldValue('dateRanges', formik.values.dateRanges.filter((_, i) => i !== index))} size=\"small\" />)}\n          </Box>\n  }} label=\"Add date range\" onClick={dateRangeModal.onTrue} placeholder=\"Select date ranges\" value=\"\" data-sentry-element=\"TextField\" data-sentry-source-file=\"BusinessReportSelections.tsx\" />\n\n    <TextField disabled={disabled} fullWidth id=\"columns\" InputProps={{\n    readOnly: true\n  }} label=\"Column selection\" onClick={columnSelectionModal.onTrue} value={`${countOfSelected} column(s)`} data-sentry-element=\"TextField\" data-sentry-source-file=\"BusinessReportSelections.tsx\" />\n\n    {enableComparisionColumns ? <FormControlLabel control={<Checkbox checked={formik.values.isComparingColumns} color=\"primary\" disabled={disabled} onChange={e => formik.setFieldValue('isComparingColumns', e.target.checked)} />} label={<Stack alignItems=\"center\" direction=\"row\" justifyContent=\"center\">\n            Add comparison columns\n            <Tooltip sx={{\n      ml: 0.5\n    }} title=\"These are new columns that show how the selected columns compare\">\n              <Iconify icon=\"eva:info-outline\" />\n            </Tooltip>\n          </Stack>} /> : null}\n\n    {formik.values.isComparingColumns && enableComparisionColumns ? <TextField disabled={disabled} fullWidth id=\"columnsComparison\" InputProps={{\n    readOnly: true\n  }} label=\"Comparison selection\" onClick={columnComparisonModal.onTrue} value={`${numColumnsToCompare} column(s)`} /> : null}\n  </>;\nexport default BusinessReportSelections;","import { LoadingButton } from '@mui/lab';\nimport type { BusinessReportForm } from '@seller-utilities/types';\nimport type { FormikProps } from 'formik';\nimport type { FC } from 'react';\nimport ReportFormUtils from '../../../../utils/reports/ReportFormUtils';\ninterface BusinessReportSubmitButtonProps {\n  readonly formik: FormikProps<BusinessReportForm>;\n  readonly disabled: boolean;\n  readonly isLoading: boolean;\n}\nconst BusinessReportSubmitButton: FC<BusinessReportSubmitButtonProps> = ({\n  formik,\n  disabled,\n  isLoading\n}) => {\n  const isInvalidDestination = ReportFormUtils.isInvalidDestination(formik.values);\n  return <LoadingButton disabled={!formik.isValid || isInvalidDestination || disabled || formik.values.isComparingColumns && !Object.keys(formik.values.comparisonColumns ?? {}).length} loading={isLoading} onClick={formik.submitForm} variant=\"contained\" data-sentry-element=\"LoadingButton\" data-sentry-component=\"BusinessReportSubmitButton\" data-sentry-source-file=\"BusinessReportSubmitButton.tsx\">\n      Submit\n    </LoadingButton>;\n};\nexport default BusinessReportSubmitButton;","import { Checkbox, FormControlLabel, Stack } from '@mui/material';\nimport { enqueueSnackbar } from '@riptech/minimal-ui/src/components/snackbar';\nimport { Modal, type ModalAction } from '@riptech/shared-ui';\nimport type { BusinessReportsRequestType } from '@seller-utilities/database';\nimport type { BusinessReportForm, SalesAndTrafficReportColumn } from '@seller-utilities/types';\nimport type { FormikProps } from 'formik';\nimport { type FC, useCallback, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport UserActions from '../../../../redux/actions/userActions';\nimport { type BusinessReportColumnSelections, HiddenReportColumnIndexesForSelection, type SalesAndTrafficColumnKey } from '../../../../utils/request/SellerCentralRequest/utils/BusinessReportRequestUtils';\ninterface ColumnSelectionModalProps {\n  readonly columns: Array<SalesAndTrafficReportColumn>;\n  readonly open: boolean;\n  readonly onClose: () => void;\n  readonly requestType: BusinessReportsRequestType;\n  readonly selections: BusinessReportColumnSelections;\n  readonly formik: FormikProps<BusinessReportForm>;\n}\nconst ColumnSelectionModal: FC<ColumnSelectionModalProps> = ({\n  open,\n  columns,\n  onClose,\n  requestType,\n  selections,\n  formik\n}) => {\n  const [selectedColumns, setSelectedColumns] = useState<BusinessReportColumnSelections>({});\n  const [selectAll, setSelectAll] = useState(false);\n  const dispatch = useDispatch();\n  const handleSelectAll = useCallback((checked: boolean) => {\n    setSelectAll(checked);\n    setSelectedColumns(columns.reduce((acc, curr, index) => {\n      acc[curr.translationKey as SalesAndTrafficColumnKey] = checked ? index : -1;\n      return acc;\n    }, {} as BusinessReportColumnSelections));\n  }, [columns]);\n  useEffect(() => {\n    const numSelections = Object.keys(selections).length;\n    if (selections && numSelections > 0) {\n      setSelectedColumns(selections);\n      setSelectAll(numSelections === columns.length);\n    } else {\n      handleSelectAll(true);\n    }\n  }, [columns.length, handleSelectAll, selections]);\n  const actions: Array<ModalAction> = [{\n    onClick: onClose,\n    text: 'Cancel',\n    variant: 'outlined'\n  }, {\n    onClick: () => {\n      const filtered = (Object.keys(selectedColumns) as Array<SalesAndTrafficColumnKey>).filter(s => selectedColumns[s] !== -1).reduce((acc, curr) => {\n        acc[curr] = selectedColumns[curr];\n        return acc;\n      }, {} as BusinessReportColumnSelections);\n      if (!Object.keys(filtered).length) {\n        enqueueSnackbar({\n          message: 'You must select at least one column',\n          variant: 'error'\n        });\n        return;\n      }\n      const columnSelections = {\n        ...filtered,\n        ...HiddenReportColumnIndexesForSelection[requestType]\n      };\n      formik.setValues(prev => ({\n        ...prev,\n        columnSelections,\n        comparisonColumns: {}\n      }));\n      dispatch(UserActions.setColumnSelection({\n        selections: columnSelections,\n        comparisonColumns: {},\n        requestType\n      }));\n      onClose();\n      enqueueSnackbar('Column selection saved successfully', {\n        variant: 'success'\n      });\n    },\n    text: 'Save',\n    variant: 'contained'\n  }];\n  return <Modal actions={actions} maxWidth=\"xs\" onClose={onClose} open={open} title=\"Column Selection\" data-sentry-element=\"Modal\" data-sentry-component=\"ColumnSelectionModal\" data-sentry-source-file=\"ColumnSelectionModal.tsx\">\n      {!columns.length ? 'No columns found' : <>\n          <Stack>\n            <FormControlLabel control={<Checkbox checked={selectAll} onChange={(e, checked) => {\n          handleSelectAll(checked);\n        }} />} label={<strong>Select All</strong>} />\n          </Stack>\n          {columns.map((col, index) => col.translationKey in HiddenReportColumnIndexesForSelection[requestType] ? null : <Stack key={col.translationKey} ml={2}>\n                <FormControlLabel key={col.translationKey} checked={(selectedColumns[col.translationKey as SalesAndTrafficColumnKey] ?? -1) >= 0} control={<Checkbox onChange={(e, checked) => {\n          if (!checked && selectAll) {\n            setSelectAll(false);\n          }\n          setSelectedColumns(prev => ({\n            ...prev,\n            [col.translationKey]: checked ? index : -1\n          }));\n        }} />} label={col.label} />\n              </Stack>)}\n        </>}\n    </Modal>;\n};\nexport default ColumnSelectionModal;","import { Checkbox, FormControlLabel, Stack } from '@mui/material';\nimport { enqueueSnackbar } from '@riptech/minimal-ui/src/components/snackbar';\nimport { Modal, type ModalAction } from '@riptech/shared-ui';\nimport { CommonUtils } from '@riptech/utils';\nimport type { BusinessReportsRequestType } from '@seller-utilities/database';\nimport type { BusinessReportForm, SalesAndTrafficReportColumn } from '@seller-utilities/types';\nimport type { FormikProps } from 'formik';\nimport { type FC, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport UserActions from '../../../../redux/actions/userActions';\nimport type { BusinessReportColumnSelections, SalesAndTrafficColumnKey } from '../../../../utils/request/SellerCentralRequest/utils/BusinessReportRequestUtils';\nimport { HiddenReportColumnIndexesForComparison } from '../../../../utils/request/SellerCentralRequest/utils/BusinessReportRequestUtils';\ninterface ComparisonColumnsModalProps {\n  readonly columns: Array<SalesAndTrafficReportColumn>;\n  readonly selections: BusinessReportColumnSelections;\n  readonly onClose: () => void;\n  readonly open: boolean;\n  readonly formik: FormikProps<BusinessReportForm>;\n  readonly requestType: BusinessReportsRequestType;\n}\nconst ComparisonColumnsModal: FC<ComparisonColumnsModalProps> = ({\n  selections,\n  columns,\n  onClose,\n  open,\n  formik,\n  requestType\n}) => {\n  const dispatch = useDispatch();\n  const [selectedColumns, setSelectedColumns] = useState<BusinessReportColumnSelections>(formik.values.comparisonColumns ?? {});\n  useEffect(() => {\n    if (open) {\n      setSelectedColumns(formik.values.comparisonColumns ?? {});\n    }\n  }, [formik.values.comparisonColumns, open]);\n  const actions: Array<ModalAction> = [{\n    onClick: () => {\n      onClose();\n      setSelectedColumns(formik.values.comparisonColumns ?? {});\n    },\n    text: 'Cancel',\n    variant: 'outlined'\n  }, {\n    onClick: () => {\n      if (!Object.keys(selectedColumns).length) {\n        enqueueSnackbar({\n          message: 'You must select at least one column for comparison',\n          variant: 'error'\n        });\n        return;\n      }\n      formik.setValues(prev => ({\n        ...prev,\n        comparisonColumns: selectedColumns\n      }));\n      onClose();\n      dispatch(UserActions.setColumnSelection({\n        requestType,\n        selections,\n        comparisonColumns: selectedColumns\n      }));\n    },\n    text: 'Add',\n    variant: 'contained'\n  }];\n  return <Modal actions={actions} maxWidth=\"xs\" onClose={onClose} open={open} title=\"Select the columns to compare\" data-sentry-element=\"Modal\" data-sentry-component=\"ComparisonColumnsModal\" data-sentry-source-file=\"ComparisonColumnsModal.tsx\">\n      {!columns.length || !Object.keys(selections).length ? 'No selection found' : Object.entries(selections).map(([translationKey, indexOfSelection]) => translationKey in HiddenReportColumnIndexesForComparison[requestType] ? null : <Stack key={translationKey}>\n                <FormControlLabel key={translationKey} control={<Checkbox checked={(selectedColumns[translationKey as SalesAndTrafficColumnKey] ?? -1) >= 0} onChange={(e, checked) => {\n        if (checked) {\n          setSelectedColumns(prev => ({\n            ...prev,\n            [translationKey]: indexOfSelection\n          }));\n        } else {\n          setSelectedColumns(prev => CommonUtils.omit(prev, translationKey as SalesAndTrafficColumnKey));\n        }\n      }} />} label={columns[indexOfSelection].label} />\n              </Stack>)}\n    </Modal>;\n};\nexport default ComparisonColumnsModal;","import type { DateRangePickerProps } from '@mui/lab';\nimport { DesktopDateRangePicker, MobileDateRangePicker } from '@mui/x-date-pickers-pro';\nimport { useResponsive } from '@riptech/minimal-ui/src/hooks/use-responsive';\nimport type { FC } from 'react';\nconst DateRangePicker: FC<DateRangePickerProps> = props => {\n  const isMobile = useResponsive('down', 'sm');\n  return isMobile ? <MobileDateRangePicker {...props} /> : <DesktopDateRangePicker {...props} />;\n};\nexport default DateRangePicker;","import { FormControl, FormControlLabel, IconButton, Radio, RadioGroup, Stack } from '@mui/material';\nimport type { DateRange } from '@mui/x-date-pickers-pro';\nimport { SingleInputDateRangeField } from '@mui/x-date-pickers-pro';\nimport { Iconify } from '@riptech/minimal-ui/src/components/iconify';\nimport { enqueueSnackbar } from '@riptech/minimal-ui/src/components/snackbar';\nimport { Modal } from '@riptech/shared-ui';\nimport DateRangePicker from '@riptech/shared-ui/src/components/DateRangePicker';\nimport type { BusinessReportForm } from '@seller-utilities/types';\nimport type { FormikProps } from 'formik';\nimport type { Moment } from 'moment-timezone';\nimport moment from 'moment-timezone';\nimport type { FC } from 'react';\ninterface DailyDateRangeModalProps {\n  readonly onClose: () => void;\n  readonly open: boolean;\n  readonly formik: FormikProps<BusinessReportForm>;\n}\ntype DailyDateRangeType = 'sevenDays' | 'fifteenDays' | 'thirtyDays' | 'lastWeek' | 'customRange' | 'lastMonth' | 'lastQuarter' | 'last365Days' | 'yearToDate';\nexport interface DateRangeType {\n  start: Moment;\n  end: Moment;\n}\nexport const isDateRangeExists = (r: DateRangeType, formik: FormikProps<BusinessReportForm>) => formik.values.dateRanges.some(range => range.start === r.start.format('YYYY-MM-DD') && range.end === r.end.format('YYYY-MM-DD'));\nconst DailyDateRangeModal: FC<DailyDateRangeModalProps> = ({\n  onClose,\n  open,\n  formik\n}) => {\n  const setSelectedDateRangeAndClose = (r: DateRangeType) => {\n    if (r.start && r.end) {\n      if (formik.values.dateRanges.some(range => range.start === r.start.format('YYYY-MM-DD') && range.end === r.end.format('YYYY-MM-DD'))) {\n        enqueueSnackbar({\n          message: 'Date range already added',\n          variant: 'error'\n        });\n        return;\n      }\n      formik.setFieldValue('dateRanges', [...formik.values.dateRanges, {\n        label: `${r.start.format('MMMM, D YYYY')} - ${r.end.format('MMMM, D YYYY')}`,\n        start: r.start.format('YYYY-MM-DD'),\n        end: r.end.format('YYYY-MM-DD')\n      }]);\n    }\n    onClose();\n  };\n  const today = moment().utc();\n  const dateRangeMap: Record<Exclude<DailyDateRangeType, 'customRange'>, DateRangeType> = {\n    sevenDays: {\n      start: today.clone().subtract(7, 'days'),\n      end: today\n    },\n    fifteenDays: {\n      start: today.clone().subtract(15, 'days'),\n      end: today\n    },\n    thirtyDays: {\n      start: today.clone().subtract(30, 'days'),\n      end: today\n    },\n    lastWeek: {\n      start: today.clone().startOf('week').subtract(1, 'week'),\n      end: today.clone().startOf('week').subtract(1, 'day').endOf('day')\n    },\n    lastMonth: {\n      start: today.clone().startOf('month').subtract(1, 'month'),\n      end: today.clone().startOf('month').subtract(1, 'day').endOf('day')\n    },\n    lastQuarter: {\n      start: today.clone().startOf('quarter').subtract(1, 'quarter'),\n      end: today.clone().startOf('quarter').subtract(1, 'day').endOf('day')\n    },\n    last365Days: {\n      start: today.clone().subtract(365, 'days'),\n      end: today\n    },\n    yearToDate: {\n      start: today.clone().startOf('year'),\n      end: today\n    }\n  };\n  const handleDateRange = (value: DailyDateRangeType) => {\n    switch (value) {\n      case 'sevenDays':\n        setSelectedDateRangeAndClose(dateRangeMap.sevenDays);\n        break;\n      case 'fifteenDays':\n        setSelectedDateRangeAndClose(dateRangeMap.fifteenDays);\n        break;\n      case 'thirtyDays':\n        setSelectedDateRangeAndClose(dateRangeMap.thirtyDays);\n        break;\n      case 'lastWeek':\n        setSelectedDateRangeAndClose(dateRangeMap.lastWeek);\n        break;\n      case 'lastMonth':\n        setSelectedDateRangeAndClose(dateRangeMap.lastMonth);\n        break;\n      case 'lastQuarter':\n        setSelectedDateRangeAndClose(dateRangeMap.lastQuarter);\n        break;\n      case 'last365Days':\n        setSelectedDateRangeAndClose(dateRangeMap.last365Days);\n        break;\n      case 'yearToDate':\n        setSelectedDateRangeAndClose(dateRangeMap.yearToDate);\n        break;\n      case 'customRange':\n        break;\n      default:\n        break;\n    }\n  };\n  return <Modal maxWidth=\"xs\" onClose={onClose} open={open} title=\"Date Ranges\" data-sentry-element=\"Modal\" data-sentry-component=\"DailyDateRangeModal\" data-sentry-source-file=\"DailyDateRangeModal.tsx\">\n      <FormControl fullWidth data-sentry-element=\"FormControl\" data-sentry-source-file=\"DailyDateRangeModal.tsx\">\n        <RadioGroup aria-labelledby=\"date-range-radio-buttons-group-label\" defaultValue=\"customRange\" name=\"date-range-radio-buttons\" onChange={(e, value) => {\n        handleDateRange(value as DailyDateRangeType);\n      }} data-sentry-element=\"RadioGroup\" data-sentry-source-file=\"DailyDateRangeModal.tsx\">\n          <Stack direction=\"row\" justifyContent=\"space-between\" px={2} data-sentry-element=\"Stack\" data-sentry-source-file=\"DailyDateRangeModal.tsx\">\n            <Stack data-sentry-element=\"Stack\" data-sentry-source-file=\"DailyDateRangeModal.tsx\">\n              <FormControlLabel control={<Radio />} disabled={isDateRangeExists(dateRangeMap.sevenDays, formik)} label=\"Last 7 Days\" value=\"sevenDays\" data-sentry-element=\"FormControlLabel\" data-sentry-source-file=\"DailyDateRangeModal.tsx\" />\n              <FormControlLabel control={<Radio />} disabled={isDateRangeExists(dateRangeMap.fifteenDays, formik)} label=\"Last 15 Days\" value=\"fifteenDays\" data-sentry-element=\"FormControlLabel\" data-sentry-source-file=\"DailyDateRangeModal.tsx\" />\n              <FormControlLabel control={<Radio />} disabled={isDateRangeExists(dateRangeMap.thirtyDays, formik)} label=\"Last 30 Days\" value=\"thirtyDays\" data-sentry-element=\"FormControlLabel\" data-sentry-source-file=\"DailyDateRangeModal.tsx\" />\n              <FormControlLabel control={<Radio />} disabled={isDateRangeExists(dateRangeMap.lastWeek, formik)} label=\"Last Week\" value=\"lastWeek\" data-sentry-element=\"FormControlLabel\" data-sentry-source-file=\"DailyDateRangeModal.tsx\" />\n              <FormControlLabel control={<Radio />} label=\"Custom Range\" value=\"customRange\" data-sentry-element=\"FormControlLabel\" data-sentry-source-file=\"DailyDateRangeModal.tsx\" />\n            </Stack>\n            <Stack data-sentry-element=\"Stack\" data-sentry-source-file=\"DailyDateRangeModal.tsx\">\n              <FormControlLabel control={<Radio />} disabled={isDateRangeExists(dateRangeMap.lastMonth, formik)} label=\"Last Month\" value=\"lastMonth\" data-sentry-element=\"FormControlLabel\" data-sentry-source-file=\"DailyDateRangeModal.tsx\" />\n              <FormControlLabel control={<Radio />} disabled={isDateRangeExists(dateRangeMap.lastQuarter, formik)} label=\"Last Quarter\" value=\"lastQuarter\" data-sentry-element=\"FormControlLabel\" data-sentry-source-file=\"DailyDateRangeModal.tsx\" />\n              <FormControlLabel control={<Radio />} disabled={isDateRangeExists(dateRangeMap.last365Days, formik)} label=\"Last 365 Days\" value=\"last365Days\" data-sentry-element=\"FormControlLabel\" data-sentry-source-file=\"DailyDateRangeModal.tsx\" />\n              <FormControlLabel control={<Radio />} disabled={isDateRangeExists(dateRangeMap.yearToDate, formik)} label=\"Year to Date\" value=\"yearToDate\" data-sentry-element=\"FormControlLabel\" data-sentry-source-file=\"DailyDateRangeModal.tsx\" />\n            </Stack>\n          </Stack>\n        </RadioGroup>\n      </FormControl>\n      <Stack mt={2} data-sentry-element=\"Stack\" data-sentry-source-file=\"DailyDateRangeModal.tsx\">\n        <DateRangePicker currentMonthCalendarPosition={2} disableFuture minDate={moment().utc().subtract(2, 'years')} onChange={(value: DateRange<Moment>) => {\n        if (value[0] && value[1]) {\n          setSelectedDateRangeAndClose({\n            start: value[0].clone().startOf('day'),\n            end: value[1].clone().endOf('day')\n          });\n        }\n      }} slotProps={{\n        textField: {\n          fullWidth: true,\n          InputProps: {\n            endAdornment: <IconButton>\n                    <Iconify icon=\"ic:outline-date-range\" />\n                  </IconButton>\n          },\n          placeholder: 'Date Range',\n          size: 'medium',\n          variant: 'outlined'\n        }\n      }} slots={{\n        field: SingleInputDateRangeField\n      }} data-sentry-element=\"DateRangePicker\" data-sentry-source-file=\"DailyDateRangeModal.tsx\" />\n      </Stack>\n    </Modal>;\n};\nexport default DailyDateRangeModal;","import { Checkbox, FormControl, FormControlLabel, RadioGroup, Stack } from '@mui/material';\nimport { enqueueSnackbar } from '@riptech/minimal-ui/src/components/snackbar';\nimport type { ModalAction } from '@riptech/shared-ui';\nimport { Modal } from '@riptech/shared-ui';\nimport type { BusinessReportDateRangeOption, BusinessReportForm } from '@seller-utilities/types';\nimport type { FormikProps } from 'formik';\nimport moment from 'moment-timezone';\nimport type { FC } from 'react';\nimport { useMemo, useState } from 'react';\nimport { isDateRangeExists } from './DailyDateRangeModal';\ninterface MonthlyDateRangeModalProps {\n  readonly onClose: () => void;\n  readonly open: boolean;\n  readonly formik: FormikProps<BusinessReportForm>;\n}\nconst MonthlyDateRangeModal: FC<MonthlyDateRangeModalProps> = ({\n  onClose,\n  open,\n  formik\n}) => {\n  const [selectedMonths, setSelectedMonths] = useState<Record<string, boolean>>({});\n  const monthRanges = useMemo(() => {\n    const months: Array<BusinessReportDateRangeOption> = [];\n    const today = moment().utc();\n    const minStartDate = today.clone().subtract(2, 'years');\n    const end = moment().utc().startOf('month');\n    const start = end.clone().subtract(2, 'years');\n    for (let current = end.clone(); current.isAfter(start); current.subtract(1, 'month')) {\n      const startOfCurrentTimeFrame = current.clone().startOf('month');\n      const endOfCurrentTimeFrame = current.clone().endOf('month');\n      months.push({\n        label: current.format('MMM YYYY'),\n        start: startOfCurrentTimeFrame.isAfter(minStartDate) ? startOfCurrentTimeFrame.format('YYYY-MM-DD') : minStartDate.format('YYYY-MM-DD'),\n        end: endOfCurrentTimeFrame.isAfter(today) ? today.format('YYYY-MM-DD') : endOfCurrentTimeFrame.format('YYYY-MM-DD')\n      });\n    }\n    return months;\n  }, []);\n  const actions: Array<ModalAction> = [{\n    onClick: () => {\n      setSelectedMonths({});\n      onClose();\n    },\n    text: 'Cancel',\n    variant: 'outlined'\n  }, {\n    onClick: () => {\n      const selectedDateRanges = monthRanges.filter(range => selectedMonths[range.label]).reduce((acc, cur) => {\n        acc.push({\n          label: cur.label,\n          start: cur.start,\n          end: cur.end\n        });\n        return acc;\n      }, [] as Array<BusinessReportDateRangeOption>);\n      if (!selectedDateRanges.length) {\n        enqueueSnackbar({\n          message: 'You must select at least one date range to add',\n          variant: 'error'\n        });\n        return;\n      }\n      const duplicates = selectedDateRanges.filter(cur => formik.values.dateRanges.some(range => range.start === cur.start && range.end === cur.end)).map(sel => sel.label);\n      if (duplicates.length) {\n        enqueueSnackbar({\n          message: `Date ranges: ${duplicates.join(',')} already added`,\n          variant: 'error'\n        });\n        return;\n      }\n      formik.setFieldValue('dateRanges', [...formik.values.dateRanges, ...selectedDateRanges]);\n      setSelectedMonths({});\n      onClose();\n    },\n    text: 'Add',\n    variant: 'contained'\n  }];\n  return <Modal actions={actions} maxWidth=\"xs\" onClose={onClose} open={open} title=\"Date Range Options\" data-sentry-element=\"Modal\" data-sentry-component=\"MonthlyDateRangeModal\" data-sentry-source-file=\"MonthlyDateRangeModal.tsx\">\n      <FormControl fullWidth data-sentry-element=\"FormControl\" data-sentry-source-file=\"MonthlyDateRangeModal.tsx\">\n        <RadioGroup aria-labelledby=\"month-range-options\" data-sentry-element=\"RadioGroup\" data-sentry-source-file=\"MonthlyDateRangeModal.tsx\">\n          <Stack ml={1} data-sentry-element=\"Stack\" data-sentry-source-file=\"MonthlyDateRangeModal.tsx\">\n            {monthRanges.map(month => <FormControlLabel key={month.label} control={<Checkbox checked={!!selectedMonths[month.label]} onChange={(e, checked) => {\n            setSelectedMonths(prev => ({\n              ...prev,\n              [month.label]: checked\n            }));\n          }} />} disabled={isDateRangeExists({\n            start: moment(month.start),\n            end: moment(month.end)\n          }, formik)} label={month.label} />)}\n          </Stack>\n        </RadioGroup>\n      </FormControl>\n    </Modal>;\n};\nexport default MonthlyDateRangeModal;","import { Checkbox, FormControl, FormControlLabel, RadioGroup, Stack } from '@mui/material';\nimport { enqueueSnackbar } from '@riptech/minimal-ui/src/components/snackbar';\nimport type { ModalAction } from '@riptech/shared-ui';\nimport { Modal } from '@riptech/shared-ui';\nimport type { BusinessReportDateRangeOption, BusinessReportForm } from '@seller-utilities/types';\nimport type { FormikProps } from 'formik';\nimport moment from 'moment-timezone';\nimport type { FC } from 'react';\nimport { useMemo, useState } from 'react';\nimport { isDateRangeExists } from './DailyDateRangeModal';\ninterface QuarterlyDateRangeModalProps {\n  readonly onClose: () => void;\n  readonly open: boolean;\n  readonly formik: FormikProps<BusinessReportForm>;\n}\nconst QuarterlyDateRangeModal: FC<QuarterlyDateRangeModalProps> = ({\n  onClose,\n  open,\n  formik\n}) => {\n  const [selectedQuarters, setSelectedQuarters] = useState<Record<string, boolean>>({});\n  const quarterRanges = useMemo(() => {\n    const quarters: Array<BusinessReportDateRangeOption> = [];\n    const today = moment().utc();\n    const minStartDate = today.clone().subtract(2, 'years');\n    const end = moment().utc().startOf('quarter');\n    const start = end.clone().subtract(2, 'years');\n    for (let current = end.clone(); current.isAfter(start); current.subtract(3, 'months')) {\n      const quarterLabel = `Q${Math.floor(current.month() / 3) + 1} ${current.format('YYYY')}`;\n      const startOfCurrentTimeFrame = current.clone().startOf('quarter');\n      const endOfCurrentTimeFrame = current.clone().endOf('quarter');\n      quarters.push({\n        label: quarterLabel,\n        start: startOfCurrentTimeFrame.isAfter(minStartDate) ? startOfCurrentTimeFrame.format('YYYY-MM-DD') : minStartDate.format('YYYY-MM-DD'),\n        end: endOfCurrentTimeFrame.isAfter(today) ? today.format('YYYY-MM-DD') : endOfCurrentTimeFrame.format('YYYY-MM-DD')\n      });\n    }\n    return quarters;\n  }, []);\n  const actions: Array<ModalAction> = [{\n    onClick: () => {\n      setSelectedQuarters({});\n      onClose();\n    },\n    text: 'Cancel',\n    variant: 'outlined'\n  }, {\n    onClick: () => {\n      const selectedDateRanges = quarterRanges.filter(range => selectedQuarters[range.label]).reduce((acc, cur) => {\n        acc.push({\n          label: cur.label,\n          start: cur.start,\n          end: cur.end\n        });\n        return acc;\n      }, [] as Array<BusinessReportDateRangeOption>);\n      const duplicates = selectedDateRanges.filter(cur => formik.values.dateRanges.some(range => range.start === cur.start && range.end === cur.end)).map(sel => sel.label);\n      if (duplicates.length) {\n        enqueueSnackbar({\n          message: `Date ranges: ${duplicates.join(',')} already added`,\n          variant: 'error'\n        });\n        return;\n      }\n      if (!selectedDateRanges.length) {\n        enqueueSnackbar({\n          message: 'You must select at least one date range to add',\n          variant: 'error'\n        });\n        return;\n      }\n      formik.setFieldValue('dateRanges', [...formik.values.dateRanges, ...selectedDateRanges]);\n      setSelectedQuarters({});\n      onClose();\n    },\n    text: 'Add',\n    variant: 'contained'\n  }];\n  return <Modal actions={actions} maxWidth=\"xs\" onClose={onClose} open={open} title=\"Quarterly Date Range Options\" data-sentry-element=\"Modal\" data-sentry-component=\"QuarterlyDateRangeModal\" data-sentry-source-file=\"QuarterlyDateRangeModal.tsx\">\n      <FormControl fullWidth data-sentry-element=\"FormControl\" data-sentry-source-file=\"QuarterlyDateRangeModal.tsx\">\n        <RadioGroup aria-labelledby=\"quarter-range-options\" data-sentry-element=\"RadioGroup\" data-sentry-source-file=\"QuarterlyDateRangeModal.tsx\">\n          <Stack ml={1} data-sentry-element=\"Stack\" data-sentry-source-file=\"QuarterlyDateRangeModal.tsx\">\n            {quarterRanges.map(quarter => <FormControlLabel key={quarter.label} control={<Checkbox checked={!!selectedQuarters[quarter.label]} onChange={(e, checked) => {\n            setSelectedQuarters(prev => ({\n              ...prev,\n              [quarter.label]: checked\n            }));\n          }} />} disabled={isDateRangeExists({\n            start: moment(quarter.start),\n            end: moment(quarter.end)\n          }, formik)} label={quarter.label} />)}\n          </Stack>\n        </RadioGroup>\n      </FormControl>\n    </Modal>;\n};\nexport default QuarterlyDateRangeModal;","import { Checkbox, FormControl, FormControlLabel, MenuItem, Radio, RadioGroup, Stack, TextField, Typography } from '@mui/material';\nimport { enqueueSnackbar } from '@riptech/minimal-ui/src/components/snackbar';\nimport type { ModalAction } from '@riptech/shared-ui';\nimport { Modal } from '@riptech/shared-ui';\nimport type { BusinessReportDateRangeOption, BusinessReportForm } from '@seller-utilities/types';\nimport type { FormikProps } from 'formik';\nimport moment from 'moment-timezone';\nimport type { FC } from 'react';\nimport { useMemo, useState } from 'react';\nimport { type DateRangeType, isDateRangeExists } from './DailyDateRangeModal';\ntype WeeklyRangeType = 'last4Weeks' | 'last10Weeks' | 'yearToDate' | 'lastWeek' | 'customRange';\nconst MONDAY = 1;\nconst SUNDAY = 0;\ninterface WeeklyDateRangeModalProps {\n  readonly onClose: () => void;\n  readonly open: boolean;\n  readonly formik: FormikProps<BusinessReportForm>;\n}\nconst WeeklyDateRangeModal: FC<WeeklyDateRangeModalProps> = ({\n  onClose,\n  open,\n  formik\n}) => {\n  const [startOfWeekDay, setStartOfWeekDay] = useState<number>(MONDAY);\n  const [selectedWeeks, setSelectedWeeks] = useState<Record<string, boolean>>({});\n  const weekRanges = useMemo(() => {\n    const weeks: Array<BusinessReportDateRangeOption> = [];\n    const today = moment().utc();\n    const minStartDate = today.clone().subtract(2, 'years');\n    const end = today.clone().startOf('isoWeek').add(startOfWeekDay, 'days').subtract(2, 'days');\n    const start = end.clone().subtract(2, 'years');\n    for (let currentStart = end.clone(); currentStart.isAfter(start); currentStart.subtract(7, 'days')) {\n      const endOfCurrentTimeFrame = currentStart.clone().add(6, 'days');\n      weeks.push({\n        label: `W${currentStart.isoWeek()} | ${currentStart.format('MMM D, YYYY')} - ${endOfCurrentTimeFrame.isAfter(today) ? today.format('MMM D, YYYY') : endOfCurrentTimeFrame.format('MMM D, YYYY')}`,\n        start: currentStart.isAfter(minStartDate) ? currentStart.format('YYYY-MM-DD') : minStartDate.format('YYYY-MM-DD'),\n        end: endOfCurrentTimeFrame.isAfter(today) ? today.format('YYYY-MM-DD') : endOfCurrentTimeFrame.format('YYYY-MM-DD')\n      });\n    }\n    return weeks;\n  }, [startOfWeekDay]);\n  const setSelectedDateRangeAndClose = (r: DateRangeType) => {\n    if (!formik.values.dateRanges.some(range => range.start === r.start.format('MMMM, D YYYY') && range.end === r.end.format('MMMM, D YYYY'))) {\n      formik.setFieldValue('dateRanges', [...formik.values.dateRanges, {\n        label: `${r.start.format('MMMM, D YYYY')} - ${r.end.format('MMMM, D YYYY')}`,\n        start: r.start.format('YYYY-MM-DD'),\n        end: r.end.format('YYYY-MM-DD')\n      }]);\n    }\n    onClose();\n  };\n  const today = moment();\n  const dateRangeMap: Record<Exclude<WeeklyRangeType, 'customRange'>, DateRangeType> = {\n    last4Weeks: {\n      start: today.clone().subtract(4, 'weeks').startOf('week').isoWeekday(startOfWeekDay),\n      end: today.clone().endOf('week').isoWeekday(startOfWeekDay === 0 ? 6 : 7)\n    },\n    last10Weeks: {\n      start: today.clone().subtract(10, 'weeks').startOf('week').isoWeekday(startOfWeekDay),\n      end: today.clone().endOf('week').isoWeekday(startOfWeekDay === 0 ? 6 : 7)\n    },\n    yearToDate: {\n      start: today.clone().startOf('year'),\n      end: today\n    },\n    lastWeek: {\n      start: today.clone().startOf('week').subtract(1, 'week').isoWeekday(startOfWeekDay),\n      end: today.clone().endOf('week').isoWeekday(startOfWeekDay === 0 ? 6 : 7)\n    }\n  };\n  const handleWeekRange = (value: WeeklyRangeType) => {\n    switch (value) {\n      case 'last4Weeks':\n        setSelectedDateRangeAndClose(dateRangeMap.last4Weeks);\n        break;\n      case 'last10Weeks':\n        setSelectedDateRangeAndClose(dateRangeMap.last10Weeks);\n        break;\n      case 'yearToDate':\n        setSelectedDateRangeAndClose(dateRangeMap.yearToDate);\n        break;\n      case 'lastWeek':\n        setSelectedDateRangeAndClose(dateRangeMap.lastWeek);\n        break;\n      case 'customRange':\n        break;\n      default:\n        break;\n    }\n  };\n  const actions: Array<ModalAction> = [{\n    onClick: () => {\n      setSelectedWeeks({});\n      onClose();\n    },\n    text: 'Cancel',\n    variant: 'outlined'\n  }, {\n    onClick: () => {\n      const selectedWeekRanges = weekRanges.filter(range => selectedWeeks[range.label]).reduce((acc, cur) => {\n        acc.push({\n          label: cur.label,\n          start: cur.start,\n          end: cur.end\n        });\n        return acc;\n      }, [] as Array<BusinessReportDateRangeOption>);\n      if (!selectedWeekRanges.length) {\n        enqueueSnackbar({\n          message: 'You must select at least one date range to add',\n          variant: 'error'\n        });\n        return;\n      }\n      const duplicates = selectedWeekRanges.filter(sel => sel && formik.values.dateRanges.find(range => range.start === sel.start && range.end === sel.end)).map(sel => sel?.label.split('|')[0]);\n      if (duplicates.length) {\n        enqueueSnackbar({\n          message: `Date ranges: ${duplicates.join(',')} already added`,\n          variant: 'error'\n        });\n        return;\n      }\n      formik.setFieldValue('dateRanges', [...formik.values.dateRanges, ...selectedWeekRanges]);\n      setSelectedWeeks({});\n      onClose();\n    },\n    text: 'Add',\n    variant: 'contained'\n  }];\n  return <Modal actions={actions} maxWidth=\"xs\" onClose={onClose} open={open} title=\"Date Range Options\" data-sentry-element=\"Modal\" data-sentry-component=\"WeeklyDateRangeModal\" data-sentry-source-file=\"WeeklyDateRangeModal.tsx\">\n      <TextField defaultValue={MONDAY} fullWidth label=\"Start of week\" name=\"startOfWeek\" onChange={e => setStartOfWeekDay(e.target.value as unknown as number)} placeholder=\"Select the start of the weeek\" select data-sentry-element=\"TextField\" data-sentry-source-file=\"WeeklyDateRangeModal.tsx\">\n        <MenuItem value={SUNDAY} data-sentry-element=\"MenuItem\" data-sentry-source-file=\"WeeklyDateRangeModal.tsx\">\n          <Stack alignItems=\"center\" direction=\"row\" spacing={1} data-sentry-element=\"Stack\" data-sentry-source-file=\"WeeklyDateRangeModal.tsx\">\n            <Typography variant=\"body2\" data-sentry-element=\"Typography\" data-sentry-source-file=\"WeeklyDateRangeModal.tsx\">Sunday</Typography>\n          </Stack>\n        </MenuItem>\n        <MenuItem value={MONDAY} data-sentry-element=\"MenuItem\" data-sentry-source-file=\"WeeklyDateRangeModal.tsx\">\n          <Stack alignItems=\"center\" direction=\"row\" spacing={1} data-sentry-element=\"Stack\" data-sentry-source-file=\"WeeklyDateRangeModal.tsx\">\n            <Typography variant=\"body2\" data-sentry-element=\"Typography\" data-sentry-source-file=\"WeeklyDateRangeModal.tsx\">Monday</Typography>\n          </Stack>\n        </MenuItem>\n      </TextField>\n      <FormControl fullWidth data-sentry-element=\"FormControl\" data-sentry-source-file=\"WeeklyDateRangeModal.tsx\">\n        <RadioGroup aria-labelledby=\"week-range-radio-buttons-group-label\" defaultValue=\"customRange\" name=\"week-range-radio-buttons\" onChange={(e, value) => {\n        handleWeekRange(value as WeeklyRangeType);\n      }} data-sentry-element=\"RadioGroup\" data-sentry-source-file=\"WeeklyDateRangeModal.tsx\">\n          <Stack justifyContent=\"space-between\" px={2} data-sentry-element=\"Stack\" data-sentry-source-file=\"WeeklyDateRangeModal.tsx\">\n            <FormControlLabel control={<Radio />} disabled={isDateRangeExists(dateRangeMap.last4Weeks, formik)} label=\"Last 4 Weeks\" value=\"last4Weeks\" data-sentry-element=\"FormControlLabel\" data-sentry-source-file=\"WeeklyDateRangeModal.tsx\" />\n            <FormControlLabel control={<Radio />} disabled={isDateRangeExists(dateRangeMap.last10Weeks, formik)} label=\"Last 10 Weeks\" value=\"last10Weeks\" data-sentry-element=\"FormControlLabel\" data-sentry-source-file=\"WeeklyDateRangeModal.tsx\" />\n            <FormControlLabel control={<Radio />} disabled={isDateRangeExists(dateRangeMap.yearToDate, formik)} label=\"Year to Date\" value=\"yearToDate\" data-sentry-element=\"FormControlLabel\" data-sentry-source-file=\"WeeklyDateRangeModal.tsx\" />\n            <FormControlLabel control={<Radio />} disabled={isDateRangeExists(dateRangeMap.lastWeek, formik)} label=\"Last Week\" value=\"lastWeek\" data-sentry-element=\"FormControlLabel\" data-sentry-source-file=\"WeeklyDateRangeModal.tsx\" />\n            <FormControlLabel control={<Radio />} label=\"Custom Range\" value=\"customRange\" data-sentry-element=\"FormControlLabel\" data-sentry-source-file=\"WeeklyDateRangeModal.tsx\" />\n          </Stack>\n        </RadioGroup>\n      </FormControl>\n\n      <Stack ml={1} mt={2} spacing={2} data-sentry-element=\"Stack\" data-sentry-source-file=\"WeeklyDateRangeModal.tsx\">\n        <FormControl fullWidth data-sentry-element=\"FormControl\" data-sentry-source-file=\"WeeklyDateRangeModal.tsx\">\n          <RadioGroup aria-labelledby=\"week-range-options\" data-sentry-element=\"RadioGroup\" data-sentry-source-file=\"WeeklyDateRangeModal.tsx\">\n            {weekRanges.map(week => <Stack key={week.label} ml={2}>\n                <FormControlLabel control={<Checkbox checked={!!selectedWeeks[week.label]} onChange={(e, checked) => {\n              setSelectedWeeks(prev => ({\n                ...prev,\n                [week.label]: checked\n              }));\n            }} />} disabled={isDateRangeExists({\n              start: moment(week.start),\n              end: moment(week.end)\n            }, formik)} label={week.label} />\n              </Stack>)}\n          </RadioGroup>\n        </FormControl>\n      </Stack>\n    </Modal>;\n};\nexport default WeeklyDateRangeModal;","import { useBoolean } from '@riptech/minimal-ui/src/hooks/use-boolean';\nimport type { SellerCentralMarketplace } from '@seller-utilities/database';\nimport type { BusinessReportForm, SalesAndTrafficReportColumn } from '@seller-utilities/types';\nimport { useQuery } from '@tanstack/react-query';\nimport type { FormikProps } from 'formik';\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport UserSelectors from '../../../../redux/selectors/userSelectors';\nimport SellerCentralRequestManager from '../../../../utils/request/SellerCentralRequest/SellerCentralRequestManager';\nimport type { BusinessReportColumnSelections, SalesAndTrafficColumnKey } from '../../../../utils/request/SellerCentralRequest/utils/BusinessReportRequestUtils';\nimport BusinessRequestUtils, { HiddenReportColumnIndexesForSelection } from '../../../../utils/request/SellerCentralRequest/utils/BusinessReportRequestUtils';\ninterface BusinessReportHooksType {\n  readonly formik: FormikProps<BusinessReportForm>;\n  readonly disabled: boolean;\n  readonly activeMarketplace: SellerCentralMarketplace;\n  readonly byDateColumns: Array<SalesAndTrafficReportColumn>;\n}\nexport default function useBusinessReports({\n  formik,\n  disabled,\n  activeMarketplace,\n  byDateColumns\n}: BusinessReportHooksType) {\n  const savedColumnSelection = useSelector(UserSelectors.columnSelectionByRequestTypeSelector(formik.values.requestType));\n  const {\n    data,\n    isPending,\n    isSuccess\n  } = useQuery({\n    enabled: !disabled,\n    queryFn: () => SellerCentralRequestManager.fetchSalesAndTrafficReportColumns(activeMarketplace, formik.values.requestType),\n    queryKey: ['fetchReportColumns', activeMarketplace, formik.values.requestType]\n  });\n  const [columns, setColumns] = useState<Array<SalesAndTrafficReportColumn>>(byDateColumns);\n  useEffect(() => {\n    if (savedColumnSelection) {\n      formik.setValues(prev => ({\n        ...prev,\n        comparisonColumns: savedColumnSelection.comparisonColumns ?? {},\n        columnSelections: savedColumnSelection.selections\n      }));\n    }\n    if (isSuccess && data) {\n      setColumns(data.data.getReportData.columns);\n    }\n    if (!savedColumnSelection && data) {\n      formik.setFieldValue('columnSelections', data.data.getReportData.columns.reduce((acc, curr, index) => {\n        acc[curr.translationKey as SalesAndTrafficColumnKey] = index;\n        return acc;\n      }, {} as BusinessReportColumnSelections));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isPending, savedColumnSelection, data, columns]);\n  const selectedColumns = Object.keys(formik.values.columnSelections ?? {}).reduce((acc, curr) => {\n    const {\n      labels\n    } = BusinessRequestUtils.getColumns(formik.values.requestType);\n    const colLabel = labels[curr as keyof typeof labels];\n    if (colLabel) {\n      acc[colLabel] = colLabel;\n      if (formik.values.isComparingColumns && formik.values.comparisonColumns?.[curr]) {\n        acc[`${colLabel} - Delta`] = `${colLabel} - Delta`;\n      }\n    }\n    return acc;\n  }, {} as Record<string, string>);\n  const countOfSelected = Object.keys(formik.values.columnSelections ?? {}).reduce((acc, curr) => {\n    if (formik.values.columnSelections?.[curr] && !(curr in HiddenReportColumnIndexesForSelection[formik.values.requestType])) {\n      return acc + 1;\n    }\n    return acc;\n  }, 0);\n  const enableComparisionColumns = !!Object.keys(formik.values.columnSelections ?? {}).length && Object.keys(formik.values.dateRanges).length === 2;\n  const numColumnsToCompare = Object.keys(formik.values.comparisonColumns ?? {}).reduce((acc, cur) => {\n    if (formik.values.comparisonColumns?.[cur]) {\n      return acc + 1;\n    }\n    return acc;\n  }, 0);\n  const dateRangeModal = useBoolean();\n  const columnSelectionModal = useBoolean();\n  const columnComparisonModal = useBoolean();\n  return {\n    selectedColumns,\n    columns,\n    countOfSelected,\n    enableComparisionColumns,\n    numColumnsToCompare,\n    isPending,\n    dateRangeModal,\n    columnComparisonModal,\n    columnSelectionModal\n  };\n}","import { MenuItem, Stack, TextField, ToggleButton, ToggleButtonGroup, Typography } from '@mui/material';\nimport { BackdropLoader } from '@riptech/shared-ui';\nimport type { SellerCentralMarketplace } from '@seller-utilities/database';\nimport { BUSINESS_REPORT_DATE_RANGE_OPTIONS, type BusinessReportForm, type SalesAndTrafficReportColumn } from '@seller-utilities/types';\nimport { useFormik } from 'formik';\nimport type { Dispatch, FC, SetStateAction } from 'react';\nimport * as Yup from 'yup';\nimport DataDestinationPicker from '../../dataDestination/DataDestinationPicker';\nimport BusinessReportSelections from './common/BusinessReportSelections';\nimport BusinessReportSubmitButton from './common/BusinessReportSubmitButton';\nimport ColumnSelectionModal from './common/ColumnSelectionModal';\nimport ComparisonColumnsModal from './common/ComparisonColumnsModal';\nimport DailyDateRangeModal from './common/DailyDateRangeModal';\nimport MonthlyDateRangeModal from './common/MonthlyDateRangeModal';\nimport QuarterlyDateRangeModal from './common/QuarterlyDateRangeModal';\nimport WeeklyDateRangeModal from './common/WeeklyDateRangeModal';\nimport useBusinessReports from './hooks/useBusinessReports';\ninterface BusinessReportProps {\n  readonly isLoading: boolean;\n  readonly disabled: boolean;\n  readonly byDateColumns: Array<SalesAndTrafficReportColumn>;\n  readonly activeMarketplace: SellerCentralMarketplace;\n  readonly setDownloadProgress: Dispatch<SetStateAction<number | null>>;\n  readonly downloadSalesAndTrafficData: (formData: BusinessReportForm) => Promise<void>;\n}\nconst ByASINReportForm: FC<BusinessReportProps> = ({\n  byDateColumns,\n  isLoading,\n  disabled,\n  activeMarketplace,\n  setDownloadProgress,\n  downloadSalesAndTrafficData\n}) => {\n  const formik = useFormik<BusinessReportForm>({\n    initialValues: {\n      view: 'Day',\n      columnSelections: {},\n      isComparingColumns: false,\n      dateRanges: [],\n      downloadDestinationType: 'Local',\n      menuItemDestination: 'Local',\n      dataConfigurationId: '',\n      isSavingToPreviousDestination: false,\n      reportType: 'BusinessByASINSKU',\n      requestType: 'SKU',\n      dateRangeGrouping: 'Daily',\n      marketplaceCode: '' as SellerCentralMarketplace,\n      periods: [],\n      reportingRange: 'Weekly',\n      asins: ''\n    },\n    onSubmit: async (values, formikHelpers) => {\n      setDownloadProgress(0);\n      await downloadSalesAndTrafficData(values);\n      formikHelpers.setSubmitting(false);\n    },\n    validationSchema: Yup.object().shape({\n      asins: Yup.string().test('maxAsins', 'You cannot enter more than 100 ASINs at a time', value => (value?.split?.('\\n')?.length ?? 0) <= 100),\n      dateRanges: Yup.array().min(1, 'You must select at least one date range').required(),\n      view: Yup.string().required('You must select a view')\n    })\n  });\n  const {\n    columns,\n    selectedColumns,\n    countOfSelected,\n    enableComparisionColumns,\n    numColumnsToCompare,\n    isPending,\n    dateRangeModal,\n    columnComparisonModal,\n    columnSelectionModal\n  } = useBusinessReports({\n    formik,\n    disabled,\n    activeMarketplace,\n    byDateColumns\n  });\n  return <>\n      <BackdropLoader open={!disabled && isPending} data-sentry-element=\"BackdropLoader\" data-sentry-source-file=\"ByASINReportForm.tsx\" />\n      <DailyDateRangeModal formik={formik} onClose={dateRangeModal.onFalse} open={dateRangeModal.value ? formik.values.dateRangeGrouping === 'Daily' : false} data-sentry-element=\"DailyDateRangeModal\" data-sentry-source-file=\"ByASINReportForm.tsx\" />\n      <WeeklyDateRangeModal formik={formik} onClose={dateRangeModal.onFalse} open={dateRangeModal.value ? formik.values.dateRangeGrouping === 'Weekly' : false} data-sentry-element=\"WeeklyDateRangeModal\" data-sentry-source-file=\"ByASINReportForm.tsx\" />\n      <MonthlyDateRangeModal formik={formik} onClose={dateRangeModal.onFalse} open={dateRangeModal.value ? formik.values.dateRangeGrouping === 'Monthly' : false} data-sentry-element=\"MonthlyDateRangeModal\" data-sentry-source-file=\"ByASINReportForm.tsx\" />\n      <QuarterlyDateRangeModal formik={formik} onClose={dateRangeModal.onFalse} open={dateRangeModal.value ? formik.values.dateRangeGrouping === 'Quarterly' : false} data-sentry-element=\"QuarterlyDateRangeModal\" data-sentry-source-file=\"ByASINReportForm.tsx\" />\n      <ColumnSelectionModal columns={columns} formik={formik} onClose={columnSelectionModal.onFalse} open={columnSelectionModal.value} requestType={formik.values.requestType} selections={formik.values.columnSelections ?? {}} data-sentry-element=\"ColumnSelectionModal\" data-sentry-source-file=\"ByASINReportForm.tsx\" />\n      <ComparisonColumnsModal columns={columns} formik={formik} onClose={columnComparisonModal.onFalse} open={columnComparisonModal.value} requestType={formik.values.requestType} selections={formik.values.columnSelections ?? {}} data-sentry-element=\"ComparisonColumnsModal\" data-sentry-source-file=\"ByASINReportForm.tsx\" />\n\n      <TextField defaultValue=\"Daily\" disabled={disabled} fullWidth label=\"Data date range grouping\" name=\"dateRangeGrouping\" onChange={formik.handleChange} placeholder=\"Select a date range grouping\" select value={formik.values.dateRangeGrouping} data-sentry-element=\"TextField\" data-sentry-source-file=\"ByASINReportForm.tsx\">\n        {BUSINESS_REPORT_DATE_RANGE_OPTIONS.map(range => <MenuItem key={range} value={range}>\n            <Stack alignItems=\"center\" direction=\"row\" spacing={1}>\n              <Typography variant=\"body2\">{range}</Typography>\n            </Stack>\n          </MenuItem>)}\n      </TextField>\n\n      <ToggleButtonGroup disabled={disabled} exclusive onChange={(e, requestType) => formik.setValues(prev => ({\n      ...prev,\n      requestType,\n      comparisonColumns: {},\n      columnSelections: {}\n    }))} size=\"small\" value={formik.values.requestType} data-sentry-element=\"ToggleButtonGroup\" data-sentry-source-file=\"ByASINReportForm.tsx\">\n        <ToggleButton fullWidth size=\"small\" value=\"SKU\" data-sentry-element=\"ToggleButton\" data-sentry-source-file=\"ByASINReportForm.tsx\">\n          SKU\n        </ToggleButton>\n        <ToggleButton fullWidth size=\"small\" value=\"ChildASIN\" data-sentry-element=\"ToggleButton\" data-sentry-source-file=\"ByASINReportForm.tsx\">\n          Child ASIN\n        </ToggleButton>\n        <ToggleButton fullWidth size=\"small\" value=\"ParentASIN\" data-sentry-element=\"ToggleButton\" data-sentry-source-file=\"ByASINReportForm.tsx\">\n          Parent ASIN\n        </ToggleButton>\n      </ToggleButtonGroup>\n\n      <BusinessReportSelections columnComparisonModal={columnComparisonModal} columnSelectionModal={columnSelectionModal} countOfSelected={countOfSelected} dateRangeModal={dateRangeModal} disabled={disabled} enableComparisionColumns={enableComparisionColumns} formik={formik} numColumnsToCompare={numColumnsToCompare} data-sentry-element=\"BusinessReportSelections\" data-sentry-source-file=\"ByASINReportForm.tsx\" />\n\n      <TextField disabled={disabled} error={!!formik.errors.asins} fullWidth helperText={formik.touched.asins ? formik.errors.asins : null} id=\"asins\" label=\"Enter up to 100 ASINs (optional)\" multiline name=\"asins\" onBlur={formik.handleBlur} onChange={formik.handleChange} placeholder=\"Enter up to 100 ASINs separated by new lines\" rows={4} value={formik.values.asins} variant=\"outlined\" data-sentry-element=\"TextField\" data-sentry-source-file=\"ByASINReportForm.tsx\" />\n\n      <DataDestinationPicker disabled={disabled} formik={formik} reportType={formik.values.reportType} selectedColumns={selectedColumns} data-sentry-element=\"DataDestinationPicker\" data-sentry-source-file=\"ByASINReportForm.tsx\" />\n\n      <BusinessReportSubmitButton disabled={disabled} formik={formik} isLoading={isLoading} data-sentry-element=\"BusinessReportSubmitButton\" data-sentry-source-file=\"ByASINReportForm.tsx\" />\n    </>;\n};\nexport default ByASINReportForm;","import { MenuItem, Stack, TextField, Typography } from '@mui/material';\nimport { BackdropLoader } from '@riptech/shared-ui';\nimport type { SellerCentralMarketplace } from '@seller-utilities/database';\nimport { BUSINESS_REPORT_VIEWS, type BusinessReportForm, type SalesAndTrafficReportColumn } from '@seller-utilities/types';\nimport { useFormik } from 'formik';\nimport type { Dispatch, FC, SetStateAction } from 'react';\nimport * as Yup from 'yup';\nimport DataDestinationPicker from '../../dataDestination/DataDestinationPicker';\nimport BusinessReportSelections from './common/BusinessReportSelections';\nimport BusinessReportSubmitButton from './common/BusinessReportSubmitButton';\nimport ColumnSelectionModal from './common/ColumnSelectionModal';\nimport ComparisonColumnsModal from './common/ComparisonColumnsModal';\nimport DailyDateRangeModal from './common/DailyDateRangeModal';\nimport useBusinessReports from './hooks/useBusinessReports';\ninterface BusinessReportProps {\n  readonly isLoading: boolean;\n  readonly disabled: boolean;\n  readonly byDateColumns: Array<SalesAndTrafficReportColumn>;\n  readonly activeMarketplace: SellerCentralMarketplace;\n  readonly setDownloadProgress: Dispatch<SetStateAction<number | null>>;\n  readonly downloadSalesAndTrafficData: (formData: BusinessReportForm) => Promise<void>;\n}\nconst ByDateReportForm: FC<BusinessReportProps> = ({\n  byDateColumns,\n  isLoading,\n  disabled,\n  activeMarketplace,\n  setDownloadProgress,\n  downloadSalesAndTrafficData\n}) => {\n  const formik = useFormik<BusinessReportForm>({\n    initialValues: {\n      view: 'Day',\n      columnSelections: {},\n      isComparingColumns: false,\n      dateRanges: [],\n      downloadDestinationType: 'Local',\n      menuItemDestination: 'Local',\n      dataConfigurationId: '',\n      isSavingToPreviousDestination: false,\n      reportType: 'BusinessByDate',\n      requestType: 'Date',\n      marketplaceCode: '' as SellerCentralMarketplace,\n      periods: [],\n      reportingRange: 'Weekly',\n      asins: '',\n      dateRangeGrouping: 'Daily'\n    },\n    onSubmit: async (values, formikHelpers) => {\n      setDownloadProgress(0);\n      await downloadSalesAndTrafficData(values);\n      formikHelpers.setSubmitting(false);\n    },\n    validationSchema: Yup.object().shape({\n      asins: Yup.string().test('maxAsins', 'You cannot enter more than 100 ASINs at a time', value => (value?.split?.('\\n')?.length ?? 0) <= 100),\n      dateRanges: Yup.array().min(1, 'You must select at least one date range').required(),\n      view: Yup.string().required('You must select a view')\n    })\n  });\n  const {\n    columns,\n    selectedColumns,\n    countOfSelected,\n    enableComparisionColumns,\n    numColumnsToCompare,\n    isPending,\n    dateRangeModal,\n    columnComparisonModal,\n    columnSelectionModal\n  } = useBusinessReports({\n    formik,\n    disabled,\n    activeMarketplace,\n    byDateColumns\n  });\n  return <>\n      <BackdropLoader open={!disabled && isPending} data-sentry-element=\"BackdropLoader\" data-sentry-source-file=\"ByDateReportForm.tsx\" />\n      <DailyDateRangeModal formik={formik} onClose={dateRangeModal.onFalse} open={dateRangeModal.value ? formik.values.requestType === 'Date' : false} data-sentry-element=\"DailyDateRangeModal\" data-sentry-source-file=\"ByDateReportForm.tsx\" />\n      <ColumnSelectionModal columns={columns} formik={formik} onClose={columnSelectionModal.onFalse} open={columnSelectionModal.value} requestType={formik.values.requestType} selections={formik.values.columnSelections ?? {}} data-sentry-element=\"ColumnSelectionModal\" data-sentry-source-file=\"ByDateReportForm.tsx\" />\n      <ComparisonColumnsModal columns={columns} formik={formik} onClose={columnComparisonModal.onFalse} open={columnComparisonModal.value} requestType={formik.values.requestType} selections={formik.values.columnSelections ?? {}} data-sentry-element=\"ComparisonColumnsModal\" data-sentry-source-file=\"ByDateReportForm.tsx\" />\n      <TextField defaultValue=\"Day\" disabled={disabled} fullWidth label=\"View\" name=\"view\" onChange={formik.handleChange} placeholder=\"Select a view\" select value={formik.values.view} data-sentry-element=\"TextField\" data-sentry-source-file=\"ByDateReportForm.tsx\">\n        {BUSINESS_REPORT_VIEWS.map(view => <MenuItem key={view} value={view}>\n            <Stack alignItems=\"center\" direction=\"row\" spacing={1}>\n              <Typography variant=\"body2\">{`By ${view}`}</Typography>\n            </Stack>\n          </MenuItem>)}\n      </TextField>\n\n      <BusinessReportSelections columnComparisonModal={columnComparisonModal} columnSelectionModal={columnSelectionModal} countOfSelected={countOfSelected} dateRangeModal={dateRangeModal} disabled={disabled} enableComparisionColumns={enableComparisionColumns} formik={formik} numColumnsToCompare={numColumnsToCompare} data-sentry-element=\"BusinessReportSelections\" data-sentry-source-file=\"ByDateReportForm.tsx\" />\n\n      <DataDestinationPicker disabled={disabled} formik={formik} reportType={formik.values.reportType} selectedColumns={selectedColumns} data-sentry-element=\"DataDestinationPicker\" data-sentry-source-file=\"ByDateReportForm.tsx\" />\n\n      <BusinessReportSubmitButton disabled={disabled} formik={formik} isLoading={isLoading} data-sentry-element=\"BusinessReportSubmitButton\" data-sentry-source-file=\"ByDateReportForm.tsx\" />\n    </>;\n};\nexport default ByDateReportForm;","import { Box, Stack, Tab, Tabs } from '@mui/material';\nimport { enqueueSnackbar } from '@riptech/minimal-ui/src/components/snackbar';\nimport type { BusinessReportForm, BusinessReportType } from '@seller-utilities/types';\nimport type { FC } from 'react';\nimport { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport UserSelectors from '../../../redux/selectors/userSelectors';\nimport ServerlessAPI from '../../../utils/api/serverless/ServerlessAPI';\nimport BusinessMetadataUtils from '../../../utils/reports/business/BusinessReportMetadataUtils';\nimport SalesAndTrafficReportDownloadUtils from '../../../utils/reports/business/SalesAndTrafficReportDownloadUtils';\nimport NoActiveSessionAlert from '../common/NoActiveSessionAlert';\nimport ReportFormContainer from '../common/ReportFormContainer';\nimport ReportProgressBar from '../common/ReportProgressBar';\nimport useReportFetcher from '../useReportFetcher';\nimport ByASINReportForm from './ByASINReportForm';\nimport ByDateReportForm from './ByDateReportForm';\nconst BusinessReports: FC = () => {\n  const [tabValue, setTabValue] = useState<BusinessReportType>('Date');\n  const activeMarketplace = useSelector(UserSelectors.activeMarketplaceSelector);\n  const {\n    loadingDetails,\n    metadata,\n    downloadReport,\n    fetchMetadata,\n    metadataStatus,\n    setDownloadProgress,\n    setUploadProgress\n  } = useReportFetcher(BusinessMetadataUtils.getMetadata, {\n    options: {\n      columns: []\n    }\n  });\n  const downloadSalesAndTrafficData = async (formData: BusinessReportForm) => {\n    try {\n      const {\n        columnSelections,\n        comparisonColumns,\n        requestType\n      } = formData;\n      const [failedValues] = await Promise.all([SalesAndTrafficReportDownloadUtils.downloadData(activeMarketplace!, formData, setDownloadProgress, downloadReport), ServerlessAPI.saveBusinessReportsColumnSelection({\n        requestType,\n        selections: columnSelections,\n        comparisonColumns: comparisonColumns ?? {}\n      })]);\n      if (failedValues.length) {\n        enqueueSnackbar(`The following date ranges failed to download data: ${failedValues.join(',')}`, {\n          persist: true,\n          preventDuplicate: false,\n          variant: 'error'\n        });\n      }\n    } catch (err: any) {\n      enqueueSnackbar(err?.message ?? 'Something went wrong', {\n        variant: 'error'\n      });\n    } finally {\n      setUploadProgress(0);\n      setDownloadProgress(null);\n    }\n  };\n  return <ReportFormContainer title=\"Business Reports\" data-sentry-element=\"ReportFormContainer\" data-sentry-component=\"BusinessReports\" data-sentry-source-file=\"BusinessReports.tsx\">\n      <NoActiveSessionAlert fetchMetadata={fetchMetadata} metadataStatus={metadataStatus} data-sentry-element=\"NoActiveSessionAlert\" data-sentry-source-file=\"BusinessReports.tsx\" />\n      <Box sx={{\n      paddingBottom: 2\n    }} data-sentry-element=\"Box\" data-sentry-source-file=\"BusinessReports.tsx\">\n        <Tabs onChange={(e, v) => {\n        setTabValue(v);\n      }} value={tabValue} variant=\"fullWidth\" data-sentry-element=\"Tabs\" data-sentry-source-file=\"BusinessReports.tsx\">\n          {(['Date', 'ASIN'] satisfies Array<BusinessReportType>).map(tabOption => <Tab key={tabOption} label={`By ${tabOption}`} value={tabOption} />)}\n        </Tabs>\n      </Box>\n      <Stack spacing={2} data-sentry-element=\"Stack\" data-sentry-source-file=\"BusinessReports.tsx\">\n        {tabValue === 'Date' ? <ByDateReportForm key={tabValue} activeMarketplace={activeMarketplace!} byDateColumns={metadata.options.columns} disabled={!!loadingDetails || metadataStatus !== 'success'} downloadSalesAndTrafficData={downloadSalesAndTrafficData} isLoading={!!loadingDetails} setDownloadProgress={setDownloadProgress} /> : <ByASINReportForm key={tabValue} activeMarketplace={activeMarketplace!} byDateColumns={metadata.options.columns} disabled={!!loadingDetails || metadataStatus !== 'success'} downloadSalesAndTrafficData={downloadSalesAndTrafficData} isLoading={!!loadingDetails} setDownloadProgress={setDownloadProgress} />}\n        {loadingDetails ? <ReportProgressBar label={loadingDetails.label} progress={loadingDetails.progress} /> : null}\n      </Stack>\n    </ReportFormContainer>;\n};\nexport default BusinessReports;","import { useAppContext } from '@riptech/shared-ui/src/hooks/useAppContext';\nimport Head from 'next/head';\nimport type { FC } from 'react';\nimport BusinessReports from '../../components/reportFetcher/business/BusinessReports';\nconst BusinessReportsPage: FC = () => {\n  const {\n    appName\n  } = useAppContext();\n  return <>\n      <Head data-sentry-element=\"Head\" data-sentry-source-file=\"business.tsx\">\n        <title>{`Business Reports | ${appName}`}</title>\n      </Head>\n      <BusinessReports data-sentry-element=\"BusinessReports\" data-sentry-source-file=\"business.tsx\" />\n    </>;\n};\nexport default BusinessReportsPage;"],"names":["window","__NEXT_P","push","__webpack_require__","ExtensionUtils","getIsoDateOnly","value","toISOString","split","shift","watchAnyObject","object","methods","callbackBefore","callbackAfter","method","original","bind","newMethod","args","result","apply","BusinessMetadataUtils","getMetadata","activeMarketplace","columns","sellerMetadata","SellerCentralRequestManager","fetchSalesAndTrafficReportColumns","data","getReportData","options","SalesAndTrafficReportDownloadUtils","formatSalesAndTrafficRow","row","rowIndex","apiInputIndex","selections","param","combinedResults","requestType","downloadDestinationType","setOfColumnsToCompare","period","dataRow","replaceAll","columnTranslationKey","index","Object","entries","labels","BusinessRequestUtils","getColumns","columnLabel","BusinessReportDateKey","moment","format","BusinessReportTitleKey","ReportDownloadUtils","sanitizeValue","INTEGER_COLUMNS","has","NumberUtils","formatInteger","parseInt","concat","PERCENTAGE_COLUMNS","CURRENCY_COLUMNS","formatCurrency","parseFloat","key","firstRangeValue","divisor","firstRangeNumber","Number","isNaN","ratio","formatPercentage","updateReportColumnsToInclude","businessReportColumnsToInclude","order","selectedColumns","_","keys","filter","undefined","col","GrowthOpportunitiesRecommendationKey","forEach","Set","downloadData","businessReportForm","setDownloadProgress","downloadReport","dateRanges","view","comparisonColumns","isComparingColumns","columnSelections","asins","amazonDateRanges","generateAmazonDateRanges","failedValues","amazonDateRange","fetchSalesAndTrafficData","length","convertMultilineTextToArray","error","handleNetworkError","start","end","flattenedResult","flat","csvData","sheetDataToWriteToDrive","generateSheetData","csvText","generateCSVText","fileName","toLowerCase","destination","reportFormData","inputs","sort","a","b","isBefore","map","generateSingleFetchAmazonDateRange","dateRange","input","valueOf","endISO","granularity","toUpperCase","startISO","label","totalApiInputs","progressPerInput","progress","hasNextPage","page","response","nextPage","fetchReportData","rows","hasNext","increment","fullProgress","Utils","sleep","getSellerCentralSleepTime","fetchSalesAndTrafficReport","fetchSalesAndTrafficReportByASIN","BUSINESS_REPORT_VIEWS","BUSINESS_REPORT_DATE_RANGE_OPTIONS","common_BusinessReportSelections","formik","dateRangeModal","disabled","columnSelectionModal","countOfSelected","enableComparisionColumns","columnComparisonModal","numColumnsToCompare","jsx_runtime","jsxs","Fragment","jsx","TextField","fullWidth","id","InputProps","readOnly","startAdornment","Box","display","flexWrap","gap","mt","values","range","Chip","onDelete","setFieldValue","i","size","onClick","onTrue","placeholder","data-sentry-element","data-sentry-source-file","FormControlLabel","control","Checkbox","checked","color","onChange","e","target","Stack","alignItems","direction","justifyContent","Tooltip","sx","ml","title","Iconify","icon","common_BusinessReportSubmitButton","isLoading","isInvalidDestination","ReportFormUtils","LoadingButton","isValid","loading","submitForm","variant","data-sentry-component","common_ColumnSelectionModal","open","onClose","setSelectedColumns","useState","selectAll","setSelectAll","dispatch","useDispatch","handleSelectAll","useCallback","reduce","acc","curr","translationKey","useEffect","numSelections","actions","text","filtered","s","enqueueSnackbar","message","HiddenReportColumnIndexesForSelection","setValues","prev","UserActions","setColumnSelection","Modal","maxWidth","strong","common_ComparisonColumnsModal","indexOfSelection","HiddenReportColumnIndexesForComparison","CommonUtils","omit","components_DateRangePicker","props","isMobile","useResponsive","MobileDateRangePicker","DesktopDateRangePicker","isDateRangeExists","r","some","common_DailyDateRangeModal","setSelectedDateRangeAndClose","today","utc","dateRangeMap","sevenDays","clone","subtract","fifteenDays","thirtyDays","lastWeek","startOf","endOf","lastMonth","lastQuarter","last365Days","yearToDate","handleDateRange","FormControl","RadioGroup","aria-labelledby","defaultValue","name","px","Radio","DateRangePicker","currentMonthCalendarPosition","disableFuture","minDate","slotProps","textField","endAdornment","IconButton","slots","field","SingleInputDateRangeField","common_MonthlyDateRangeModal","selectedMonths","setSelectedMonths","monthRanges","useMemo","months","minStartDate","current","isAfter","startOfCurrentTimeFrame","endOfCurrentTimeFrame","selectedDateRanges","cur","duplicates","sel","join","month","common_QuarterlyDateRangeModal","selectedQuarters","setSelectedQuarters","quarterRanges","quarters","quarterLabel","Math","floor","quarter","common_WeeklyDateRangeModal","startOfWeekDay","setStartOfWeekDay","selectedWeeks","setSelectedWeeks","weekRanges","weeks","add","currentStart","isoWeek","last4Weeks","isoWeekday","last10Weeks","handleWeekRange","selectedWeekRanges","find","select","MenuItem","spacing","Typography","week","useBusinessReports","byDateColumns","savedColumnSelection","useSelector","UserSelectors","columnSelectionByRequestTypeSelector","isPending","isSuccess","useQuery","enabled","queryFn","queryKey","setColumns","colLabel","useBoolean","business_ByASINReportForm","downloadSalesAndTrafficData","useFormik","initialValues","menuItemDestination","dataConfigurationId","isSavingToPreviousDestination","reportType","dateRangeGrouping","marketplaceCode","periods","reportingRange","onSubmit","formikHelpers","setSubmitting","validationSchema","Yup","shape","test","min","required","BackdropLoader","DailyDateRangeModal","onFalse","WeeklyDateRangeModal","MonthlyDateRangeModal","QuarterlyDateRangeModal","ColumnSelectionModal","ComparisonColumnsModal","handleChange","ToggleButtonGroup","exclusive","ToggleButton","BusinessReportSelections","errors","helperText","touched","multiline","onBlur","handleBlur","DataDestinationPicker","BusinessReportSubmitButton","business_ByDateReportForm","business_BusinessReports","tabValue","setTabValue","activeMarketplaceSelector","loadingDetails","metadata","fetchMetadata","metadataStatus","setUploadProgress","useReportFetcher","formData","Promise","all","ServerlessAPI","saveBusinessReportsColumnSelection","persist","preventDuplicate","err","ReportFormContainer","NoActiveSessionAlert","paddingBottom","Tabs","v","tabOption","Tab","ByDateReportForm","ByASINReportForm","ReportProgressBar","business","appName","useAppContext","Head","BusinessReports"],"sourceRoot":""}